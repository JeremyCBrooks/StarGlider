{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"APK",
				"APKArchive"
			],
			[
				"co",
				"contents"
			],
			[
				"file",
				"filename"
			],
			[
				"Platform",
				"PlatformAndroid"
			],
			[
				"Starc",
				"StarCatcherApplication"
			],
			[
				"CORE",
				"CORE_FILES_DIR"
			],
			[
				"LOG",
				"LOGE"
			]
		]
	},
	"buffers":
	[
		{
			"file": "StarCatcherNative.cpp",
			"settings":
			{
				"buffer_size": 1702,
				"line_ending": "Windows"
			}
		},
		{
			"file": "libzip/Android.mk",
			"settings":
			{
				"buffer_size": 1927,
				"line_ending": "Unix"
			}
		},
		{
			"file": "libpng/Android.mk",
			"settings":
			{
				"buffer_size": 1067,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PlatformAndroid.h",
			"settings":
			{
				"buffer_size": 729,
				"line_ending": "Windows"
			}
		},
		{
			"file": "PlatformAndroid.cpp",
			"settings":
			{
				"buffer_size": 6305,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 201 files for \"zip_fread\nzip_fread\"\n\n0 matches across 0 files\n\n\nSearching 201 files for \"zip_fread\nzip_fread\"\n\n0 matches across 0 files\n\n\nSearching 201 files for \"zip_fread\nzip_fread\"\n\n0 matches across 0 files\n\n\nSearching 201 files for \"read\"\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\PlatformAndroid.cpp:\n   22    png_byte header[8];\n   23  \n   24:   //read the header\n   25:   zip_fread(file, header, 8);\n   26  \n   27    //test if png\n   ..\n   34  \n   35    //create png struct\n   36:   png_structp png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL,\n   37        NULL, NULL);\n   38    if (!png_ptr) {\n   ..\n   45    png_infop info_ptr = png_create_info_struct(png_ptr);\n   46    if (!info_ptr) {\n   47:     png_destroy_read_struct(&png_ptr, (png_infopp) NULL, (png_infopp) NULL);\n   48      LOGE(\"Unable to create png info : %s\", filename);\n   49      zip_fclose(file);\n   ..\n   54    png_infop end_info = png_create_info_struct(png_ptr);\n   55    if (!end_info) {\n   56:     png_destroy_read_struct(&png_ptr, &info_ptr, (png_infopp) NULL);\n   57      LOGE(\"Unable to create png end info : %s\", filename);\n   58      zip_fclose(file);\n   ..\n   64      zip_fclose(file);\n   65      LOGE(\"Error during setjmp : %s\", filename);\n   66:     png_destroy_read_struct(&png_ptr, &info_ptr, &end_info);\n   67      return (TEXTURE_LOAD_ERROR);\n   68    }\n   69  \n   70:   //init png reading\n   71    //png_init_io(png_ptr, fp);\n   72:   auto png_zip_read = [&file](png_structp png_ptr, png_bytep data, png_size_t length) {\n   73:   		zip_fread(file, data, length);\n   74    }\n   75:   png_set_read_fn(png_ptr, NULL, png_zip_read);\n   76  \n   77:   //let libpng know you already read the first 8 bytes\n   78    png_set_sig_bytes(png_ptr, 8);\n   79  \n   80:   // read all the info up to the image data\n   81:   png_read_info(png_ptr, info_ptr);\n   82  \n   83    //variables to pass to get info\n   ..\n   94  \n   95    // Update the png info struct.\n   96:   png_read_update_info(png_ptr, info_ptr);\n   97  \n   98    // Row size in bytes.\n   ..\n  103    if (!image_data) {\n  104      //clean up memory and close stuff\n  105:     png_destroy_read_struct(&png_ptr, &info_ptr, &end_info);\n  106      LOGE(\"Unable to allocate image_data while loading %s \", filename);\n  107      zip_fclose(file);\n  ...\n  109    }\n  110  \n  111:   //row_pointers is for pointing to image_data for reading the png with libpng\n  112    png_bytep *row_pointers = new png_bytep[height];\n  113    if (!row_pointers) {\n  114      //clean up memory and close stuff\n  115:     png_destroy_read_struct(&png_ptr, &info_ptr, &end_info);\n  116      delete[] image_data;\n  117      LOGE(\"Unable to allocate row_pointer while loading %s \", filename);\n  ...\n  123      row_pointers[height - 1 - i] = image_data + i * rowbytes;\n  124  \n  125:   //read the png into image_data through row_pointers\n  126:   png_read_image(png_ptr, row_pointers);\n  127  \n  128    \n  ...\n  136  \n  137    //clean up memory and close stuff\n  138:   png_destroy_read_struct(&png_ptr, &info_ptr, &end_info);\n  139    delete[] image_data;\n  140    delete[] row_pointers;\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\StarCatcherNative.cpp:\n   34      const char* name = zip_get_name(APKArchive, i, 0);\n   35      if (name == NULL) {\n   36:       LOGE(\"Error reading zip file name at index %i : %s\", zip_strerror(APKArchive));\n   37        return;\n   38      }\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\Android.mk:\n   25  	pngget.c \\\n   26  	pngmem.c \\\n   27: 	pngpread.c \\\n   28: 	pngread.c \\\n   29  	pngrio.c \\\n   30  	pngrtran.c \\\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\png.c:\n   24   */\n   25  \n   26: /* Tells libpng that we have already handled the first \"num_bytes\" bytes\n   27   * of the PNG file signature.  If the PNG data is embedded into another\n   28:  * stream we can set num_bytes = 8 so that libpng will not attempt to read\n   29   * or write any of the magic bytes before it starts on the IHDR.\n   30   */\n   31  \n   32: #ifdef PNG_READ_SUPPORTED\n   33  void PNGAPI\n   34  png_set_sig_bytes(png_structp png_ptr, int num_bytes)\n   ..\n   47  /* Checks whether the supplied bytes match the PNG signature.  We allow\n   48   * checking less than the full 8-byte signature so that those apps that\n   49:  * already read the first few bytes of a file to determine the file type\n   50   * can simply check the remaining bytes for extra assurance.  Returns\n   51   * an integer less than, equal to, or greater than zero if sig is found,\n   ..\n   71  }\n   72  \n   73: #endif /* PNG_READ_SUPPORTED */\n   74  \n   75: #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)\n   76  /* Function to allocate memory for zlib and clear it to 0. */\n   77  voidpf /* PRIVATE */\n   ..\n  170  \n  171  /* This function frees the memory associated with a single info struct.\n  172:  * Normally, one would use either png_destroy_read_struct() or\n  173   * png_destroy_write_struct() to free an info struct, but this may be\n  174   * useful for some applications.\n  ...\n  468     png_info_init_3(&info_ptr, png_sizeof(png_info));\n  469  }\n  470: #endif /* defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED) */\n  471  \n  472  /* This function returns a pointer to the io_ptr associated with the user\n  473   * functions.  The application should free any memory associated with this\n  474:  * pointer before png_write_destroy() or png_read_destroy() are called.\n  475   */\n  476  png_voidp PNGAPI\n  ...\n  482  }\n  483  \n  484: #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)\n  485  #ifdef PNG_STDIO_SUPPORTED\n  486  /* Initialize the default input/output functions for the PNG file.  If you\n  487:  * use your own read or write routines, you can call either png_set_read_fn()\n  488   * or png_set_write_fn() instead of png_init_io().  If you have defined\n  489   * PNG_NO_STDIO, you must use a function of your own because \"FILE *\" isn't\n  ...\n  541  #endif /* PNG_TIME_RFC1123_SUPPORTED */\n  542  \n  543: #endif /* defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED) */\n  544  \n  545  png_charp PNGAPI\n  ...\n  597  #ifdef __STDC__\n  598     return ((png_charp) PNG_HEADER_VERSION_STRING\n  599: #ifndef PNG_READ_SUPPORTED\n  600:    \"     (NO READ SUPPORT)\"\n  601  #endif\n  602     PNG_STRING_NEWLINE);\n  ...\n  606  }\n  607  \n  608: #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)\n  609  #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED\n  610  int PNGAPI\n  ...\n  632     return (inflateReset(&png_ptr->zstream));\n  633  }\n  634: #endif /* defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED) */\n  635  \n  636  /* This function was added to libpng-1.0.7 */\n  ...\n  644  \n  645  \n  646: #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)\n  647  #ifdef PNG_SIZE_T\n  648  /* Added at libpng version 1.2.6 */\n  ...\n  873     /* Accept filter_method 64 (intrapixel differencing) only if\n  874      * 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and\n  875:     * 2. Libpng did not read a PNG signature (this filter_method is only\n  876      *    used in PNG datastreams that are embedded in MNG datastreams) and\n  877      * 3. The application called png_permit_mng_features with a mask that\n  ...\n  914        png_error(png_ptr, \"Invalid IHDR data\");\n  915  }\n  916: #endif /* defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED) */\n  917  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\png.h:\n  309   *        png_convert_from_time_t() in pngwrite.c\n  310   *        png_get_tIME() in pngget.c\n  311:  *        png_handle_tIME() in pngrutil.c, called in pngread.c\n  312   *        png_set_tIME() in pngset.c\n  313   *        png_write_tIME() in pngwutil.c, called in pngwrite.c\n  ...\n  582  \n  583      /* libpng-using applications should NOT directly modify this byte. */\n  584:     png_byte location; /* mode of operation at read time */\n  585  }\n  586  png_unknown_chunk;\n  ...\n  591  /* png_info is a structure that holds the information in a PNG file so\n  592   * that the application can find out the characteristics of the image.\n  593:  * If you are reading the file, this structure will tell you what is\n  594   * in the PNG file.  If you are writing the file, fill in the information\n  595   * you want to put into the PNG file, then call png_write_info().\n  ...\n  597   * consult that document for information about the meaning of each field.\n  598   *\n  599:  * With libpng < 0.95, it was only possible to directly set and read the\n  600   * the values in the png_info_struct, which meant that the contents and\n  601   * order of the values had to remain fixed.  With libpng 0.95 and later,\n  ...\n  618   * of the png_data_freer() function.\n  619   *\n  620:  * More allocation details: all the chunk-reading functions that\n  621   * change these members go through the corresponding png_set_*\n  622   * functions.  A function to clear these members is available: see\n  ...\n  655                                               PNG_INTERLACE_ADAM7 */\n  656  \n  657:    /* The following is informational only on read, and not used on writes. */\n  658     png_byte channels PNG_DEPSTRUCT;       /* number of data channels per\n  659                                               pixel (1, 2, 3, 4) */\n  ...\n  661     png_byte spare_byte PNG_DEPSTRUCT;     /* to align the data, and for\n  662                                               future use */\n  663:    png_byte signature[8] PNG_DEPSTRUCT;   /* magic bytes read by libpng\n  664                                               from start of file */\n  665  \n  666:    /* The rest of the data is optional.  If you are reading, check the\n  667      * valid field to see if the information in these are valid.  If you\n  668      * are writing, set the valid field to those chunks you want written,\n  ...\n  687  \n  688  #ifdef PNG_TEXT_SUPPORTED\n  689:    /* The tEXt, and zTXt chunks contain human-readable textual data in\n  690      * uncompressed, compressed, and optionally compressed forms, respectively.\n  691      * The data in \"text\" is an array of pointers to uncompressed,\n  ...\n  695      * be in an image.\n  696      */\n  697:    int num_text PNG_DEPSTRUCT; /* number of comments read/to write */\n  698     int max_text PNG_DEPSTRUCT; /* current size of text array */\n  699:    png_textp text PNG_DEPSTRUCT; /* array of comments read/to write */\n  700  #endif /* PNG_TEXT_SUPPORTED */\n  701  \n  ...\n  717  #endif\n  718  \n  719: #if defined(PNG_tRNS_SUPPORTED) || defined(PNG_READ_EXPAND_SUPPORTED) || \\\n  720: defined(PNG_READ_BACKGROUND_SUPPORTED)\n  721     /* The tRNS chunk supplies transparency data for paletted images and\n  722      * other image types that don't need a full alpha channel.  There are\n  ...\n  734  #endif\n  735  \n  736: #if defined(PNG_bKGD_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n  737     /* The bKGD chunk gives the suggested image background color if the\n  738      * display program does not have its own background color and the image\n  ...\n  965  #define PNG_MAX_PALETTE_LENGTH    256\n  966  \n  967: /* These determine if an ancillary chunk's data has been successfully read\n  968   * from the PNG header, or if the application has filled in the corresponding\n  969   * data in the info_struct to be written into the output file.  The values\n  ...\n 1008   * own.  The png_error_ptr type should match that of user-supplied warning\n 1009   * and error functions, while the png_rw_ptr type should match that of the\n 1010:  * user read/write data functions.\n 1011   */\n 1012  typedef struct png_struct_def png_struct;\n ....\n 1016  typedef void (PNGAPI *png_rw_ptr) PNGARG((png_structp, png_bytep, png_size_t));\n 1017  typedef void (PNGAPI *png_flush_ptr) PNGARG((png_structp));\n 1018: typedef void (PNGAPI *png_read_status_ptr) PNGARG((png_structp, png_uint_32,\n 1019     int));\n 1020  typedef void (PNGAPI *png_write_status_ptr) PNGARG((png_structp, png_uint_32,\n 1021     int));\n 1022  \n 1023: #ifdef PNG_PROGRESSIVE_READ_SUPPORTED\n 1024  typedef void (PNGAPI *png_progressive_info_ptr) PNGARG((png_structp,\n 1025     png_infop));\n ....\n 1029  #endif\n 1030  \n 1031: #if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \\\n 1032      defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)\n 1033  typedef void (PNGAPI *png_user_transform_ptr) PNGARG((png_structp,\n ....\n 1051  \n 1052  /* Transform masks for the high-level interface */\n 1053: #define PNG_TRANSFORM_IDENTITY       0x0000    /* read and write */\n 1054: #define PNG_TRANSFORM_STRIP_16       0x0001    /* read only */\n 1055: #define PNG_TRANSFORM_STRIP_ALPHA    0x0002    /* read only */\n 1056: #define PNG_TRANSFORM_PACKING        0x0004    /* read and write */\n 1057: #define PNG_TRANSFORM_PACKSWAP       0x0008    /* read and write */\n 1058: #define PNG_TRANSFORM_EXPAND         0x0010    /* read only */\n 1059: #define PNG_TRANSFORM_INVERT_MONO    0x0020    /* read and write */\n 1060: #define PNG_TRANSFORM_SHIFT          0x0040    /* read and write */\n 1061: #define PNG_TRANSFORM_BGR            0x0080    /* read and write */\n 1062: #define PNG_TRANSFORM_SWAP_ALPHA     0x0100    /* read and write */\n 1063: #define PNG_TRANSFORM_SWAP_ENDIAN    0x0200    /* read and write */\n 1064: #define PNG_TRANSFORM_INVERT_ALPHA   0x0400    /* read and write */\n 1065  #define PNG_TRANSFORM_STRIP_FILLER   0x0800    /* write only */\n 1066  /* Added to libpng-1.2.34 */\n ....\n 1068  #define PNG_TRANSFORM_STRIP_FILLER_AFTER 0x1000 /* write only */\n 1069  /* Added to libpng-1.4.0 */\n 1070: #define PNG_TRANSFORM_GRAY_TO_RGB   0x2000      /* read only */\n 1071  \n 1072  /* Flags for MNG supported features */\n ....\n 1078  typedef void (*png_free_ptr) PNGARG((png_structp, png_voidp));\n 1079  \n 1080: /* The structure that holds the information to read and write PNG files.\n 1081   * The only people who need to care about what is inside of this are the\n 1082   * people who will be modifying the library for their own special needs.\n ....\n 1100     png_rw_ptr write_data_fn PNG_DEPSTRUCT;  /* function for writing\n 1101                                                 output data */\n 1102:    png_rw_ptr read_data_fn PNG_DEPSTRUCT;   /* function for reading\n 1103                                                 input data */\n 1104     png_voidp io_ptr PNG_DEPSTRUCT;          /* ptr to application struct\n 1105                                                 for I/O functions */\n 1106  \n 1107: #ifdef PNG_READ_USER_TRANSFORM_SUPPORTED\n 1108:    png_user_transform_ptr read_user_transform_fn PNG_DEPSTRUCT; /* user read\n 1109                                                                   transform */\n 1110  #endif\n ....\n 1117  /* These were added in libpng-1.0.2 */\n 1118  #ifdef PNG_USER_TRANSFORM_PTR_SUPPORTED\n 1119: #if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \\\n 1120      defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)\n 1121     png_voidp user_transform_ptr PNG_DEPSTRUCT; /* user supplied struct\n ....\n 1183                                                 routines */\n 1184  \n 1185:    png_uint_32 idat_size PNG_DEPSTRUCT;     /* current IDAT size for read */\n 1186     png_uint_32 crc PNG_DEPSTRUCT;           /* current chunk CRC value */\n 1187     png_colorp palette PNG_DEPSTRUCT;        /* palette from the input file */\n ....\n 1205     png_byte channels PNG_DEPSTRUCT;         /* number of channels in file */\n 1206     png_byte usr_channels PNG_DEPSTRUCT;     /* channels at start of write */\n 1207:    png_byte sig_bytes PNG_DEPSTRUCT;        /* magic bytes read/written from\n 1208                                                 start of file */\n 1209  \n 1210: #if defined(PNG_READ_FILLER_SUPPORTED) || defined(PNG_WRITE_FILLER_SUPPORTED)\n 1211     png_uint_16 filler PNG_DEPSTRUCT;           /* filler bytes for pixel\n 1212                                                    expansion */\n ....\n 1220     png_color_16 background PNG_DEPSTRUCT;   /* background color in\n 1221                                                 screen gamma space */\n 1222: #ifdef PNG_READ_GAMMA_SUPPORTED\n 1223     png_color_16 background_1 PNG_DEPSTRUCT; /* background normalized\n 1224                                                 to gamma 1.0 */\n ....\n 1235  #endif\n 1236  \n 1237: #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n 1238     int gamma_shift PNG_DEPSTRUCT;      /* number of \"insignificant\" bits\n 1239                                            16-bit gamma */\n ....\n 1245  #endif\n 1246  \n 1247: #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n 1248     png_bytep gamma_table PNG_DEPSTRUCT;     /* gamma table for 8-bit\n 1249                                                 depth files */\n ....\n 1257  #endif\n 1258  \n 1259: #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_sBIT_SUPPORTED)\n 1260     png_color_8 sig_bit PNG_DEPSTRUCT;       /* significant bits in each\n 1261                                                 available channel */\n 1262  #endif\n 1263  \n 1264: #if defined(PNG_READ_SHIFT_SUPPORTED) || defined(PNG_WRITE_SHIFT_SUPPORTED)\n 1265     png_color_8 shift PNG_DEPSTRUCT;         /* shift for significant bit\n 1266                                                 tranformation */\n 1267  #endif\n 1268  \n 1269: #if defined(PNG_tRNS_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED) \\\n 1270:  || defined(PNG_READ_EXPAND_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n 1271     png_bytep trans_alpha PNG_DEPSTRUCT;           /* alpha values for\n 1272                                                       paletted files */\n ....\n 1275  #endif\n 1276  \n 1277:    png_read_status_ptr read_row_fn PNG_DEPSTRUCT;   /* called after each\n 1278                                                         row is decoded */\n 1279     png_write_status_ptr write_row_fn PNG_DEPSTRUCT; /* called after each\n 1280                                                         row is encoded */\n 1281: #ifdef PNG_PROGRESSIVE_READ_SUPPORTED\n 1282     png_progressive_info_ptr info_fn PNG_DEPSTRUCT; /* called after header\n 1283:                                                       data fully read */\n 1284     png_progressive_row_ptr row_fn PNG_DEPSTRUCT;   /* called after each\n 1285                                                        prog. row is decoded */\n ....\n 1289                                                        save_buffer */\n 1290     png_bytep save_buffer PNG_DEPSTRUCT;            /* buffer for previously\n 1291:                                                       read data */\n 1292     png_bytep current_buffer_ptr PNG_DEPSTRUCT;     /* current location in\n 1293                                                        current_buffer */\n ....\n 1315                                                        text input data */\n 1316       png_size_t current_text_left PNG_DEPSTRUCT;   /* how much text left\n 1317:                                                       to read in input */\n 1318       png_charp current_text PNG_DEPSTRUCT;         /* current text chunk\n 1319                                                        buffer */\n 1320       png_charp current_text_ptr PNG_DEPSTRUCT;     /* current location\n 1321                                                        in current_text */\n 1322: #  endif /* PNG_PROGRESSIVE_READ_SUPPORTED && PNG_TEXT_SUPPORTED */\n 1323  \n 1324: #endif /* PNG_PROGRESSIVE_READ_SUPPORTED */\n 1325  \n 1326  #if defined(__TURBOC__) && !defined(_Windows) && !defined(__FLAT__)\n ....\n 1333  #endif\n 1334  \n 1335: #ifdef PNG_READ_DITHER_SUPPORTED\n 1336     png_bytep palette_lookup PNG_DEPSTRUCT; /* lookup table for dithering */\n 1337     png_bytep dither_index PNG_DEPSTRUCT;   /* index translation for palette\n ....\n 1339  #endif\n 1340  \n 1341: #if defined(PNG_READ_DITHER_SUPPORTED) || defined(PNG_hIST_SUPPORTED)\n 1342     png_uint_16p hist PNG_DEPSTRUCT;                /* histogram */\n 1343  #endif\n ....\n 1371  #ifdef PNG_USER_CHUNKS_SUPPORTED\n 1372     png_voidp user_chunk_ptr PNG_DEPSTRUCT;\n 1373:    png_user_chunk_ptr read_user_chunk_fn PNG_DEPSTRUCT; /* user read\n 1374                                                             chunk handler */\n 1375  #endif\n ....\n 1381  \n 1382  /* New members added in libpng-1.0.3 */\n 1383: #ifdef PNG_READ_RGB_TO_GRAY_SUPPORTED\n 1384     png_byte rgb_to_gray_status PNG_DEPSTRUCT;\n 1385     /* These were changed from png_byte in libpng-1.0.6 */\n ....\n 1391  /* New member added in libpng-1.0.4 (renamed in 1.0.9) */\n 1392  #if defined(PNG_MNG_FEATURES_SUPPORTED) || \\\n 1393:     defined(PNG_READ_EMPTY_PLTE_SUPPORTED) || \\\n 1394      defined(PNG_WRITE_EMPTY_PLTE_SUPPORTED)\n 1395  /* Changed from png_byte to png_uint_32 at version 1.2.0 */\n ....\n 1398  \n 1399  /* New member added in libpng-1.0.7 */\n 1400: #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n 1401     png_fixed_point int_gamma PNG_DEPSTRUCT;\n 1402  #endif\n ....\n 1423                                                     (unfiltered) row */\n 1424  \n 1425: #ifdef PNG_READ_DITHER_SUPPORTED\n 1426  /* The following three members were added at version 1.0.14 and 1.2.4 */\n 1427     png_bytep dither_sort PNG_DEPSTRUCT;            /* working sort array */\n ....\n 1457  \n 1458  /* New member added in libpng-1.2.30 */\n 1459:   png_charp chunkdata PNG_DEPSTRUCT;  /* buffer for reading chunk data */\n 1460  \n 1461  #ifdef PNG_IO_STATE_SUPPORTED\n ....\n 1482  extern PNG_EXPORT(png_uint_32,png_access_version_number) PNGARG((void));\n 1483  \n 1484: /* Tell lib we have already handled the first <num_bytes> magic bytes.\n 1485   * Handling more than 8 bytes from the beginning of the file is an error.\n 1486   */\n ....\n 1496     png_size_t num_to_check));\n 1497  \n 1498: /* Allocate and initialize png_ptr struct for reading, and any other memory. */\n 1499: extern PNG_EXPORT(png_structp,png_create_read_struct)\n 1500     PNGARG((png_const_charp user_png_ver, png_voidp error_ptr,\n 1501     png_error_ptr error_fn, png_error_ptr warn_fn)) PNG_ALLOCATED;\n ....\n 1538  /* New functions added in libpng-1.0.2 (not enabled by default until 1.2.0) */\n 1539  #ifdef PNG_USER_MEM_SUPPORTED\n 1540: extern PNG_EXPORT(png_structp,png_create_read_struct_2)\n 1541     PNGARG((png_const_charp user_png_ver, png_voidp error_ptr,\n 1542     png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,\n ....\n 1579     png_infop info_ptr));\n 1580  \n 1581: #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n 1582: /* Read the information before the actual image data. */\n 1583: extern PNG_EXPORT(void,png_read_info) PNGARG((png_structp png_ptr,\n 1584     png_infop info_ptr));\n 1585  #endif\n ....\n 1600  #endif /* PNG_CONVERT_tIME_SUPPORTED */\n 1601  \n 1602: #ifdef PNG_READ_EXPAND_SUPPORTED\n 1603  /* Expand data to 24-bit RGB, or 8-bit grayscale, with alpha if available. */\n 1604  extern PNG_EXPORT(void,png_set_expand) PNGARG((png_structp png_ptr));\n ....\n 1609  #endif\n 1610  \n 1611: #if defined(PNG_READ_BGR_SUPPORTED) || defined(PNG_WRITE_BGR_SUPPORTED)\n 1612  /* Use blue, green, red order for pixels. */\n 1613  extern PNG_EXPORT(void,png_set_bgr) PNGARG((png_structp png_ptr));\n 1614  #endif\n 1615  \n 1616: #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED\n 1617  /* Expand the grayscale to 24-bit RGB if necessary. */\n 1618  extern PNG_EXPORT(void,png_set_gray_to_rgb) PNGARG((png_structp png_ptr));\n 1619  #endif\n 1620  \n 1621: #ifdef PNG_READ_RGB_TO_GRAY_SUPPORTED\n 1622  /* Reduce RGB to grayscale. */\n 1623  #ifdef PNG_FLOATING_POINT_SUPPORTED\n ....\n 1634     png_colorp palette));\n 1635  \n 1636: #ifdef PNG_READ_STRIP_ALPHA_SUPPORTED\n 1637  extern PNG_EXPORT(void,png_set_strip_alpha) PNGARG((png_structp png_ptr));\n 1638  #endif\n 1639  \n 1640: #if defined(PNG_READ_SWAP_ALPHA_SUPPORTED) || \\\n 1641      defined(PNG_WRITE_SWAP_ALPHA_SUPPORTED)\n 1642  extern PNG_EXPORT(void,png_set_swap_alpha) PNGARG((png_structp png_ptr));\n 1643  #endif\n 1644  \n 1645: #if defined(PNG_READ_INVERT_ALPHA_SUPPORTED) || \\\n 1646      defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)\n 1647  extern PNG_EXPORT(void,png_set_invert_alpha) PNGARG((png_structp png_ptr));\n 1648  #endif\n 1649  \n 1650: #if defined(PNG_READ_FILLER_SUPPORTED) || defined(PNG_WRITE_FILLER_SUPPORTED)\n 1651  /* Add a filler byte to 8-bit Gray or 24-bit RGB images. */\n 1652  extern PNG_EXPORT(void,png_set_filler) PNGARG((png_structp png_ptr,\n ....\n 1658  extern PNG_EXPORT(void,png_set_add_alpha) PNGARG((png_structp png_ptr,\n 1659     png_uint_32 filler, int flags));\n 1660: #endif /* PNG_READ_FILLER_SUPPORTED || PNG_WRITE_FILLER_SUPPORTED */\n 1661  \n 1662: #if defined(PNG_READ_SWAP_SUPPORTED) || defined(PNG_WRITE_SWAP_SUPPORTED)\n 1663  /* Swap bytes in 16-bit depth files. */\n 1664  extern PNG_EXPORT(void,png_set_swap) PNGARG((png_structp png_ptr));\n 1665  #endif\n 1666  \n 1667: #if defined(PNG_READ_PACK_SUPPORTED) || defined(PNG_WRITE_PACK_SUPPORTED)\n 1668  /* Use 1 byte per pixel in 1, 2, or 4-bit depth files. */\n 1669  extern PNG_EXPORT(void,png_set_packing) PNGARG((png_structp png_ptr));\n 1670  #endif\n 1671  \n 1672: #if defined(PNG_READ_PACKSWAP_SUPPORTED) || \\\n 1673      defined(PNG_WRITE_PACKSWAP_SUPPORTED)\n 1674  /* Swap packing order of pixels in bytes. */\n ....\n 1676  #endif\n 1677  \n 1678: #if defined(PNG_READ_SHIFT_SUPPORTED) || defined(PNG_WRITE_SHIFT_SUPPORTED)\n 1679  /* Converts files to legal bit depths. */\n 1680  extern PNG_EXPORT(void,png_set_shift) PNGARG((png_structp png_ptr,\n ....\n 1682  #endif\n 1683  \n 1684: #if defined(PNG_READ_INTERLACING_SUPPORTED) || \\\n 1685      defined(PNG_WRITE_INTERLACING_SUPPORTED)\n 1686  /* Have the code handle the interlacing.  Returns the number of passes. */\n ....\n 1688  #endif\n 1689  \n 1690: #if defined(PNG_READ_INVERT_SUPPORTED) || defined(PNG_WRITE_INVERT_SUPPORTED)\n 1691  /* Invert monochrome files */\n 1692  extern PNG_EXPORT(void,png_set_invert_mono) PNGARG((png_structp png_ptr));\n 1693  #endif\n 1694  \n 1695: #ifdef PNG_READ_BACKGROUND_SUPPORTED\n 1696  /* Handle alpha and tRNS by replacing with a background color. */\n 1697  #ifdef PNG_FLOATING_POINT_SUPPORTED\n ....\n 1706  #endif\n 1707  \n 1708: #ifdef PNG_READ_16_TO_8_SUPPORTED\n 1709  /* Strip the second byte of information from a 16-bit depth file. */\n 1710  extern PNG_EXPORT(void,png_set_strip_16) PNGARG((png_structp png_ptr));\n 1711  #endif\n 1712  \n 1713: #ifdef PNG_READ_DITHER_SUPPORTED\n 1714  /* Turn on dithering, and reduce the palette to the number of colors\n 1715   * available.\n ....\n 1720  #endif\n 1721  \n 1722: #ifdef PNG_READ_GAMMA_SUPPORTED\n 1723  /* Handle gamma correction. Screen_gamma=(display_exponent) */\n 1724  #ifdef PNG_FLOATING_POINT_SUPPORTED\n ....\n 1737  \n 1738  /* Optional update palette with requested transformations */\n 1739: extern PNG_EXPORT(void,png_start_read_image) PNGARG((png_structp png_ptr));\n 1740  \n 1741  /* Optional call to update the users info structure */\n 1742: extern PNG_EXPORT(void,png_read_update_info) PNGARG((png_structp png_ptr,\n 1743     png_infop info_ptr));\n 1744  \n 1745: #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n 1746: /* Read one or more rows of image data. */\n 1747: extern PNG_EXPORT(void,png_read_rows) PNGARG((png_structp png_ptr,\n 1748     png_bytepp row, png_bytepp display_row, png_uint_32 num_rows));\n 1749  #endif\n 1750  \n 1751: #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n 1752: /* Read a row of data. */\n 1753: extern PNG_EXPORT(void,png_read_row) PNGARG((png_structp png_ptr,\n 1754     png_bytep row,\n 1755     png_bytep display_row));\n 1756  #endif\n 1757  \n 1758: #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n 1759: /* Read the whole image into memory at once. */\n 1760: extern PNG_EXPORT(void,png_read_image) PNGARG((png_structp png_ptr,\n 1761     png_bytepp image));\n 1762  #endif\n ....\n 1778     png_infop info_ptr));\n 1779  \n 1780: #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n 1781: /* Read the end of the PNG file. */\n 1782: extern PNG_EXPORT(void,png_read_end) PNGARG((png_structp png_ptr,\n 1783     png_infop info_ptr));\n 1784  #endif\n ....\n 1789  \n 1790  /* Free any memory associated with the png_struct and the png_info_structs */\n 1791: extern PNG_EXPORT(void,png_destroy_read_struct) PNGARG((png_structpp\n 1792     png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr));\n 1793  \n ....\n 1922  /* These next functions are called for input/output, memory, and error\n 1923   * handling.  They are in the file pngrio.c, pngwio.c, and pngerror.c,\n 1924:  * and call standard C I/O routines such as fread(), fwrite(), and\n 1925   * fprintf().  These functions can be made to use other I/O routines\n 1926   * at run time for those applications that need to handle I/O in a\n ....\n 1963  \n 1964  /* Replace the default data input function with a user supplied one. */\n 1965: extern PNG_EXPORT(void,png_set_read_fn) PNGARG((png_structp png_ptr,\n 1966:    png_voidp io_ptr, png_rw_ptr read_data_fn));\n 1967  \n 1968  /* Return the user pointer associated with the I/O functions */\n 1969  extern PNG_EXPORT(png_voidp,png_get_io_ptr) PNGARG((png_structp png_ptr));\n 1970  \n 1971: extern PNG_EXPORT(void,png_set_read_status_fn) PNGARG((png_structp png_ptr,\n 1972:    png_read_status_ptr read_row_fn));\n 1973  \n 1974  extern PNG_EXPORT(void,png_set_write_status_fn) PNGARG((png_structp png_ptr,\n ....\n 1983  #endif\n 1984  \n 1985: #ifdef PNG_READ_USER_TRANSFORM_SUPPORTED\n 1986: extern PNG_EXPORT(void,png_set_read_user_transform_fn) PNGARG((png_structp\n 1987:    png_ptr, png_user_transform_ptr read_user_transform_fn));\n 1988  #endif\n 1989  \n ....\n 1993  #endif\n 1994  \n 1995: #if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \\\n 1996      defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)\n 1997  extern PNG_EXPORT(void,png_set_user_transform_info) PNGARG((png_structp\n ....\n 2004  \n 2005  #ifdef PNG_USER_CHUNKS_SUPPORTED\n 2006: extern PNG_EXPORT(void,png_set_read_user_chunk_fn) PNGARG((png_structp png_ptr,\n 2007:    png_voidp user_chunk_ptr, png_user_chunk_ptr read_user_chunk_fn));\n 2008  extern PNG_EXPORT(png_voidp,png_get_user_chunk_ptr) PNGARG((png_structp\n 2009     png_ptr));\n 2010  #endif\n 2011  \n 2012: #ifdef PNG_PROGRESSIVE_READ_SUPPORTED\n 2013: /* Sets the function callbacks for the push reader, and a pointer to a\n 2014   * user-defined structure available to the callback functions.\n 2015   */\n 2016: extern PNG_EXPORT(void,png_set_progressive_read_fn) PNGARG((png_structp png_ptr,\n 2017     png_voidp progressive_ptr,\n 2018     png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn,\n 2019     png_progressive_end_ptr end_fn));\n 2020  \n 2021: /* Returns the user pointer associated with the push read functions */\n 2022  extern PNG_EXPORT(png_voidp,png_get_progressive_ptr)\n 2023     PNGARG((png_structp png_ptr));\n ....\n 2032  extern PNG_EXPORT(void,png_progressive_combine_row) PNGARG((png_structp png_ptr,\n 2033     png_bytep old_row, png_bytep new_row));\n 2034: #endif /* PNG_PROGRESSIVE_READ_SUPPORTED */\n 2035  \n 2036  extern PNG_EXPORT(png_voidp,png_malloc) PNGARG((png_structp png_ptr,\n ....\n 2117  \n 2118  /* The png_set_<chunk> functions are for storing values in the png_info_struct.\n 2119:  * Similarly, the png_get_<chunk> calls are used to read values from the\n 2120   * png_info_struct, either storing the parameters in the passed variables, or\n 2121   * setting pointers into the png_info_struct where the data is stored.  The\n ....\n 2138  #ifdef PNG_INFO_IMAGE_SUPPORTED\n 2139  /* Returns row_pointers, which is an array of pointers to scanlines that was\n 2140:  * returned from png_read_png().\n 2141   */\n 2142  extern PNG_EXPORT(png_bytepp,png_get_rows) PNGARG((png_structp png_ptr,\n ....\n 2208  #endif /* PNG_EASY_ACCESS_SUPPORTED */\n 2209  \n 2210: /* Returns pointer to signature string read from PNG header */\n 2211  extern PNG_EXPORT(png_bytep,png_get_signature) PNGARG((png_structp png_ptr,\n 2212  png_infop info_ptr));\n ....\n 2477  #ifdef PNG_INFO_IMAGE_SUPPORTED\n 2478  /* The \"params\" pointer is currently not used and is for future expansion. */\n 2479: extern PNG_EXPORT(void, png_read_png) PNGARG((png_structp png_ptr,\n 2480                          png_infop info_ptr,\n 2481                          int transforms,\n ....\n 2563  /* The flags returned by png_get_io_state() are the following: */\n 2564  #define PNG_IO_NONE        0x0000   /* no I/O at this moment */\n 2565: #define PNG_IO_READING     0x0001   /* currently reading */\n 2566  #define PNG_IO_WRITING     0x0002   /* currently writing */\n 2567  #define PNG_IO_SIGNATURE   0x0010   /* currently at the file signature */\n ....\n 2569  #define PNG_IO_CHUNK_DATA  0x0040   /* currently at the chunk data */\n 2570  #define PNG_IO_CHUNK_CRC   0x0080   /* currently at the chunk crc */\n 2571: #define PNG_IO_MASK_OP     0x000f   /* current operation: reading/writing */\n 2572  #define PNG_IO_MASK_LOC    0x00f0   /* current location: sig/hdr/data/crc */\n 2573  #endif /* ?PNG_IO_STATE_SUPPORTED */\n ....\n 2577   */\n 2578  \n 2579: #ifdef PNG_READ_COMPOSITE_NODIV_SUPPORTED\n 2580  /* With these routines we avoid an integer divide, which will be slower on\n 2581   * most machines.  However, it does take more operations than the corresponding\n ....\n 2617         (png_uint_32)(bg)*(png_uint_32)(65535L - (png_uint_32)(alpha)) +      \\\n 2618         (png_uint_32)32767) / (png_uint_32)65535L)\n 2619: #endif /* PNG_READ_COMPOSITE_NODIV_SUPPORTED */\n 2620  \n 2621: #ifdef PNG_USE_READ_MACROS\n 2622: /* Inline macros to do direct reads of bytes from the input buffer.\n 2623   * The png_get_int_32() routine assumes we are using two's complement\n 2624   * format for negative values, which is almost certainly true.\n 2625   */\n 2626: /* We could make special-case BIG_ENDIAN macros that do direct reads here */\n 2627  #  define png_get_uint_32(buf) \\\n 2628       (((png_uint_32)(*(buf)) << 24) + \\\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngconf.h:\n   15  \n   16  /* Any machine specific code is near the front of this file, so if you\n   17:  * are configuring libpng for a machine, you may want to read the section\n   18   * starting here down to where it starts to typedef png_color, png_text,\n   19   * and png_info.\n   ..\n   94   * the library down, but you may want to experiment to determine\n   95   * where it becomes significant, if you are concerned with memory\n   96:  * usage.  Note that zlib allocates at least 32Kb also.  For readers,\n   97:  * this describes the size of the buffer available to read the data in.\n   98   * Unless this gets smaller than the size of a row (compressed),\n   99   * it should not make much difference how big this is.\n  ...\n  106  /* Enable if you want a write-only libpng */\n  107  \n  108: #ifndef PNG_NO_READ_SUPPORTED\n  109: #  define PNG_READ_SUPPORTED\n  110  #endif\n  111  \n  112: /* Enable if you want a read-only libpng */\n  113  \n  114  #ifndef PNG_NO_WRITE_SUPPORTED\n  ...\n  364          * near the end of INSTALL.\n  365          */\n  366:            __pngconf.h__ in libpng already includes setjmp.h;\n  367             __dont__ include it again.;\n  368  #      endif\n  ...\n  454  \n  455  /* GR-P, 0.96a: Set \"*TRANSFORMS_SUPPORTED as default but allow user\n  456:  * to turn it off with PNG_NO_READ|WRITE_TRANSFORMS on the compile line,\n  457   * then pick and choose which ones to define without having to edit this\n  458:  * file. It is safe to use the PNG_NO_READ|WRITE_TRANSFORMS\n  459:  * if you only want to have a png-compliant reader/writer but don't need\n  460   * any of the extra transformations.  This saves about 80 kbytes in a\n  461   * typical installation of the library. (PNG_NO_* form added in version\n  ...\n  470  #endif\n  471  \n  472: #ifdef PNG_READ_SUPPORTED\n  473  \n  474: /* PNG_READ_TRANSFORMS_NOT_SUPPORTED is deprecated. */\n  475: #if !defined(PNG_READ_TRANSFORMS_NOT_SUPPORTED) && \\\n  476:       !defined(PNG_NO_READ_TRANSFORMS)\n  477: #  define PNG_READ_TRANSFORMS_SUPPORTED\n  478  #endif\n  479  \n  480: #ifdef PNG_READ_TRANSFORMS_SUPPORTED\n  481: #  ifndef PNG_NO_READ_EXPAND\n  482: #    define PNG_READ_EXPAND_SUPPORTED\n  483  #  endif\n  484: #  ifndef PNG_NO_READ_SHIFT\n  485: #    define PNG_READ_SHIFT_SUPPORTED\n  486  #  endif\n  487: #  ifndef PNG_NO_READ_PACK\n  488: #    define PNG_READ_PACK_SUPPORTED\n  489  #  endif\n  490: #  ifndef PNG_NO_READ_BGR\n  491: #    define PNG_READ_BGR_SUPPORTED\n  492  #  endif\n  493: #  ifndef PNG_NO_READ_SWAP\n  494: #    define PNG_READ_SWAP_SUPPORTED\n  495  #  endif\n  496: #  ifndef PNG_NO_READ_PACKSWAP\n  497: #    define PNG_READ_PACKSWAP_SUPPORTED\n  498  #  endif\n  499: #  ifndef PNG_NO_READ_INVERT\n  500: #    define PNG_READ_INVERT_SUPPORTED\n  501  #  endif\n  502  #if 0 /* removed from libpng-1.4.0 */\n  503: #  ifndef PNG_NO_READ_DITHER\n  504: #    define PNG_READ_DITHER_SUPPORTED\n  505  #  endif\n  506  #endif /* 0 */\n  507: #  ifndef PNG_NO_READ_BACKGROUND\n  508: #    define PNG_READ_BACKGROUND_SUPPORTED\n  509  #  endif\n  510: #  ifndef PNG_NO_READ_16_TO_8\n  511: #    define PNG_READ_16_TO_8_SUPPORTED\n  512  #  endif\n  513: #  ifndef PNG_NO_READ_FILLER\n  514: #    define PNG_READ_FILLER_SUPPORTED\n  515  #  endif\n  516: #  ifndef PNG_NO_READ_GAMMA\n  517: #    define PNG_READ_GAMMA_SUPPORTED\n  518  #  endif\n  519: #  ifndef PNG_NO_READ_GRAY_TO_RGB\n  520: #    define PNG_READ_GRAY_TO_RGB_SUPPORTED\n  521  #  endif\n  522: #  ifndef PNG_NO_READ_SWAP_ALPHA\n  523: #    define PNG_READ_SWAP_ALPHA_SUPPORTED\n  524  #  endif\n  525: #  ifndef PNG_NO_READ_INVERT_ALPHA\n  526: #    define PNG_READ_INVERT_ALPHA_SUPPORTED\n  527  #  endif\n  528: #  ifndef PNG_NO_READ_STRIP_ALPHA\n  529: #    define PNG_READ_STRIP_ALPHA_SUPPORTED\n  530  #  endif\n  531: #  ifndef PNG_NO_READ_USER_TRANSFORM\n  532: #    define PNG_READ_USER_TRANSFORM_SUPPORTED\n  533  #  endif\n  534: #  ifndef PNG_NO_READ_RGB_TO_GRAY\n  535: #    define PNG_READ_RGB_TO_GRAY_SUPPORTED\n  536  #  endif\n  537: #endif /* PNG_READ_TRANSFORMS_SUPPORTED */\n  538  \n  539: /* PNG_PROGRESSIVE_READ_NOT_SUPPORTED is deprecated. */\n  540: #if !defined(PNG_NO_PROGRESSIVE_READ) && \\\n  541:  !defined(PNG_PROGRESSIVE_READ_NOT_SUPPORTED)  /* if you don't do progressive */\n  542: #  define PNG_PROGRESSIVE_READ_SUPPORTED     /* reading.  This is not talking */\n  543  #endif                               /* about interlacing capability!  You'll */\n  544              /* still have interlacing unless you change the following define: */\n  545  \n  546: #define PNG_READ_INTERLACING_SUPPORTED /* required for PNG-compliant decoders */\n  547  \n  548: /* PNG_NO_SEQUENTIAL_READ_SUPPORTED is deprecated. */\n  549: #if !defined(PNG_NO_SEQUENTIAL_READ) && \\\n  550:     !defined(PNG_SEQUENTIAL_READ_SUPPORTED) && \\\n  551:     !defined(PNG_NO_SEQUENTIAL_READ_SUPPORTED)\n  552: #  define PNG_SEQUENTIAL_READ_SUPPORTED\n  553  #endif\n  554  \n  555: #ifndef PNG_NO_READ_COMPOSITE_NODIV\n  556: #  ifndef PNG_NO_READ_COMPOSITED_NODIV  /* libpng-1.0.x misspelling */\n  557: #    define PNG_READ_COMPOSITE_NODIV_SUPPORTED   /* well tested on Intel, SGI */\n  558  #  endif\n  559  #endif\n  560  \n  561: #if !defined(PNG_NO_GET_INT_32) || defined(PNG_READ_oFFS_SUPPORTED) || \\\n  562:     defined(PNG_READ_pCAL_SUPPORTED)\n  563  #  ifndef PNG_GET_INT_32_SUPPORTED\n  564  #    define PNG_GET_INT_32_SUPPORTED\n  ...\n  566  #endif\n  567  \n  568: #endif /* PNG_READ_SUPPORTED */\n  569  \n  570  #ifdef PNG_WRITE_SUPPORTED\n  ...\n  638  #define PNG_NO_ERROR_NUMBERS\n  639  \n  640: #if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \\\n  641      defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)\n  642  #  ifndef PNG_NO_USER_TRANSFORM_PTR\n  ...\n  740  /* Very little testing */\n  741  /*\n  742: #ifdef PNG_READ_SUPPORTED\n  743: #  ifndef PNG_READ_16_TO_8_ACCURATE_SCALE_SUPPORTED\n  744: #    define PNG_READ_16_TO_8_ACCURATE_SCALE_SUPPORTED\n  745  #  endif\n  746  #endif\n  ...\n  750  /* some testing */\n  751  /*\n  752: #ifndef PNG_READ_BIG_ENDIAN_SUPPORTED\n  753: #  define PNG_READ_BIG_ENDIAN_SUPPORTED\n  754  #endif\n  755  */\n  756  \n  757: #if !defined(PNG_NO_USE_READ_MACROS) && !defined(PNG_USE_READ_MACROS)\n  758: #  define PNG_USE_READ_MACROS\n  759  #endif\n  760  \n  ...\n  780   */\n  781  \n  782: /* PNG_READ_ANCILLARY_CHUNKS_NOT_SUPPORTED is deprecated. */\n  783: #if defined(PNG_READ_SUPPORTED) && \\\n  784:     !defined(PNG_READ_ANCILLARY_CHUNKS_NOT_SUPPORTED) && \\\n  785:     !defined(PNG_NO_READ_ANCILLARY_CHUNKS)\n  786: #  define PNG_READ_ANCILLARY_CHUNKS_SUPPORTED\n  787  #endif\n  788  \n  ...\n  794  #endif\n  795  \n  796: #ifdef PNG_READ_ANCILLARY_CHUNKS_SUPPORTED\n  797  \n  798: #ifdef PNG_NO_READ_TEXT\n  799: #  define PNG_NO_READ_iTXt\n  800: #  define PNG_NO_READ_tEXt\n  801: #  define PNG_NO_READ_zTXt\n  802  #endif\n  803  \n  804: #ifndef PNG_NO_READ_bKGD\n  805: #  define PNG_READ_bKGD_SUPPORTED\n  806  #  define PNG_bKGD_SUPPORTED\n  807  #endif\n  808: #ifndef PNG_NO_READ_cHRM\n  809: #  define PNG_READ_cHRM_SUPPORTED\n  810  #  define PNG_cHRM_SUPPORTED\n  811  #endif\n  812: #ifndef PNG_NO_READ_gAMA\n  813: #  define PNG_READ_gAMA_SUPPORTED\n  814  #  define PNG_gAMA_SUPPORTED\n  815  #endif\n  816: #ifndef PNG_NO_READ_hIST\n  817: #  define PNG_READ_hIST_SUPPORTED\n  818  #  define PNG_hIST_SUPPORTED\n  819  #endif\n  820: #ifndef PNG_NO_READ_iCCP\n  821: #  define PNG_READ_iCCP_SUPPORTED\n  822  #  define PNG_iCCP_SUPPORTED\n  823  #endif\n  824: #ifndef PNG_NO_READ_iTXt\n  825: #  ifndef PNG_READ_iTXt_SUPPORTED\n  826: #    define PNG_READ_iTXt_SUPPORTED\n  827  #  endif\n  828  #  ifndef PNG_iTXt_SUPPORTED\n  ...\n  830  #  endif\n  831  #endif\n  832: #ifndef PNG_NO_READ_oFFs\n  833: #  define PNG_READ_oFFs_SUPPORTED\n  834  #  define PNG_oFFs_SUPPORTED\n  835  #endif\n  836: #ifndef PNG_NO_READ_pCAL\n  837: #  define PNG_READ_pCAL_SUPPORTED\n  838  #  define PNG_pCAL_SUPPORTED\n  839  #endif\n  840: #ifndef PNG_NO_READ_sCAL\n  841: #  define PNG_READ_sCAL_SUPPORTED\n  842  #  define PNG_sCAL_SUPPORTED\n  843  #endif\n  844: #ifndef PNG_NO_READ_pHYs\n  845: #  define PNG_READ_pHYs_SUPPORTED\n  846  #  define PNG_pHYs_SUPPORTED\n  847  #endif\n  848: #ifndef PNG_NO_READ_sBIT\n  849: #  define PNG_READ_sBIT_SUPPORTED\n  850  #  define PNG_sBIT_SUPPORTED\n  851  #endif\n  852: #ifndef PNG_NO_READ_sPLT\n  853: #  define PNG_READ_sPLT_SUPPORTED\n  854  #  define PNG_sPLT_SUPPORTED\n  855  #endif\n  856: #ifndef PNG_NO_READ_sRGB\n  857: #  define PNG_READ_sRGB_SUPPORTED\n  858  #  define PNG_sRGB_SUPPORTED\n  859  #endif\n  860: #ifndef PNG_NO_READ_tEXt\n  861: #  define PNG_READ_tEXt_SUPPORTED\n  862  #  define PNG_tEXt_SUPPORTED\n  863  #endif\n  864: #ifndef PNG_NO_READ_tIME\n  865: #  define PNG_READ_tIME_SUPPORTED\n  866  #  define PNG_tIME_SUPPORTED\n  867  #endif\n  868: #ifndef PNG_NO_READ_tRNS\n  869: #  define PNG_READ_tRNS_SUPPORTED\n  870  #  define PNG_tRNS_SUPPORTED\n  871  #endif\n  872: #ifndef PNG_NO_READ_zTXt\n  873: #  define PNG_READ_zTXt_SUPPORTED\n  874  #  define PNG_zTXt_SUPPORTED\n  875  #endif\n  876: #ifndef PNG_NO_READ_OPT_PLTE\n  877: #  define PNG_READ_OPT_PLTE_SUPPORTED /* only affects support of the */\n  878  #endif                      /* optional PLTE chunk in RGB and RGBA images */\n  879: #if defined(PNG_READ_iTXt_SUPPORTED) || defined(PNG_READ_tEXt_SUPPORTED) || \\\n  880:     defined(PNG_READ_zTXt_SUPPORTED)\n  881: #  define PNG_READ_TEXT_SUPPORTED\n  882  #  define PNG_TEXT_SUPPORTED\n  883  #endif\n  884  \n  885: #endif /* PNG_READ_ANCILLARY_CHUNKS_SUPPORTED */\n  886  \n  887: #ifndef PNG_NO_READ_UNKNOWN_CHUNKS\n  888: #  ifndef PNG_READ_UNKNOWN_CHUNKS_SUPPORTED\n  889: #    define PNG_READ_UNKNOWN_CHUNKS_SUPPORTED\n  890  #  endif\n  891  #  ifndef PNG_UNKNOWN_CHUNKS_SUPPORTED\n  892  #    define PNG_UNKNOWN_CHUNKS_SUPPORTED\n  893  #  endif\n  894: #  ifndef PNG_READ_USER_CHUNKS_SUPPORTED\n  895: #    define PNG_READ_USER_CHUNKS_SUPPORTED\n  896  #  endif\n  897  #endif\n  898: #ifndef PNG_NO_READ_USER_CHUNKS\n  899: #  ifndef PNG_READ_USER_CHUNKS_SUPPORTED\n  900: #    define PNG_READ_USER_CHUNKS_SUPPORTED\n  901  #  endif\n  902  #  ifndef PNG_USER_CHUNKS_SUPPORTED\n  ...\n 1062  #endif /* PNG_WRITE_SUPPORTED */\n 1063  \n 1064: /* Turn this off to disable png_read_png() and\n 1065   * png_write_png() and leave the row_pointers member\n 1066   * out of the info structure.\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngerror.c:\n   19  #define PNG_NO_PEDANTIC_WARNINGS\n   20  #include \"png.h\"\n   21: #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)\n   22  #include \"pngpriv.h\"\n   23  \n   ..\n  187  }\n  188  \n  189: #ifdef PNG_READ_SUPPORTED\n  190  void PNGAPI\n  191  png_chunk_error(png_structp png_ptr, png_const_charp error_message)\n  ...\n  200     }\n  201  }\n  202: #endif /* PNG_READ_SUPPORTED */\n  203  #endif /* PNG_WARNINGS_SUPPORTED || PNG_ERROR_TEXT_SUPPORTED */\n  204  \n  ...\n  218  #endif /* PNG_WARNINGS_SUPPORTED */\n  219  \n  220: #ifdef PNG_READ_SUPPORTED\n  221  #ifdef PNG_BENIGN_ERRORS_SUPPORTED\n  222  void PNGAPI\n  ...\n  229  }\n  230  #endif\n  231: #endif /* PNG_READ_SUPPORTED */\n  232  \n  233  #ifdef PNG_SETJMP_SUPPORTED\n  ...\n  378  /* This function returns a pointer to the error_ptr associated with the user\n  379   * functions.  The application should free any memory associated with this\n  380:  * pointer before png_write_destroy and png_read_destroy are called.\n  381   */\n  382  png_voidp PNGAPI\n  ...\n  400  }\n  401  #endif\n  402: #endif /* PNG_READ_SUPPORTED || PNG_WRITE_SUPPORTED */\n  403  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngget.c:\n   15  #define PNG_NO_PEDANTIC_WARNINGS\n   16  #include \"png.h\"\n   17: #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)\n   18  #include \"pngpriv.h\"\n   19  \n   ..\n  857  #endif\n  858  \n  859: #ifdef PNG_READ_RGB_TO_GRAY_SUPPORTED\n  860  png_byte PNGAPI\n  861  png_get_rgb_to_gray_status (png_structp png_ptr)\n  ...\n  923  #endif /* ?PNG_IO_STATE_SUPPORTED */\n  924  \n  925: #endif /* PNG_READ_SUPPORTED || PNG_WRITE_SUPPORTED */\n  926  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngmem.c:\n   14   * need special memory handling are expected to supply replacement\n   15   * functions for png_malloc() and png_free(), and to use\n   16:  * png_create_read_struct_2() and png_create_write_struct_2() to\n   17   * identify the replacement functions.\n   18   */\n   ..\n   20  #define PNG_NO_PEDANTIC_WARNINGS\n   21  #include \"png.h\"\n   22: #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)\n   23  #include \"pngpriv.h\"\n   24  \n   ..\n  599  /* This function returns a pointer to the mem_ptr associated with the user\n  600   * functions.  The application should free any memory associated with this\n  601:  * pointer before png_write_destroy and png_read_destroy are called.\n  602   */\n  603  png_voidp PNGAPI\n  ...\n  609  }\n  610  #endif /* PNG_USER_MEM_SUPPORTED */\n  611: #endif /* PNG_READ_SUPPORTED || PNG_WRITE_SUPPORTED */\n  612  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngpread.c:\n    1  \n    2: /* pngpread.c - read a png file in push mode\n    3   *\n    4   * Last changed in libpng 1.4.1 [February 25, 2010]\n    .\n   14  #define PNG_NO_PEDANTIC_WARNINGS\n   15  #include \"png.h\"\n   16: #ifdef PNG_PROGRESSIVE_READ_SUPPORTED\n   17  #include \"pngpriv.h\"\n   18  \n   19  /* Push model modes */\n   20: #define PNG_READ_SIG_MODE   0\n   21: #define PNG_READ_CHUNK_MODE 1\n   22: #define PNG_READ_IDAT_MODE  2\n   23  #define PNG_SKIP_MODE       3\n   24: #define PNG_READ_tEXt_MODE  4\n   25: #define PNG_READ_zTXt_MODE  5\n   26: #define PNG_READ_DONE_MODE  6\n   27: #define PNG_READ_iTXt_MODE  7\n   28  #define PNG_ERROR_MODE      8\n   29  \n   ..\n   54     switch (png_ptr->process_mode)\n   55     {\n   56:       case PNG_READ_SIG_MODE:\n   57        {\n   58:          png_push_read_sig(png_ptr, info_ptr);\n   59           break;\n   60        }\n   61  \n   62:       case PNG_READ_CHUNK_MODE:\n   63        {\n   64:          png_push_read_chunk(png_ptr, info_ptr);\n   65           break;\n   66        }\n   67  \n   68:       case PNG_READ_IDAT_MODE:\n   69        {\n   70:          png_push_read_IDAT(png_ptr);\n   71           break;\n   72        }\n   73  \n   74: #ifdef PNG_READ_tEXt_SUPPORTED\n   75:       case PNG_READ_tEXt_MODE:\n   76        {\n   77:          png_push_read_tEXt(png_ptr, info_ptr);\n   78           break;\n   79        }\n   80  \n   81  #endif\n   82: #ifdef PNG_READ_zTXt_SUPPORTED\n   83:       case PNG_READ_zTXt_MODE:\n   84        {\n   85:          png_push_read_zTXt(png_ptr, info_ptr);\n   86           break;\n   87        }\n   88  \n   89  #endif\n   90: #ifdef PNG_READ_iTXt_SUPPORTED\n   91:       case PNG_READ_iTXt_MODE:\n   92        {\n   93:          png_push_read_iTXt(png_ptr, info_ptr);\n   94           break;\n   95        }\n   ..\n  110  }\n  111  \n  112: /* Read any remaining signature bytes from the stream and compare them with\n  113   * the correct PNG signature.  It is possible that this routine is called\n  114:  * with bytes already read from the signature, either because they have been\n  115   * checked by the calling application, or because of multiple calls to this\n  116   * routine.\n  117   */\n  118  void /* PRIVATE */\n  119: png_push_read_sig(png_structp png_ptr, png_infop info_ptr)\n  120  {\n  121     png_size_t num_checked = png_ptr->sig_bytes,\n  ...\n  143        if (png_ptr->sig_bytes >= 8)\n  144        {\n  145:          png_ptr->process_mode = PNG_READ_CHUNK_MODE;\n  146        }\n  147     }\n  ...\n  149  \n  150  void /* PRIVATE */\n  151: png_push_read_chunk(png_structp png_ptr, png_infop info_ptr)\n  152  {\n  153        PNG_IHDR;\n  ...\n  155        PNG_IEND;\n  156        PNG_PLTE;\n  157: #ifdef PNG_READ_bKGD_SUPPORTED\n  158        PNG_bKGD;\n  159  #endif\n  160: #ifdef PNG_READ_cHRM_SUPPORTED\n  161        PNG_cHRM;\n  162  #endif\n  163: #ifdef PNG_READ_gAMA_SUPPORTED\n  164        PNG_gAMA;\n  165  #endif\n  166: #ifdef PNG_READ_hIST_SUPPORTED\n  167        PNG_hIST;\n  168  #endif\n  169: #ifdef PNG_READ_iCCP_SUPPORTED\n  170        PNG_iCCP;\n  171  #endif\n  172: #ifdef PNG_READ_iTXt_SUPPORTED\n  173        PNG_iTXt;\n  174  #endif\n  175: #ifdef PNG_READ_oFFs_SUPPORTED\n  176        PNG_oFFs;\n  177  #endif\n  178: #ifdef PNG_READ_pCAL_SUPPORTED\n  179        PNG_pCAL;\n  180  #endif\n  181: #ifdef PNG_READ_pHYs_SUPPORTED\n  182        PNG_pHYs;\n  183  #endif\n  184: #ifdef PNG_READ_sBIT_SUPPORTED\n  185        PNG_sBIT;\n  186  #endif\n  187: #ifdef PNG_READ_sCAL_SUPPORTED\n  188        PNG_sCAL;\n  189  #endif\n  190: #ifdef PNG_READ_sRGB_SUPPORTED\n  191        PNG_sRGB;\n  192  #endif\n  193: #ifdef PNG_READ_sPLT_SUPPORTED\n  194        PNG_sPLT;\n  195  #endif\n  196: #ifdef PNG_READ_tEXt_SUPPORTED\n  197        PNG_tEXt;\n  198  #endif\n  199: #ifdef PNG_READ_tIME_SUPPORTED\n  200        PNG_tIME;\n  201  #endif\n  202: #ifdef PNG_READ_tRNS_SUPPORTED\n  203        PNG_tRNS;\n  204  #endif\n  205: #ifdef PNG_READ_zTXt_SUPPORTED\n  206        PNG_zTXt;\n  207  #endif\n  ...\n  226        png_ptr->push_length = png_get_uint_31(png_ptr, chunk_length);\n  227        png_reset_crc(png_ptr);\n  228:       png_crc_read(png_ptr, png_ptr->chunk_name, 4);\n  229        png_check_chunk_name(png_ptr, png_ptr->chunk_name);\n  230        png_ptr->mode |= PNG_HAVE_CHUNK_HEADER;\n  ...\n  259        png_handle_IEND(png_ptr, info_ptr, png_ptr->push_length);\n  260  \n  261:       png_ptr->process_mode = PNG_READ_DONE_MODE;\n  262        png_push_have_end(png_ptr, info_ptr);\n  263     }\n  ...\n  304     else if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))\n  305     {\n  306:       /* If we reach an IDAT chunk, this means we have read all of the\n  307:        * header chunks, and we can start reading the image (or if this\n  308:        * is called after the image has been read - we have an error).\n  309         */\n  310  \n  ...\n  328        png_ptr->idat_size = png_ptr->push_length;\n  329        png_ptr->mode |= PNG_HAVE_IDAT;\n  330:       png_ptr->process_mode = PNG_READ_IDAT_MODE;\n  331        png_push_have_info(png_ptr, info_ptr);\n  332        png_ptr->zstream.avail_out =\n  ...\n  337     }\n  338  \n  339: #ifdef PNG_READ_gAMA_SUPPORTED\n  340     else if (!png_memcmp(png_ptr->chunk_name, png_gAMA, 4))\n  341     {\n  ...\n  350  \n  351  #endif\n  352: #ifdef PNG_READ_sBIT_SUPPORTED\n  353     else if (!png_memcmp(png_ptr->chunk_name, png_sBIT, 4))\n  354     {\n  ...\n  363  \n  364  #endif\n  365: #ifdef PNG_READ_cHRM_SUPPORTED\n  366     else if (!png_memcmp(png_ptr->chunk_name, png_cHRM, 4))\n  367     {\n  ...\n  376  \n  377  #endif\n  378: #ifdef PNG_READ_sRGB_SUPPORTED\n  379     else if (!png_memcmp(png_ptr->chunk_name, png_sRGB, 4))\n  380     {\n  ...\n  389  \n  390  #endif\n  391: #ifdef PNG_READ_iCCP_SUPPORTED\n  392     else if (!png_memcmp(png_ptr->chunk_name, png_iCCP, 4))\n  393     {\n  ...\n  402  \n  403  #endif\n  404: #ifdef PNG_READ_sPLT_SUPPORTED\n  405     else if (!png_memcmp(png_ptr->chunk_name, png_sPLT, 4))\n  406     {\n  ...\n  415  \n  416  #endif\n  417: #ifdef PNG_READ_tRNS_SUPPORTED\n  418     else if (!png_memcmp(png_ptr->chunk_name, png_tRNS, 4))\n  419     {\n  ...\n  428  \n  429  #endif\n  430: #ifdef PNG_READ_bKGD_SUPPORTED\n  431     else if (!png_memcmp(png_ptr->chunk_name, png_bKGD, 4))\n  432     {\n  ...\n  441  \n  442  #endif\n  443: #ifdef PNG_READ_hIST_SUPPORTED\n  444     else if (!png_memcmp(png_ptr->chunk_name, png_hIST, 4))\n  445     {\n  ...\n  454  \n  455  #endif\n  456: #ifdef PNG_READ_pHYs_SUPPORTED\n  457     else if (!png_memcmp(png_ptr->chunk_name, png_pHYs, 4))\n  458     {\n  ...\n  467  \n  468  #endif\n  469: #ifdef PNG_READ_oFFs_SUPPORTED\n  470     else if (!png_memcmp(png_ptr->chunk_name, png_oFFs, 4))\n  471     {\n  ...\n  480  #endif\n  481  \n  482: #ifdef PNG_READ_pCAL_SUPPORTED\n  483     else if (!png_memcmp(png_ptr->chunk_name, png_pCAL, 4))\n  484     {\n  ...\n  493  \n  494  #endif\n  495: #ifdef PNG_READ_sCAL_SUPPORTED\n  496     else if (!png_memcmp(png_ptr->chunk_name, png_sCAL, 4))\n  497     {\n  ...\n  506  \n  507  #endif\n  508: #ifdef PNG_READ_tIME_SUPPORTED\n  509     else if (!png_memcmp(png_ptr->chunk_name, png_tIME, 4))\n  510     {\n  ...\n  519  \n  520  #endif\n  521: #ifdef PNG_READ_tEXt_SUPPORTED\n  522     else if (!png_memcmp(png_ptr->chunk_name, png_tEXt, 4))\n  523     {\n  ...\n  532  \n  533  #endif\n  534: #ifdef PNG_READ_zTXt_SUPPORTED\n  535     else if (!png_memcmp(png_ptr->chunk_name, png_zTXt, 4))\n  536     {\n  ...\n  545  \n  546  #endif\n  547: #ifdef PNG_READ_iTXt_SUPPORTED\n  548     else if (!png_memcmp(png_ptr->chunk_name, png_iTXt, 4))\n  549     {\n  ...\n  622  \n  623        png_crc_finish(png_ptr, 0);\n  624:       png_ptr->process_mode = PNG_READ_CHUNK_MODE;\n  625     }\n  626  }\n  ...\n  734  \n  735  void /* PRIVATE */\n  736: png_push_read_IDAT(png_structp png_ptr)\n  737  {\n  738     PNG_IDAT;\n  ...\n  750        png_ptr->push_length = png_get_uint_31(png_ptr, chunk_length);\n  751        png_reset_crc(png_ptr);\n  752:       png_crc_read(png_ptr, png_ptr->chunk_name, 4);\n  753        png_ptr->mode |= PNG_HAVE_CHUNK_HEADER;\n  754  \n  755        if (png_memcmp(png_ptr->chunk_name, png_IDAT, 4))\n  756        {\n  757:          png_ptr->process_mode = PNG_READ_CHUNK_MODE;\n  758           if (!(png_ptr->flags & PNG_FLAG_ZLIB_FINISHED))\n  759              png_error(png_ptr, \"Not enough compressed data\");\n  ...\n  773           /* Check for overflow */\n  774           if ((png_uint_32)save_size != png_ptr->idat_size)\n  775:             png_error(png_ptr, \"save_size overflowed in pngpread\");\n  776        }\n  777        else\n  ...\n  798           /* Check for overflow */\n  799           if ((png_uint_32)save_size != png_ptr->idat_size)\n  800:             png_error(png_ptr, \"save_size overflowed in pngpread\");\n  801        }\n  802        else\n  ...\n  865        {\n  866           if ((\n  867: #ifdef PNG_READ_INTERLACING_SUPPORTED\n  868               png_ptr->interlaced && png_ptr->pass > 6) ||\n  869               (!png_ptr->interlaced &&\n  ...\n  900         png_ptr->row_info.width);\n  901  \n  902:    png_read_filter_row(png_ptr, &(png_ptr->row_info),\n  903        png_ptr->row_buf + 1, png_ptr->prev_row + 1,\n  904        (int)(png_ptr->row_buf[0]));\n  ...\n  907  \n  908     if (png_ptr->transformations || (png_ptr->flags&PNG_FLAG_STRIP_ALPHA))\n  909:       png_do_read_transformations(png_ptr);\n  910  \n  911: #ifdef PNG_READ_INTERLACING_SUPPORTED\n  912     /* Blow up interlaced rows to full size */\n  913     if (png_ptr->interlaced && (png_ptr->transformations & PNG_INTERLACE))\n  ...\n  915        if (png_ptr->pass < 6)\n  916  /*       old interface (pre-1.0.9):\n  917:          png_do_read_interlace(&(png_ptr->row_info),\n  918              png_ptr->row_buf + 1, png_ptr->pass, png_ptr->transformations);\n  919   */\n  920:          png_do_read_interlace(png_ptr);\n  921  \n  922      switch (png_ptr->pass)\n  ...\n  928              {\n  929                 png_push_have_row(png_ptr, png_ptr->row_buf + 1);\n  930:                png_read_push_finish_row(png_ptr); /* Updates png_ptr->pass */\n  931              }\n  932  \n  ...\n  936                 {\n  937                    png_push_have_row(png_ptr, NULL);\n  938:                   png_read_push_finish_row(png_ptr);\n  939                 }\n  940              }\n  ...\n  945                 {\n  946                    png_push_have_row(png_ptr, NULL);\n  947:                   png_read_push_finish_row(png_ptr);\n  948                 }\n  949              }\n  ...\n  952              {\n  953                  png_push_have_row(png_ptr, NULL);\n  954:                 png_read_push_finish_row(png_ptr);\n  955              }\n  956  \n  ...\n  964              {\n  965                 png_push_have_row(png_ptr, png_ptr->row_buf + 1);\n  966:                png_read_push_finish_row(png_ptr);\n  967              }\n  968  \n  ...\n  972                 {\n  973                    png_push_have_row(png_ptr, NULL);\n  974:                   png_read_push_finish_row(png_ptr);\n  975                 }\n  976              }\n  ...\n  986              {\n  987                 png_push_have_row(png_ptr, png_ptr->row_buf + 1);\n  988:                png_read_push_finish_row(png_ptr);\n  989              }\n  990  \n  ...\n  992              {\n  993                 png_push_have_row(png_ptr, NULL);\n  994:                png_read_push_finish_row(png_ptr);\n  995              }\n  996  \n  ...\n 1000                 {\n 1001                    png_push_have_row(png_ptr, NULL);\n 1002:                   png_read_push_finish_row(png_ptr);\n 1003                 }\n 1004              }\n ....\n 1014              {\n 1015                 png_push_have_row(png_ptr, png_ptr->row_buf + 1);\n 1016:                png_read_push_finish_row(png_ptr);\n 1017              }\n 1018  \n ....\n 1022                 {\n 1023                    png_push_have_row(png_ptr, NULL);\n 1024:                   png_read_push_finish_row(png_ptr);\n 1025                 }\n 1026              }\n ....\n 1036              {\n 1037                 png_push_have_row(png_ptr, png_ptr->row_buf + 1);\n 1038:                png_read_push_finish_row(png_ptr);\n 1039              }\n 1040  \n ....\n 1042              {\n 1043                 png_push_have_row(png_ptr, NULL);\n 1044:                png_read_push_finish_row(png_ptr);\n 1045              }\n 1046  \n ....\n 1048              {\n 1049                 png_push_have_row(png_ptr, NULL);\n 1050:                png_read_push_finish_row(png_ptr);\n 1051              }\n 1052  \n ....\n 1061              {\n 1062                 png_push_have_row(png_ptr, png_ptr->row_buf + 1);\n 1063:                png_read_push_finish_row(png_ptr);\n 1064              }\n 1065  \n ....\n 1067              {\n 1068                 png_push_have_row(png_ptr, NULL);\n 1069:                png_read_push_finish_row(png_ptr);\n 1070              }\n 1071  \n ....\n 1075           {\n 1076              png_push_have_row(png_ptr, png_ptr->row_buf + 1);\n 1077:             png_read_push_finish_row(png_ptr);\n 1078  \n 1079              if (png_ptr->pass != 6)\n ....\n 1081  \n 1082              png_push_have_row(png_ptr, NULL);\n 1083:             png_read_push_finish_row(png_ptr);\n 1084           }\n 1085        }\n ....\n 1089     {\n 1090        png_push_have_row(png_ptr, png_ptr->row_buf + 1);\n 1091:       png_read_push_finish_row(png_ptr);\n 1092     }\n 1093  }\n 1094  \n 1095  void /* PRIVATE */\n 1096: png_read_push_finish_row(png_structp png_ptr)\n 1097  {\n 1098     /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */\n ....\n 1119        return;\n 1120  \n 1121: #ifdef PNG_READ_INTERLACING_SUPPORTED\n 1122     if (png_ptr->interlaced)\n 1123     {\n ....\n 1154        } while (png_ptr->iwidth == 0 || png_ptr->num_rows == 0);\n 1155     }\n 1156: #endif /* PNG_READ_INTERLACING_SUPPORTED */\n 1157  }\n 1158  \n 1159: #ifdef PNG_READ_tEXt_SUPPORTED\n 1160  void /* PRIVATE */\n 1161  png_push_handle_tEXt(png_structp png_ptr, png_infop info_ptr, png_uint_32\n ....\n 1185     png_ptr->current_text_size = (png_size_t)length;\n 1186     png_ptr->current_text_left = (png_size_t)length;\n 1187:    png_ptr->process_mode = PNG_READ_tEXt_MODE;\n 1188  }\n 1189  \n 1190  void /* PRIVATE */\n 1191: png_push_read_tEXt(png_structp png_ptr, png_infop info_ptr)\n 1192  {\n 1193     if (png_ptr->buffer_size && png_ptr->current_text_left)\n ....\n 1201           text_size = png_ptr->current_text_left;\n 1202  \n 1203:       png_crc_read(png_ptr, (png_bytep)png_ptr->current_text_ptr, text_size);\n 1204        png_ptr->current_text_left -= text_size;\n 1205        png_ptr->current_text_ptr += text_size;\n ....\n 1255  #endif\n 1256  \n 1257: #ifdef PNG_READ_zTXt_SUPPORTED\n 1258  void /* PRIVATE */\n 1259  png_push_handle_zTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32\n ....\n 1285     png_ptr->current_text_size = (png_size_t)length;\n 1286     png_ptr->current_text_left = (png_size_t)length;\n 1287:    png_ptr->process_mode = PNG_READ_zTXt_MODE;\n 1288  }\n 1289  \n 1290  void /* PRIVATE */\n 1291: png_push_read_zTXt(png_structp png_ptr, png_infop info_ptr)\n 1292  {\n 1293     if (png_ptr->buffer_size && png_ptr->current_text_left)\n ....\n 1301           text_size = png_ptr->current_text_left;\n 1302  \n 1303:       png_crc_read(png_ptr, (png_bytep)png_ptr->current_text_ptr, text_size);\n 1304        png_ptr->current_text_left -= text_size;\n 1305        png_ptr->current_text_ptr += text_size;\n ....\n 1456  #endif\n 1457  \n 1458: #ifdef PNG_READ_iTXt_SUPPORTED\n 1459  void /* PRIVATE */\n 1460  png_push_handle_iTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32\n ....\n 1484     png_ptr->current_text_size = (png_size_t)length;\n 1485     png_ptr->current_text_left = (png_size_t)length;\n 1486:    png_ptr->process_mode = PNG_READ_iTXt_MODE;\n 1487  }\n 1488  \n 1489  void /* PRIVATE */\n 1490: png_push_read_iTXt(png_structp png_ptr, png_infop info_ptr)\n 1491  {\n 1492  \n ....\n 1501           text_size = png_ptr->current_text_left;\n 1502  \n 1503:       png_crc_read(png_ptr, (png_bytep)png_ptr->current_text_ptr, text_size);\n 1504        png_ptr->current_text_left -= text_size;\n 1505        png_ptr->current_text_ptr += text_size;\n ....\n 1589     if (!(png_ptr->chunk_name[0] & 0x20))\n 1590     {\n 1591: #ifdef PNG_READ_UNKNOWN_CHUNKS_SUPPORTED\n 1592        if (png_handle_as_unknown(png_ptr, png_ptr->chunk_name) !=\n 1593           PNG_HANDLE_CHUNK_ALWAYS\n 1594: #ifdef PNG_READ_USER_CHUNKS_SUPPORTED\n 1595:          && png_ptr->read_user_chunk_fn == NULL\n 1596  #endif\n 1597           )\n ....\n 1602     }\n 1603  \n 1604: #ifdef PNG_READ_UNKNOWN_CHUNKS_SUPPORTED\n 1605     if (png_ptr->flags & PNG_FLAG_KEEP_UNKNOWN_CHUNKS)\n 1606     {\n ....\n 1628           png_ptr->unknown_chunk.data = (png_bytep)png_malloc(png_ptr,\n 1629              (png_size_t)length);\n 1630:          png_crc_read(png_ptr, (png_bytep)png_ptr->unknown_chunk.data, length);\n 1631        }\n 1632  \n 1633: #ifdef PNG_READ_USER_CHUNKS_SUPPORTED\n 1634:       if (png_ptr->read_user_chunk_fn != NULL)\n 1635        {\n 1636           /* Callback to user unknown chunk handler */\n 1637           int ret;\n 1638:          ret = (*(png_ptr->read_user_chunk_fn))\n 1639             (png_ptr, &png_ptr->unknown_chunk);\n 1640  \n ....\n 1703  \n 1704  void PNGAPI\n 1705: png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr,\n 1706     png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn,\n 1707     png_progressive_end_ptr end_fn)\n ....\n 1714     png_ptr->end_fn = end_fn;\n 1715  \n 1716:    png_set_read_fn(png_ptr, progressive_ptr, png_push_fill_buffer);\n 1717  }\n 1718  \n ....\n 1725     return png_ptr->io_ptr;\n 1726  }\n 1727: #endif /* PNG_PROGRESSIVE_READ_SUPPORTED */\n 1728  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngpriv.h:\n   44  #ifdef PNG_FLOATING_POINT_SUPPORTED\n   45  #  ifdef MACOS\n   46:      /* We need to check that <math.h> hasn't already been included earlier\n   47        * as it seems it doesn't agree with <fp.h>, yet we should really use\n   48        * <fp.h> if possible.\n   ..\n  269   * but not PNG_EXPORT.  PNGAPI added at libpng version 1.2.3. */\n  270  \n  271: PNG_EXTERN void PNGAPI png_default_read_data PNGARG((png_structp png_ptr,\n  272     png_bytep data, png_size_t length));\n  273  \n  274: #ifdef PNG_PROGRESSIVE_READ_SUPPORTED\n  275  PNG_EXTERN void PNGAPI png_push_fill_buffer PNGARG((png_structp png_ptr,\n  276     png_bytep buffer, png_size_t length));\n  ...\n  293     png_size_t length));\n  294  \n  295: /* Read the chunk header (length + type name) */\n  296: PNG_EXTERN png_uint_32 png_read_chunk_header PNGARG((png_structp png_ptr));\n  297  \n  298: /* Read data from whatever input you are using into the \"data\" buffer */\n  299: PNG_EXTERN void png_read_data PNGARG((png_structp png_ptr, png_bytep data,\n  300     png_size_t length));\n  301  \n  302: /* Read bytes into buf, and update png_ptr->crc */\n  303: PNG_EXTERN void png_crc_read PNGARG((png_structp png_ptr, png_bytep buf,\n  304     png_size_t length));\n  305  \n  ...\n  312  #endif\n  313  \n  314: /* Read \"skip\" bytes, read the file crc, and (optionally) verify png_ptr->crc */\n  315  PNG_EXTERN int png_crc_finish PNGARG((png_structp png_ptr, png_uint_32 skip));\n  316  \n  317: /* Read the CRC from the file and compare it to the libpng calculated CRC */\n  318  PNG_EXTERN int png_crc_error PNGARG((png_structp png_ptr));\n  319  \n  ...\n  475  PNG_EXTERN void png_write_start_row PNGARG((png_structp png_ptr));\n  476  \n  477: #ifdef PNG_READ_GAMMA_SUPPORTED\n  478  PNG_EXTERN void png_build_gamma_table PNGARG((png_structp png_ptr,\n  479     png_byte bit_depth));\n  ...\n  484     int mask));\n  485  \n  486: #ifdef PNG_READ_INTERLACING_SUPPORTED\n  487  /* Expand an interlaced row */\n  488  /* OLD pre-1.0.9 interface:\n  489: PNG_EXTERN void png_do_read_interlace PNGARG((png_row_infop row_info,\n  490     png_bytep row, int pass, png_uint_32 transformations));\n  491   */\n  492: PNG_EXTERN void png_do_read_interlace PNGARG((png_structp png_ptr));\n  493  #endif\n  494  \n  ...\n  502  \n  503  /* Unfilter a row */\n  504: PNG_EXTERN void png_read_filter_row PNGARG((png_structp png_ptr,\n  505     png_row_infop row_info, png_bytep row, png_bytep prev_row, int filter));\n  506  \n  ...\n  512  PNG_EXTERN void png_write_filtered_row PNGARG((png_structp png_ptr,\n  513     png_bytep filtered_row));\n  514: /* Finish a row while reading, dealing with interlacing passes, etc. */\n  515: PNG_EXTERN void png_read_finish_row PNGARG((png_structp png_ptr));\n  516  \n  517  /* Initialize the row buffers, etc. */\n  518: PNG_EXTERN void png_read_start_row PNGARG((png_structp png_ptr));\n  519  /* Optional call to update the users info structure */\n  520: PNG_EXTERN void png_read_transform_info PNGARG((png_structp png_ptr,\n  521     png_infop info_ptr));\n  522  \n  523  /* These are the functions that do the transformations */\n  524: #ifdef PNG_READ_FILLER_SUPPORTED\n  525: PNG_EXTERN void png_do_read_filler PNGARG((png_row_infop row_info,\n  526     png_bytep row, png_uint_32 filler, png_uint_32 flags));\n  527  #endif\n  528  \n  529: #ifdef PNG_READ_SWAP_ALPHA_SUPPORTED\n  530: PNG_EXTERN void png_do_read_swap_alpha PNGARG((png_row_infop row_info,\n  531     png_bytep row));\n  532  #endif\n  ...\n  537  #endif\n  538  \n  539: #ifdef PNG_READ_INVERT_ALPHA_SUPPORTED\n  540: PNG_EXTERN void png_do_read_invert_alpha PNGARG((png_row_infop row_info,\n  541     png_bytep row));\n  542  #endif\n  ...\n  548  \n  549  #if defined(PNG_WRITE_FILLER_SUPPORTED) || \\\n  550:     defined(PNG_READ_STRIP_ALPHA_SUPPORTED)\n  551  PNG_EXTERN void png_do_strip_filler PNGARG((png_row_infop row_info,\n  552     png_bytep row, png_uint_32 flags));\n  553  #endif\n  554  \n  555: #if defined(PNG_READ_SWAP_SUPPORTED) || defined(PNG_WRITE_SWAP_SUPPORTED)\n  556  PNG_EXTERN void png_do_swap PNGARG((png_row_infop row_info, png_bytep row));\n  557  #endif\n  558  \n  559: #if defined(PNG_READ_PACKSWAP_SUPPORTED) || \\\n  560      defined(PNG_WRITE_PACKSWAP_SUPPORTED)\n  561  PNG_EXTERN void png_do_packswap PNGARG((png_row_infop row_info, png_bytep row));\n  562  #endif\n  563  \n  564: #ifdef PNG_READ_RGB_TO_GRAY_SUPPORTED\n  565  PNG_EXTERN int png_do_rgb_to_gray PNGARG((png_structp png_ptr, png_row_infop\n  566     row_info, png_bytep row));\n  567  #endif\n  568  \n  569: #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED\n  570  PNG_EXTERN void png_do_gray_to_rgb PNGARG((png_row_infop row_info,\n  571     png_bytep row));\n  572  #endif\n  573  \n  574: #ifdef PNG_READ_PACK_SUPPORTED\n  575  PNG_EXTERN void png_do_unpack PNGARG((png_row_infop row_info, png_bytep row));\n  576  #endif\n  577  \n  578: #ifdef PNG_READ_SHIFT_SUPPORTED\n  579  PNG_EXTERN void png_do_unshift PNGARG((png_row_infop row_info, png_bytep row,\n  580     png_color_8p sig_bits));\n  581  #endif\n  582  \n  583: #if defined(PNG_READ_INVERT_SUPPORTED) || defined(PNG_WRITE_INVERT_SUPPORTED)\n  584  PNG_EXTERN void png_do_invert PNGARG((png_row_infop row_info, png_bytep row));\n  585  #endif\n  586  \n  587: #ifdef PNG_READ_16_TO_8_SUPPORTED\n  588  PNG_EXTERN void png_do_chop PNGARG((png_row_infop row_info, png_bytep row));\n  589  #endif\n  590  \n  591: #ifdef PNG_READ_DITHER_SUPPORTED\n  592  PNG_EXTERN void png_do_dither PNGARG((png_row_infop row_info,\n  593     png_bytep row, png_bytep palette_lookup, png_bytep dither_lookup));\n  ...\n  599  #endif\n  600  \n  601: #if defined(PNG_READ_BGR_SUPPORTED) || defined(PNG_WRITE_BGR_SUPPORTED)\n  602  PNG_EXTERN void png_do_bgr PNGARG((png_row_infop row_info, png_bytep row));\n  603  #endif\n  ...\n  613  #endif\n  614  \n  615: #ifdef PNG_READ_BACKGROUND_SUPPORTED\n  616: #ifdef PNG_READ_GAMMA_SUPPORTED\n  617  PNG_EXTERN void png_do_background PNGARG((png_row_infop row_info, png_bytep row,\n  618     png_color_16p trans_color, png_color_16p background,\n  ...\n  627  #endif\n  628  \n  629: #ifdef PNG_READ_GAMMA_SUPPORTED\n  630  PNG_EXTERN void png_do_gamma PNGARG((png_row_infop row_info, png_bytep row,\n  631     png_bytep gamma_table, png_uint_16pp gamma_16_table,\n  ...\n  633  #endif\n  634  \n  635: #ifdef PNG_READ_EXPAND_SUPPORTED\n  636  PNG_EXTERN void png_do_expand_palette PNGARG((png_row_infop row_info,\n  637     png_bytep row, png_colorp palette, png_bytep trans, int num_trans));\n  ...\n  652     png_uint_32 length));\n  653  \n  654: #ifdef PNG_READ_bKGD_SUPPORTED\n  655  PNG_EXTERN void png_handle_bKGD PNGARG((png_structp png_ptr, png_infop info_ptr,\n  656     png_uint_32 length));\n  657  #endif\n  658  \n  659: #ifdef PNG_READ_cHRM_SUPPORTED\n  660  PNG_EXTERN void png_handle_cHRM PNGARG((png_structp png_ptr, png_infop info_ptr,\n  661     png_uint_32 length));\n  662  #endif\n  663  \n  664: #ifdef PNG_READ_gAMA_SUPPORTED\n  665  PNG_EXTERN void png_handle_gAMA PNGARG((png_structp png_ptr, png_infop info_ptr,\n  666     png_uint_32 length));\n  667  #endif\n  668  \n  669: #ifdef PNG_READ_hIST_SUPPORTED\n  670  PNG_EXTERN void png_handle_hIST PNGARG((png_structp png_ptr, png_infop info_ptr,\n  671     png_uint_32 length));\n  672  #endif\n  673  \n  674: #ifdef PNG_READ_iCCP_SUPPORTED\n  675  extern void png_handle_iCCP PNGARG((png_structp png_ptr, png_infop info_ptr,\n  676     png_uint_32 length));\n  677: #endif /* PNG_READ_iCCP_SUPPORTED */\n  678  \n  679: #ifdef PNG_READ_iTXt_SUPPORTED\n  680  PNG_EXTERN void png_handle_iTXt PNGARG((png_structp png_ptr, png_infop info_ptr,\n  681     png_uint_32 length));\n  682  #endif\n  683  \n  684: #ifdef PNG_READ_oFFs_SUPPORTED\n  685  PNG_EXTERN void png_handle_oFFs PNGARG((png_structp png_ptr, png_infop info_ptr,\n  686     png_uint_32 length));\n  687  #endif\n  688  \n  689: #ifdef PNG_READ_pCAL_SUPPORTED\n  690  PNG_EXTERN void png_handle_pCAL PNGARG((png_structp png_ptr, png_infop info_ptr,\n  691     png_uint_32 length));\n  692  #endif\n  693  \n  694: #ifdef PNG_READ_pHYs_SUPPORTED\n  695  PNG_EXTERN void png_handle_pHYs PNGARG((png_structp png_ptr, png_infop info_ptr,\n  696     png_uint_32 length));\n  697  #endif\n  698  \n  699: #ifdef PNG_READ_sBIT_SUPPORTED\n  700  PNG_EXTERN void png_handle_sBIT PNGARG((png_structp png_ptr, png_infop info_ptr,\n  701     png_uint_32 length));\n  702  #endif\n  703  \n  704: #ifdef PNG_READ_sCAL_SUPPORTED\n  705  PNG_EXTERN void png_handle_sCAL PNGARG((png_structp png_ptr, png_infop info_ptr,\n  706     png_uint_32 length));\n  707  #endif\n  708  \n  709: #ifdef PNG_READ_sPLT_SUPPORTED\n  710  extern void png_handle_sPLT PNGARG((png_structp png_ptr, png_infop info_ptr,\n  711     png_uint_32 length));\n  712: #endif /* PNG_READ_sPLT_SUPPORTED */\n  713  \n  714: #ifdef PNG_READ_sRGB_SUPPORTED\n  715  PNG_EXTERN void png_handle_sRGB PNGARG((png_structp png_ptr, png_infop info_ptr,\n  716     png_uint_32 length));\n  717  #endif\n  718  \n  719: #ifdef PNG_READ_tEXt_SUPPORTED\n  720  PNG_EXTERN void png_handle_tEXt PNGARG((png_structp png_ptr, png_infop info_ptr,\n  721     png_uint_32 length));\n  722  #endif\n  723  \n  724: #ifdef PNG_READ_tIME_SUPPORTED\n  725  PNG_EXTERN void png_handle_tIME PNGARG((png_structp png_ptr, png_infop info_ptr,\n  726     png_uint_32 length));\n  727  #endif\n  728  \n  729: #ifdef PNG_READ_tRNS_SUPPORTED\n  730  PNG_EXTERN void png_handle_tRNS PNGARG((png_structp png_ptr, png_infop info_ptr,\n  731     png_uint_32 length));\n  732  #endif\n  733  \n  734: #ifdef PNG_READ_zTXt_SUPPORTED\n  735  PNG_EXTERN void png_handle_zTXt PNGARG((png_structp png_ptr, png_infop info_ptr,\n  736     png_uint_32 length));\n  ...\n  743     png_bytep chunk_name));\n  744  \n  745: /* Handle the transformations for reading and writing */\n  746: PNG_EXTERN void png_do_read_transformations PNGARG((png_structp png_ptr));\n  747  PNG_EXTERN void png_do_write_transformations PNGARG((png_structp png_ptr));\n  748  \n  749: PNG_EXTERN void png_init_read_transformations PNGARG((png_structp png_ptr));\n  750  \n  751: #ifdef PNG_PROGRESSIVE_READ_SUPPORTED\n  752: PNG_EXTERN void png_push_read_chunk PNGARG((png_structp png_ptr,\n  753     png_infop info_ptr));\n  754: PNG_EXTERN void png_push_read_sig PNGARG((png_structp png_ptr,\n  755     png_infop info_ptr));\n  756  PNG_EXTERN void png_push_check_crc PNGARG((png_structp png_ptr));\n  ...\n  761  PNG_EXTERN void png_push_restore_buffer PNGARG((png_structp png_ptr,\n  762     png_bytep buffer, png_size_t buffer_length));\n  763: PNG_EXTERN void png_push_read_IDAT PNGARG((png_structp png_ptr));\n  764  PNG_EXTERN void png_process_IDAT_data PNGARG((png_structp png_ptr,\n  765     png_bytep buffer, png_size_t buffer_length));\n  ...\n  772     png_infop info_ptr));\n  773  PNG_EXTERN void png_push_have_row PNGARG((png_structp png_ptr, png_bytep row));\n  774: PNG_EXTERN void png_push_read_end PNGARG((png_structp png_ptr,\n  775     png_infop info_ptr));\n  776  PNG_EXTERN void png_process_some_data PNGARG((png_structp png_ptr,\n  777     png_infop info_ptr));\n  778: PNG_EXTERN void png_read_push_finish_row PNGARG((png_structp png_ptr));\n  779: #ifdef PNG_READ_tEXt_SUPPORTED\n  780  PNG_EXTERN void png_push_handle_tEXt PNGARG((png_structp png_ptr,\n  781     png_infop info_ptr, png_uint_32 length));\n  782: PNG_EXTERN void png_push_read_tEXt PNGARG((png_structp png_ptr,\n  783     png_infop info_ptr));\n  784  #endif\n  785: #ifdef PNG_READ_zTXt_SUPPORTED\n  786  PNG_EXTERN void png_push_handle_zTXt PNGARG((png_structp png_ptr,\n  787     png_infop info_ptr, png_uint_32 length));\n  788: PNG_EXTERN void png_push_read_zTXt PNGARG((png_structp png_ptr,\n  789     png_infop info_ptr));\n  790  #endif\n  791: #ifdef PNG_READ_iTXt_SUPPORTED\n  792  PNG_EXTERN void png_push_handle_iTXt PNGARG((png_structp png_ptr,\n  793     png_infop info_ptr, png_uint_32 length));\n  794: PNG_EXTERN void png_push_read_iTXt PNGARG((png_structp png_ptr,\n  795     png_infop info_ptr));\n  796  #endif\n  797  \n  798: #endif /* PNG_PROGRESSIVE_READ_SUPPORTED */\n  799  \n  800  #ifdef PNG_MNG_FEATURES_SUPPORTED\n  801: PNG_EXTERN void png_do_read_intrapixel PNGARG((png_row_infop row_info,\n  802     png_bytep row));\n  803  PNG_EXTERN void png_do_write_intrapixel PNGARG((png_row_infop row_info,\n  ...\n  828     int filter_type));\n  829  \n  830: /* Free all memory used by the read (old method - NOT DLL EXPORTED) */\n  831: extern void png_read_destroy PNGARG((png_structp png_ptr, png_infop info_ptr,\n  832     png_infop end_info_ptr));\n  833  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngread.c:\n    1  \n    2: /* pngread.c - read a PNG file\n    3   *\n    4   * Last changed in libpng 1.4.1 [February 25, 2010]\n    .\n   12   *\n   13   * This file contains routines that an application calls directly to\n   14:  * read a PNG file or stream.\n   15   */\n   16  \n   17  #define PNG_NO_PEDANTIC_WARNINGS\n   18  #include \"png.h\"\n   19: #ifdef PNG_READ_SUPPORTED\n   20  #include \"pngpriv.h\"\n   21  \n   22  \n   23: /* Create a PNG structure for reading, and allocate any memory needed. */\n   24  png_structp PNGAPI\n   25: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr,\n   26     png_error_ptr error_fn, png_error_ptr warn_fn)\n   27  {\n   28  \n   29  #ifdef PNG_USER_MEM_SUPPORTED\n   30:    return (png_create_read_struct_2(user_png_ver, error_ptr, error_fn,\n   31        warn_fn, NULL, NULL, NULL));\n   32  }\n   33  \n   34: /* Alternate create PNG structure for reading, and allocate any memory\n   35   * needed.\n   36   */\n   37  png_structp PNGAPI\n   38: png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,\n   39     png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,\n   40     png_malloc_ptr malloc_fn, png_free_ptr free_fn)\n   ..\n   56     int i;\n   57  \n   58:    png_debug(1, \"in png_create_read_struct\");\n   59  \n   60  #ifdef PNG_USER_MEM_SUPPORTED\n   ..\n  195     png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;\n  196  \n  197:    png_set_read_fn(png_ptr, NULL, NULL);\n  198  \n  199  \n  ...\n  202  \n  203  \n  204: #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n  205: /* Read the information before the actual image data.  This has been\n  206:  * changed in v0.90 to allow reading a file that already has the magic\n  207:  * bytes read from the stream.  You can tell libpng how many bytes have\n  208:  * been read from the beginning of the stream (up to the maximum of 8)\n  209   * via png_set_sig_bytes(), and we will only check the remaining bytes\n  210   * here.  The application can then have access to the signature bytes we\n  211:  * read if it is determined that this isn't a valid PNG file.\n  212   */\n  213  void PNGAPI\n  214: png_read_info(png_structp png_ptr, png_infop info_ptr)\n  215  {\n  216:    png_debug(1, \"in png_read_info\");\n  217   \n  218     if (png_ptr == NULL || info_ptr == NULL)\n  ...\n  226  \n  227  #ifdef PNG_IO_STATE_SUPPORTED\n  228:       png_ptr->io_state = PNG_IO_READING | PNG_IO_SIGNATURE;\n  229  #endif\n  230  \n  231:       png_read_data(png_ptr, &(info_ptr->signature[num_checked]), num_to_check);\n  232        png_ptr->sig_bytes = 8;\n  233  \n  ...\n  250        PNG_IEND;\n  251        PNG_PLTE;\n  252: #ifdef PNG_READ_bKGD_SUPPORTED\n  253        PNG_bKGD;\n  254  #endif\n  255: #ifdef PNG_READ_cHRM_SUPPORTED\n  256        PNG_cHRM;\n  257  #endif\n  258: #ifdef PNG_READ_gAMA_SUPPORTED\n  259        PNG_gAMA;\n  260  #endif\n  261: #ifdef PNG_READ_hIST_SUPPORTED\n  262        PNG_hIST;\n  263  #endif\n  264: #ifdef PNG_READ_iCCP_SUPPORTED\n  265        PNG_iCCP;\n  266  #endif\n  267: #ifdef PNG_READ_iTXt_SUPPORTED\n  268        PNG_iTXt;\n  269  #endif\n  270: #ifdef PNG_READ_oFFs_SUPPORTED\n  271        PNG_oFFs;\n  272  #endif\n  273: #ifdef PNG_READ_pCAL_SUPPORTED\n  274        PNG_pCAL;\n  275  #endif\n  276: #ifdef PNG_READ_pHYs_SUPPORTED\n  277        PNG_pHYs;\n  278  #endif\n  279: #ifdef PNG_READ_sBIT_SUPPORTED\n  280        PNG_sBIT;\n  281  #endif\n  282: #ifdef PNG_READ_sCAL_SUPPORTED\n  283        PNG_sCAL;\n  284  #endif\n  285: #ifdef PNG_READ_sPLT_SUPPORTED\n  286        PNG_sPLT;\n  287  #endif\n  288: #ifdef PNG_READ_sRGB_SUPPORTED\n  289        PNG_sRGB;\n  290  #endif\n  291: #ifdef PNG_READ_tEXt_SUPPORTED\n  292        PNG_tEXt;\n  293  #endif\n  294: #ifdef PNG_READ_tIME_SUPPORTED\n  295        PNG_tIME;\n  296  #endif\n  297: #ifdef PNG_READ_tRNS_SUPPORTED\n  298        PNG_tRNS;\n  299  #endif\n  300: #ifdef PNG_READ_zTXt_SUPPORTED\n  301        PNG_zTXt;\n  302  #endif\n  303:       png_uint_32 length = png_read_chunk_header(png_ptr);\n  304        PNG_CONST png_bytep chunk_name = png_ptr->chunk_name;\n  305  \n  ...\n  348           break;\n  349        }\n  350: #ifdef PNG_READ_bKGD_SUPPORTED\n  351        else if (!png_memcmp(chunk_name, png_bKGD, 4))\n  352           png_handle_bKGD(png_ptr, info_ptr, length);\n  353  #endif\n  354: #ifdef PNG_READ_cHRM_SUPPORTED\n  355        else if (!png_memcmp(chunk_name, png_cHRM, 4))\n  356           png_handle_cHRM(png_ptr, info_ptr, length);\n  357  #endif\n  358: #ifdef PNG_READ_gAMA_SUPPORTED\n  359        else if (!png_memcmp(chunk_name, png_gAMA, 4))\n  360           png_handle_gAMA(png_ptr, info_ptr, length);\n  361  #endif\n  362: #ifdef PNG_READ_hIST_SUPPORTED\n  363        else if (!png_memcmp(chunk_name, png_hIST, 4))\n  364           png_handle_hIST(png_ptr, info_ptr, length);\n  365  #endif\n  366: #ifdef PNG_READ_oFFs_SUPPORTED\n  367        else if (!png_memcmp(chunk_name, png_oFFs, 4))\n  368           png_handle_oFFs(png_ptr, info_ptr, length);\n  369  #endif\n  370: #ifdef PNG_READ_pCAL_SUPPORTED\n  371        else if (!png_memcmp(chunk_name, png_pCAL, 4))\n  372           png_handle_pCAL(png_ptr, info_ptr, length);\n  373  #endif\n  374: #ifdef PNG_READ_sCAL_SUPPORTED\n  375        else if (!png_memcmp(chunk_name, png_sCAL, 4))\n  376           png_handle_sCAL(png_ptr, info_ptr, length);\n  377  #endif\n  378: #ifdef PNG_READ_pHYs_SUPPORTED\n  379        else if (!png_memcmp(chunk_name, png_pHYs, 4))\n  380           png_handle_pHYs(png_ptr, info_ptr, length);\n  381  #endif\n  382: #ifdef PNG_READ_sBIT_SUPPORTED\n  383        else if (!png_memcmp(chunk_name, png_sBIT, 4))\n  384           png_handle_sBIT(png_ptr, info_ptr, length);\n  385  #endif\n  386: #ifdef PNG_READ_sRGB_SUPPORTED\n  387        else if (!png_memcmp(chunk_name, png_sRGB, 4))\n  388           png_handle_sRGB(png_ptr, info_ptr, length);\n  389  #endif\n  390: #ifdef PNG_READ_iCCP_SUPPORTED\n  391        else if (!png_memcmp(chunk_name, png_iCCP, 4))\n  392           png_handle_iCCP(png_ptr, info_ptr, length);\n  393  #endif\n  394: #ifdef PNG_READ_sPLT_SUPPORTED\n  395        else if (!png_memcmp(chunk_name, png_sPLT, 4))\n  396           png_handle_sPLT(png_ptr, info_ptr, length);\n  397  #endif\n  398: #ifdef PNG_READ_tEXt_SUPPORTED\n  399        else if (!png_memcmp(chunk_name, png_tEXt, 4))\n  400           png_handle_tEXt(png_ptr, info_ptr, length);\n  401  #endif\n  402: #ifdef PNG_READ_tIME_SUPPORTED\n  403        else if (!png_memcmp(chunk_name, png_tIME, 4))\n  404           png_handle_tIME(png_ptr, info_ptr, length);\n  405  #endif\n  406: #ifdef PNG_READ_tRNS_SUPPORTED\n  407        else if (!png_memcmp(chunk_name, png_tRNS, 4))\n  408           png_handle_tRNS(png_ptr, info_ptr, length);\n  409  #endif\n  410: #ifdef PNG_READ_zTXt_SUPPORTED\n  411        else if (!png_memcmp(chunk_name, png_zTXt, 4))\n  412           png_handle_zTXt(png_ptr, info_ptr, length);\n  413  #endif\n  414: #ifdef PNG_READ_iTXt_SUPPORTED\n  415        else if (!png_memcmp(chunk_name, png_iTXt, 4))\n  416           png_handle_iTXt(png_ptr, info_ptr, length);\n  ...\n  420     }\n  421  }\n  422: #endif /* PNG_SEQUENTIAL_READ_SUPPORTED */\n  423  \n  424  /* Optional call to update the users info_ptr structure */\n  425  void PNGAPI\n  426: png_read_update_info(png_structp png_ptr, png_infop info_ptr)\n  427  {\n  428:    png_debug(1, \"in png_read_update_info\");\n  429   \n  430     if (png_ptr == NULL)\n  431        return;\n  432     if (!(png_ptr->flags & PNG_FLAG_ROW_INIT))\n  433:       png_read_start_row(png_ptr);\n  434     else\n  435        png_warning(png_ptr,\n  436:       \"Ignoring extra png_read_update_info() call; row buffer not reallocated\");\n  437  \n  438:    png_read_transform_info(png_ptr, info_ptr);\n  439  }\n  440  \n  441: #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n  442  /* Initialize palette, background, etc, after transformations\n  443:  * are set, but before any reading takes place.  This allows\n  444   * the user to obtain a gamma-corrected palette, for example.\n  445   * If the user doesn't call this, we will do it ourselves.\n  446   */\n  447  void PNGAPI\n  448: png_start_read_image(png_structp png_ptr)\n  449  {\n  450:    png_debug(1, \"in png_start_read_image\");\n  451   \n  452     if (png_ptr == NULL)\n  453        return;\n  454     if (!(png_ptr->flags & PNG_FLAG_ROW_INIT))\n  455:       png_read_start_row(png_ptr);\n  456  }\n  457: #endif /* PNG_SEQUENTIAL_READ_SUPPORTED */\n  458  \n  459: #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n  460  void PNGAPI\n  461: png_read_row(png_structp png_ptr, png_bytep row, png_bytep dsp_row)\n  462  {\n  463     PNG_IDAT;\n  ...\n  470        return;\n  471   \n  472:    png_debug2(1, \"in png_read_row (row %lu, pass %d)\",\n  473        (unsigned long) png_ptr->row_number, png_ptr->pass);\n  474  \n  475     if (!(png_ptr->flags & PNG_FLAG_ROW_INIT))\n  476:       png_read_start_row(png_ptr);\n  477     if (png_ptr->row_number == 0 && png_ptr->pass == 0)\n  478     {\n  479     /* Check for transforms that have been set but were defined out */\n  480: #if defined(PNG_WRITE_INVERT_SUPPORTED) && !defined(PNG_READ_INVERT_SUPPORTED)\n  481     if (png_ptr->transformations & PNG_INVERT_MONO)\n  482:       png_warning(png_ptr, \"PNG_READ_INVERT_SUPPORTED is not defined\");\n  483  #endif\n  484: #if defined(PNG_WRITE_FILLER_SUPPORTED) && !defined(PNG_READ_FILLER_SUPPORTED)\n  485     if (png_ptr->transformations & PNG_FILLER)\n  486:       png_warning(png_ptr, \"PNG_READ_FILLER_SUPPORTED is not defined\");\n  487  #endif\n  488  #if defined(PNG_WRITE_PACKSWAP_SUPPORTED) && \\\n  489:     !defined(PNG_READ_PACKSWAP_SUPPORTED)\n  490     if (png_ptr->transformations & PNG_PACKSWAP)\n  491:       png_warning(png_ptr, \"PNG_READ_PACKSWAP_SUPPORTED is not defined\");\n  492  #endif\n  493: #if defined(PNG_WRITE_PACK_SUPPORTED) && !defined(PNG_READ_PACK_SUPPORTED)\n  494     if (png_ptr->transformations & PNG_PACK)\n  495:       png_warning(png_ptr, \"PNG_READ_PACK_SUPPORTED is not defined\");\n  496  #endif\n  497: #if defined(PNG_WRITE_SHIFT_SUPPORTED) && !defined(PNG_READ_SHIFT_SUPPORTED)\n  498     if (png_ptr->transformations & PNG_SHIFT)\n  499:       png_warning(png_ptr, \"PNG_READ_SHIFT_SUPPORTED is not defined\");\n  500  #endif\n  501: #if defined(PNG_WRITE_BGR_SUPPORTED) && !defined(PNG_READ_BGR_SUPPORTED)\n  502     if (png_ptr->transformations & PNG_BGR)\n  503:       png_warning(png_ptr, \"PNG_READ_BGR_SUPPORTED is not defined\");\n  504  #endif\n  505: #if defined(PNG_WRITE_SWAP_SUPPORTED) && !defined(PNG_READ_SWAP_SUPPORTED)\n  506     if (png_ptr->transformations & PNG_SWAP_BYTES)\n  507:       png_warning(png_ptr, \"PNG_READ_SWAP_SUPPORTED is not defined\");\n  508  #endif\n  509     }\n  510  \n  511: #ifdef PNG_READ_INTERLACING_SUPPORTED\n  512     /* If interlaced and we do not need a new row, combine row and return */\n  513     if (png_ptr->interlaced && (png_ptr->transformations & PNG_INTERLACE))\n  ...\n  521                    png_combine_row(png_ptr, dsp_row,\n  522                       png_pass_dsp_mask[png_ptr->pass]);\n  523:                png_read_finish_row(png_ptr);\n  524                 return;\n  525              }\n  ...\n  531                    png_combine_row(png_ptr, dsp_row,\n  532                       png_pass_dsp_mask[png_ptr->pass]);\n  533:                png_read_finish_row(png_ptr);\n  534                 return;\n  535              }\n  ...\n  541                    png_combine_row(png_ptr, dsp_row,\n  542                       png_pass_dsp_mask[png_ptr->pass]);\n  543:                png_read_finish_row(png_ptr);\n  544                 return;\n  545              }\n  ...\n  551                    png_combine_row(png_ptr, dsp_row,\n  552                       png_pass_dsp_mask[png_ptr->pass]);\n  553:                png_read_finish_row(png_ptr);\n  554                 return;\n  555              }\n  ...\n  561                    png_combine_row(png_ptr, dsp_row,\n  562                       png_pass_dsp_mask[png_ptr->pass]);\n  563:                png_read_finish_row(png_ptr);\n  564                 return;\n  565              }\n  ...\n  571                    png_combine_row(png_ptr, dsp_row,\n  572                       png_pass_dsp_mask[png_ptr->pass]);\n  573:                png_read_finish_row(png_ptr);\n  574                 return;\n  575              }\n  ...\n  578              if (!(png_ptr->row_number & 1))\n  579              {\n  580:                png_read_finish_row(png_ptr);\n  581                 return;\n  582              }\n  ...\n  587  \n  588     if (!(png_ptr->mode & PNG_HAVE_IDAT))\n  589:       png_error(png_ptr, \"Invalid attempt to read row data\");\n  590  \n  591     png_ptr->zstream.next_out = png_ptr->row_buf;\n  ...\n  601              png_crc_finish(png_ptr, 0);\n  602  \n  603:             png_ptr->idat_size = png_read_chunk_header(png_ptr);\n  604              if (png_memcmp(png_ptr->chunk_name, png_IDAT, 4))\n  605                 png_error(png_ptr, \"Not enough image data\");\n  ...\n  609           if (png_ptr->zbuf_size > png_ptr->idat_size)\n  610              png_ptr->zstream.avail_in = (uInt)png_ptr->idat_size;\n  611:          png_crc_read(png_ptr, png_ptr->zbuf,\n  612              (png_size_t)png_ptr->zstream.avail_in);\n  613           png_ptr->idat_size -= png_ptr->zstream.avail_in;\n  ...\n  638  \n  639     if (png_ptr->row_buf[0])\n  640:    png_read_filter_row(png_ptr, &(png_ptr->row_info),\n  641        png_ptr->row_buf + 1, png_ptr->prev_row + 1,\n  642        (int)(png_ptr->row_buf[0]));\n  ...\n  649     {\n  650        /* Intrapixel differencing */\n  651:       png_do_read_intrapixel(&(png_ptr->row_info), png_ptr->row_buf + 1);\n  652     }\n  653  #endif\n  ...\n  655  \n  656     if (png_ptr->transformations || (png_ptr->flags&PNG_FLAG_STRIP_ALPHA))\n  657:       png_do_read_transformations(png_ptr);\n  658  \n  659: #ifdef PNG_READ_INTERLACING_SUPPORTED\n  660     /* Blow up interlaced rows to full size */\n  661     if (png_ptr->interlaced &&\n  ...\n  664        if (png_ptr->pass < 6)\n  665           /* Old interface (pre-1.0.9):\n  666:           * png_do_read_interlace(&(png_ptr->row_info),\n  667            *    png_ptr->row_buf + 1, png_ptr->pass, png_ptr->transformations);\n  668            */\n  669:          png_do_read_interlace(png_ptr);\n  670  \n  671        if (dsp_row != NULL)\n  ...\n  684           png_combine_row(png_ptr, dsp_row, 0xff);\n  685     }\n  686:    png_read_finish_row(png_ptr);\n  687  \n  688:    if (png_ptr->read_row_fn != NULL)\n  689:       (*(png_ptr->read_row_fn))(png_ptr, png_ptr->row_number, png_ptr->pass);\n  690  }\n  691: #endif /* PNG_SEQUENTIAL_READ_SUPPORTED */\n  692  \n  693: #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n  694: /* Read one or more rows of image data.  If the image is interlaced,\n  695   * and png_set_interlace_handling() has been called, the rows need to\n  696   * contain the contents of the rows from the previous pass.  If the\n  ...\n  717  \n  718  void PNGAPI\n  719: png_read_rows(png_structp png_ptr, png_bytepp row,\n  720     png_bytepp display_row, png_uint_32 num_rows)\n  721  {\n  ...\n  724     png_bytepp dp;\n  725  \n  726:    png_debug(1, \"in png_read_rows\");\n  727   \n  728     if (png_ptr == NULL)\n  ...\n  736           png_bytep dptr = *dp++;\n  737  \n  738:          png_read_row(png_ptr, rptr, dptr);\n  739        }\n  740     else if (rp != NULL)\n  ...\n  742        {\n  743           png_bytep rptr = *rp;\n  744:          png_read_row(png_ptr, rptr, NULL);\n  745           rp++;\n  746        }\n  ...\n  749        {\n  750           png_bytep dptr = *dp;\n  751:          png_read_row(png_ptr, NULL, dptr);\n  752           dp++;\n  753        }\n  754  }\n  755: #endif /* PNG_SEQUENTIAL_READ_SUPPORTED */\n  756  \n  757: #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n  758: /* Read the entire image.  If the image has an alpha channel or a tRNS\n  759   * chunk, and you have called png_handle_alpha()[*], you will need to\n  760   * initialize the image to the current image that PNG will be overlaying.\n  761   * We set the num_rows again here, in case it was incorrectly set in\n  762:  * png_read_start_row() by a call to png_read_update_info() or\n  763:  * png_start_read_image() if png_set_interlace_handling() wasn't called\n  764   * prior to either of these functions like it should have been.  You can\n  765   * only call this function once.  If you desire to have an image for\n  766:  * each pass of a interlaced image, use png_read_rows() instead.\n  767   *\n  768   * [*] png_handle_alpha() does not exist yet, as of this version of libpng\n  769   */\n  770  void PNGAPI\n  771: png_read_image(png_structp png_ptr, png_bytepp image)\n  772  {\n  773     png_uint_32 i, image_height;\n  ...\n  775     png_bytepp rp;\n  776  \n  777:    png_debug(1, \"in png_read_image\");\n  778   \n  779     if (png_ptr == NULL)\n  780        return;\n  781  \n  782: #ifdef PNG_READ_INTERLACING_SUPPORTED\n  783     pass = png_set_interlace_handling(png_ptr);\n  784  #else\n  785     if (png_ptr->interlaced)\n  786        png_error(png_ptr,\n  787:         \"Cannot read interlaced image -- interlace handler disabled\");\n  788     pass = 1;\n  789  #endif\n  ...\n  798        for (i = 0; i < image_height; i++)\n  799        {\n  800:          png_read_row(png_ptr, *rp, NULL);\n  801           rp++;\n  802        }\n  803     }\n  804  }\n  805: #endif /* PNG_SEQUENTIAL_READ_SUPPORTED */\n  806  \n  807: #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n  808: /* Read the end of the PNG file.  Will not read past the end of the\n  809:  * file, will verify the end is accurate, and will read any comments\n  810   * or time information at the end of the file, if info is not NULL.\n  811   */\n  812  void PNGAPI\n  813: png_read_end(png_structp png_ptr, png_infop info_ptr)\n  814  {\n  815:    png_debug(1, \"in png_read_end\");\n  816   \n  817     if (png_ptr == NULL)\n  ...\n  825        PNG_IEND;\n  826        PNG_PLTE;\n  827: #ifdef PNG_READ_bKGD_SUPPORTED\n  828        PNG_bKGD;\n  829  #endif\n  830: #ifdef PNG_READ_cHRM_SUPPORTED\n  831        PNG_cHRM;\n  832  #endif\n  833: #ifdef PNG_READ_gAMA_SUPPORTED\n  834        PNG_gAMA;\n  835  #endif\n  836: #ifdef PNG_READ_hIST_SUPPORTED\n  837        PNG_hIST;\n  838  #endif\n  839: #ifdef PNG_READ_iCCP_SUPPORTED\n  840        PNG_iCCP;\n  841  #endif\n  842: #ifdef PNG_READ_iTXt_SUPPORTED\n  843        PNG_iTXt;\n  844  #endif\n  845: #ifdef PNG_READ_oFFs_SUPPORTED\n  846        PNG_oFFs;\n  847  #endif\n  848: #ifdef PNG_READ_pCAL_SUPPORTED\n  849        PNG_pCAL;\n  850  #endif\n  851: #ifdef PNG_READ_pHYs_SUPPORTED\n  852        PNG_pHYs;\n  853  #endif\n  854: #ifdef PNG_READ_sBIT_SUPPORTED\n  855        PNG_sBIT;\n  856  #endif\n  857: #ifdef PNG_READ_sCAL_SUPPORTED\n  858        PNG_sCAL;\n  859  #endif\n  860: #ifdef PNG_READ_sPLT_SUPPORTED\n  861        PNG_sPLT;\n  862  #endif\n  863: #ifdef PNG_READ_sRGB_SUPPORTED\n  864        PNG_sRGB;\n  865  #endif\n  866: #ifdef PNG_READ_tEXt_SUPPORTED\n  867        PNG_tEXt;\n  868  #endif\n  869: #ifdef PNG_READ_tIME_SUPPORTED\n  870        PNG_tIME;\n  871  #endif\n  872: #ifdef PNG_READ_tRNS_SUPPORTED\n  873        PNG_tRNS;\n  874  #endif\n  875: #ifdef PNG_READ_zTXt_SUPPORTED\n  876        PNG_zTXt;\n  877  #endif\n  878:       png_uint_32 length = png_read_chunk_header(png_ptr);\n  879        PNG_CONST png_bytep chunk_name = png_ptr->chunk_name;\n  880  \n  ...\n  899        {\n  900           /* Zero length IDATs are legal after the last IDAT has been\n  901:           * read, but not after other chunks have been read.\n  902            */\n  903           if ((length > 0) || (png_ptr->mode & PNG_HAVE_CHUNK_AFTER_IDAT))\n  ...\n  907        else if (!png_memcmp(chunk_name, png_PLTE, 4))\n  908           png_handle_PLTE(png_ptr, info_ptr, length);\n  909: #ifdef PNG_READ_bKGD_SUPPORTED\n  910        else if (!png_memcmp(chunk_name, png_bKGD, 4))\n  911           png_handle_bKGD(png_ptr, info_ptr, length);\n  912  #endif\n  913: #ifdef PNG_READ_cHRM_SUPPORTED\n  914        else if (!png_memcmp(chunk_name, png_cHRM, 4))\n  915           png_handle_cHRM(png_ptr, info_ptr, length);\n  916  #endif\n  917: #ifdef PNG_READ_gAMA_SUPPORTED\n  918        else if (!png_memcmp(chunk_name, png_gAMA, 4))\n  919           png_handle_gAMA(png_ptr, info_ptr, length);\n  920  #endif\n  921: #ifdef PNG_READ_hIST_SUPPORTED\n  922        else if (!png_memcmp(chunk_name, png_hIST, 4))\n  923           png_handle_hIST(png_ptr, info_ptr, length);\n  924  #endif\n  925: #ifdef PNG_READ_oFFs_SUPPORTED\n  926        else if (!png_memcmp(chunk_name, png_oFFs, 4))\n  927           png_handle_oFFs(png_ptr, info_ptr, length);\n  928  #endif\n  929: #ifdef PNG_READ_pCAL_SUPPORTED\n  930        else if (!png_memcmp(chunk_name, png_pCAL, 4))\n  931           png_handle_pCAL(png_ptr, info_ptr, length);\n  932  #endif\n  933: #ifdef PNG_READ_sCAL_SUPPORTED\n  934        else if (!png_memcmp(chunk_name, png_sCAL, 4))\n  935           png_handle_sCAL(png_ptr, info_ptr, length);\n  936  #endif\n  937: #ifdef PNG_READ_pHYs_SUPPORTED\n  938        else if (!png_memcmp(chunk_name, png_pHYs, 4))\n  939           png_handle_pHYs(png_ptr, info_ptr, length);\n  940  #endif\n  941: #ifdef PNG_READ_sBIT_SUPPORTED\n  942        else if (!png_memcmp(chunk_name, png_sBIT, 4))\n  943           png_handle_sBIT(png_ptr, info_ptr, length);\n  944  #endif\n  945: #ifdef PNG_READ_sRGB_SUPPORTED\n  946        else if (!png_memcmp(chunk_name, png_sRGB, 4))\n  947           png_handle_sRGB(png_ptr, info_ptr, length);\n  948  #endif\n  949: #ifdef PNG_READ_iCCP_SUPPORTED\n  950        else if (!png_memcmp(chunk_name, png_iCCP, 4))\n  951           png_handle_iCCP(png_ptr, info_ptr, length);\n  952  #endif\n  953: #ifdef PNG_READ_sPLT_SUPPORTED\n  954        else if (!png_memcmp(chunk_name, png_sPLT, 4))\n  955           png_handle_sPLT(png_ptr, info_ptr, length);\n  956  #endif\n  957: #ifdef PNG_READ_tEXt_SUPPORTED\n  958        else if (!png_memcmp(chunk_name, png_tEXt, 4))\n  959           png_handle_tEXt(png_ptr, info_ptr, length);\n  960  #endif\n  961: #ifdef PNG_READ_tIME_SUPPORTED\n  962        else if (!png_memcmp(chunk_name, png_tIME, 4))\n  963           png_handle_tIME(png_ptr, info_ptr, length);\n  964  #endif\n  965: #ifdef PNG_READ_tRNS_SUPPORTED\n  966        else if (!png_memcmp(chunk_name, png_tRNS, 4))\n  967           png_handle_tRNS(png_ptr, info_ptr, length);\n  968  #endif\n  969: #ifdef PNG_READ_zTXt_SUPPORTED\n  970        else if (!png_memcmp(chunk_name, png_zTXt, 4))\n  971           png_handle_zTXt(png_ptr, info_ptr, length);\n  972  #endif\n  973: #ifdef PNG_READ_iTXt_SUPPORTED\n  974        else if (!png_memcmp(chunk_name, png_iTXt, 4))\n  975           png_handle_iTXt(png_ptr, info_ptr, length);\n  ...\n  979     } while (!(png_ptr->mode & PNG_HAVE_IEND));\n  980  }\n  981: #endif /* PNG_SEQUENTIAL_READ_SUPPORTED */\n  982  \n  983: /* Free all memory used by the read */\n  984  void PNGAPI\n  985: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr,\n  986     png_infopp end_info_ptr_ptr)\n  987  {\n  ...\n  993  #endif\n  994  \n  995:    png_debug(1, \"in png_destroy_read_struct\");\n  996   \n  997     if (png_ptr_ptr != NULL)\n  ...\n 1011        end_info_ptr = *end_info_ptr_ptr;\n 1012  \n 1013:    png_read_destroy(png_ptr, info_ptr, end_info_ptr);\n 1014  \n 1015     if (info_ptr != NULL)\n ....\n 1030     if (end_info_ptr != NULL)\n 1031     {\n 1032: #ifdef PNG_READ_TEXT_SUPPORTED\n 1033        png_free_data(png_ptr, end_info_ptr, PNG_FREE_TEXT, -1);\n 1034  #endif\n ....\n 1054  }\n 1055  \n 1056: /* Free all memory used by the read (old method) */\n 1057  void /* PRIVATE */\n 1058: png_read_destroy(png_structp png_ptr, png_infop info_ptr,\n 1059      png_infop end_info_ptr)\n 1060  {\n ....\n 1069  #endif\n 1070  \n 1071:    png_debug(1, \"in png_read_destroy\");\n 1072   \n 1073     if (info_ptr != NULL)\n ....\n 1081     png_free(png_ptr, png_ptr->prev_row);\n 1082     png_free(png_ptr, png_ptr->chunkdata);\n 1083: #ifdef PNG_READ_DITHER_SUPPORTED\n 1084     png_free(png_ptr, png_ptr->palette_lookup);\n 1085     png_free(png_ptr, png_ptr->dither_index);\n 1086  #endif\n 1087: #ifdef PNG_READ_GAMMA_SUPPORTED\n 1088     png_free(png_ptr, png_ptr->gamma_table);\n 1089  #endif\n 1090: #ifdef PNG_READ_BACKGROUND_SUPPORTED\n 1091     png_free(png_ptr, png_ptr->gamma_from_1);\n 1092     png_free(png_ptr, png_ptr->gamma_to_1);\n ....\n 1096     png_ptr->free_me &= ~PNG_FREE_PLTE;\n 1097  #if defined(PNG_tRNS_SUPPORTED) || \\\n 1098:     defined(PNG_READ_EXPAND_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n 1099     if (png_ptr->free_me & PNG_FREE_TRNS)\n 1100        png_free(png_ptr, png_ptr->trans_alpha);\n 1101     png_ptr->free_me &= ~PNG_FREE_TRNS;\n 1102  #endif\n 1103: #ifdef PNG_READ_hIST_SUPPORTED\n 1104     if (png_ptr->free_me & PNG_FREE_HIST)\n 1105        png_free(png_ptr, png_ptr->hist);\n 1106     png_ptr->free_me &= ~PNG_FREE_HIST;\n 1107  #endif\n 1108: #ifdef PNG_READ_GAMMA_SUPPORTED\n 1109     if (png_ptr->gamma_16_table != NULL)\n 1110     {\n ....\n 1117     png_free(png_ptr, png_ptr->gamma_16_table);\n 1118     }\n 1119: #ifdef PNG_READ_BACKGROUND_SUPPORTED\n 1120     if (png_ptr->gamma_16_from_1 != NULL)\n 1121     {\n ....\n 1145  \n 1146     inflateEnd(&png_ptr->zstream);\n 1147: #ifdef PNG_PROGRESSIVE_READ_SUPPORTED\n 1148     png_free(png_ptr, png_ptr->save_buffer);\n 1149  #endif\n 1150  \n 1151: #ifdef PNG_PROGRESSIVE_READ_SUPPORTED\n 1152  #ifdef PNG_TEXT_SUPPORTED\n 1153     png_free(png_ptr, png_ptr->current_text);\n 1154  #endif /* PNG_TEXT_SUPPORTED */\n 1155: #endif /* PNG_PROGRESSIVE_READ_SUPPORTED */\n 1156  \n 1157     /* Save the important info out of the png_struct, in case it is\n ....\n 1185  \n 1186  void PNGAPI\n 1187: png_set_read_status_fn(png_structp png_ptr, png_read_status_ptr read_row_fn)\n 1188  {\n 1189     if (png_ptr == NULL)\n 1190        return;\n 1191:    png_ptr->read_row_fn = read_row_fn;\n 1192  }\n 1193  \n 1194  \n 1195: #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n 1196  #ifdef PNG_INFO_IMAGE_SUPPORTED\n 1197  void PNGAPI\n 1198: png_read_png(png_structp png_ptr, png_infop info_ptr,\n 1199                             int transforms,\n 1200                             voidp params)\n ....\n 1205        return;\n 1206  \n 1207:    /* png_read_info() gives us all of the information from the\n 1208      * PNG file before the first IDAT (image data chunk).\n 1209      */\n 1210:    png_read_info(png_ptr, info_ptr);\n 1211     if (info_ptr->height > PNG_UINT_32_MAX/png_sizeof(png_bytep))\n 1212:       png_error(png_ptr, \"Image is too high to process with png_read_png()\");\n 1213  \n 1214     /* -------------- image transformations start here ------------------- */\n 1215  \n 1216: #ifdef PNG_READ_16_TO_8_SUPPORTED\n 1217     /* Tell libpng to strip 16 bit/color files down to 8 bits per color.\n 1218      */\n ....\n 1221  #endif\n 1222  \n 1223: #ifdef PNG_READ_STRIP_ALPHA_SUPPORTED\n 1224     /* Strip alpha bytes from the input data without combining with\n 1225      * the background (not recommended).\n ....\n 1229  #endif\n 1230  \n 1231: #if defined(PNG_READ_PACK_SUPPORTED) && !defined(PNG_READ_EXPAND_SUPPORTED)\n 1232     /* Extract multiple pixels with bit depths of 1, 2, or 4 from a single\n 1233      * byte into separate bytes (useful for paletted and grayscale images).\n ....\n 1237  #endif\n 1238  \n 1239: #ifdef PNG_READ_PACKSWAP_SUPPORTED\n 1240     /* Change the order of packed pixels to least significant bit first\n 1241      * (not useful if you are using png_set_packing).\n ....\n 1245  #endif\n 1246  \n 1247: #ifdef PNG_READ_EXPAND_SUPPORTED\n 1248     /* Expand paletted colors into true RGB triplets\n 1249      * Expand grayscale images to full 8 bits from 1, 2, or 4 bits/pixel\n ....\n 1261      */\n 1262  \n 1263: #ifdef PNG_READ_INVERT_SUPPORTED\n 1264     /* Invert monochrome files to have 0 as white and 1 as black\n 1265      */\n ....\n 1268  #endif\n 1269  \n 1270: #ifdef PNG_READ_SHIFT_SUPPORTED\n 1271     /* If you want to shift the pixel values from the range [0,255] or\n 1272      * [0,65535] to the original [0,7] or [0,31], or whatever range the\n ....\n 1283  #endif\n 1284  \n 1285: #ifdef PNG_READ_BGR_SUPPORTED\n 1286     /* Flip the RGB pixels to BGR (or RGBA to BGRA)\n 1287      */\n ....\n 1290  #endif\n 1291  \n 1292: #ifdef PNG_READ_SWAP_ALPHA_SUPPORTED\n 1293     /* Swap the RGBA or GA data to ARGB or AG (or BGRA to ABGR)\n 1294      */\n ....\n 1297  #endif\n 1298  \n 1299: #ifdef PNG_READ_SWAP_SUPPORTED\n 1300     /* Swap bytes of 16 bit files to least significant byte first\n 1301      */\n ....\n 1305  \n 1306  /* Added at libpng-1.2.41 */\n 1307: #ifdef PNG_READ_INVERT_ALPHA_SUPPORTED\n 1308     /* Invert the alpha channel from opacity to transparency\n 1309      */\n ....\n 1313  \n 1314  /* Added at libpng-1.2.41 */\n 1315: #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED\n 1316     /* Expand grayscale image to RGB\n 1317      */\n ....\n 1326      * update the palette for you (i.e., you selected such a transform above).\n 1327      */\n 1328:    png_read_update_info(png_ptr, info_ptr);\n 1329  \n 1330     /* -------------- image transformations end here ------------------- */\n ....\n 1347     }\n 1348  \n 1349:    png_read_image(png_ptr, info_ptr->row_pointers);\n 1350     info_ptr->valid |= PNG_INFO_IDAT;\n 1351  \n 1352:    /* Read rest of file, and get additional chunks in info_ptr - REQUIRED */\n 1353:    png_read_end(png_ptr, info_ptr);\n 1354  \n 1355     transforms = transforms; /* Quiet compiler warnings */\n ....\n 1358  }\n 1359  #endif /* PNG_INFO_IMAGE_SUPPORTED */\n 1360: #endif /* PNG_SEQUENTIAL_READ_SUPPORTED */\n 1361: #endif /* PNG_READ_SUPPORTED */\n 1362  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngrio.c:\n   16   * has a different input method.  Note that you shouldn't change this\n   17   * function, but rather write a replacement function and then make\n   18:  * libpng use it at run time with png_set_read_fn(...).\n   19   */\n   20  \n   21  #define PNG_NO_PEDANTIC_WARNINGS\n   22  #include \"png.h\"\n   23: #ifdef PNG_READ_SUPPORTED\n   24  #include \"pngpriv.h\"\n   25  \n   26: /* Read the data from whatever input you are using.  The default routine\n   27:  * reads from a file pointer.  Note that this routine sometimes gets called\n   28   * with very small lengths, so you should implement some kind of simple\n   29:  * buffering if you are using unbuffered reads.  This should never be asked\n   30:  * to read more then 64K on a 16 bit machine.\n   31   */\n   32  void /* PRIVATE */\n   33: png_read_data(png_structp png_ptr, png_bytep data, png_size_t length)\n   34  {\n   35:    png_debug1(4, \"reading %d bytes\", (int)length);\n   36   \n   37:    if (png_ptr->read_data_fn != NULL)\n   38:       (*(png_ptr->read_data_fn))(png_ptr, data, length);\n   39     else\n   40:       png_error(png_ptr, \"Call to NULL read function\");\n   41  }\n   42  \n   43  #ifdef PNG_STDIO_SUPPORTED\n   44: /* This is the function that does the actual reading of data.  If you are\n   45:  * not reading from a standard C stream, you should create a replacement\n   46:  * read_data function and use it at run time with png_set_read_fn(), rather\n   47   * than changing the library.\n   48   */\n   49  #ifndef USE_FAR_KEYWORD\n   50  void PNGAPI\n   51: png_default_read_data(png_structp png_ptr, png_bytep data, png_size_t length)\n   52  {\n   53     png_size_t check;\n   ..\n   55     if (png_ptr == NULL)\n   56        return;\n   57:    /* fread() returns 0 on error, so it is OK to store this in a png_size_t\n   58:     * instead of an int, which is what fread() actually returns.\n   59      */\n   60:    check = fread(data, 1, length, (png_FILE_p)png_ptr->io_ptr);\n   61  \n   62     if (check != length)\n   63:       png_error(png_ptr, \"Read Error\");\n   64  }\n   65  #else\n   ..\n   73  \n   74  static void PNGAPI\n   75: png_default_read_data(png_structp png_ptr, png_bytep data, png_size_t length)\n   76  {\n   77     png_size_t check;\n   ..\n   86     if ((png_bytep)n_data == data)\n   87     {\n   88:       check = fread(n_data, 1, length, io_ptr);\n   89     }\n   90     else\n   91     {\n   92        png_byte buf[NEAR_BUF_SIZE];\n   93:       png_size_t read, remaining, err;\n   94        check = 0;\n   95        remaining = length;\n   96        do\n   97        {\n   98:          read = MIN(NEAR_BUF_SIZE, remaining);\n   99:          err = fread(buf, 1, read, io_ptr);\n  100:          png_memcpy(data, buf, read); /* copy far buffer to near buffer */\n  101:          if (err != read)\n  102              break;\n  103           else\n  104              check += err;\n  105:          data += read;\n  106:          remaining -= read;\n  107        }\n  108        while (remaining != 0);\n  109     }\n  110     if ((png_uint_32)check != (png_uint_32)length)\n  111:       png_error(png_ptr, \"read Error\");\n  112  }\n  113  #endif\n  ...\n  121   * io_ptr       - pointer to user supplied structure containing info about\n  122   *                the input functions.  May be NULL.\n  123:  * read_data_fn - pointer to a new input function that takes as its\n  124   *                arguments a pointer to a png_struct, a pointer to\n  125   *                a location where input data can be stored, and a 32-bit\n  126:  *                unsigned int that is the number of bytes to be read.\n  127   *                To exit and output any fatal error messages the new write\n  128   *                function should call png_error(png_ptr, \"Error msg\").\n  ...\n  131   */\n  132  void PNGAPI\n  133: png_set_read_fn(png_structp png_ptr, png_voidp io_ptr,\n  134:    png_rw_ptr read_data_fn)\n  135  {\n  136     if (png_ptr == NULL)\n  ...\n  139  \n  140  #ifdef PNG_STDIO_SUPPORTED\n  141:    if (read_data_fn != NULL)\n  142:       png_ptr->read_data_fn = read_data_fn;\n  143     else\n  144:       png_ptr->read_data_fn = png_default_read_data;\n  145  #else\n  146:    png_ptr->read_data_fn = read_data_fn;\n  147  #endif\n  148  \n  149:    /* It is an error to write to a read device */\n  150     if (png_ptr->write_data_fn != NULL)\n  151     {\n  152        png_ptr->write_data_fn = NULL;\n  153        png_warning(png_ptr,\n  154:          \"It's an error to set both read_data_fn and write_data_fn in the \");\n  155        png_warning(png_ptr,\n  156           \"same structure.  Resetting write_data_fn to NULL\");\n  ...\n  161  #endif\n  162  }\n  163: #endif /* PNG_READ_SUPPORTED */\n  164  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngrtran.c:\n    1  \n    2: /* pngrtran.c - transforms the data in a row for PNG readers\n    3   *\n    4   * Last changed in libpng 1.4.1 [February 25, 2010]\n    .\n   12   *\n   13   * This file contains functions optionally called by an application\n   14:  * in order to tell libpng how to handle data when reading a PNG.\n   15:  * Transformations that are used in both reading and writing are\n   16   * in pngtrans.c.\n   17   */\n   ..\n   19  #define PNG_NO_PEDANTIC_WARNINGS\n   20  #include \"png.h\"\n   21: #ifdef PNG_READ_SUPPORTED\n   22  #include \"pngpriv.h\"\n   23  \n   ..\n   90  }\n   91  \n   92: #if defined(PNG_READ_BACKGROUND_SUPPORTED) && \\\n   93      defined(PNG_FLOATING_POINT_SUPPORTED)\n   94  /* Handle alpha and tRNS via a background color */\n   ..\n  117  #endif\n  118  \n  119: #ifdef PNG_READ_16_TO_8_SUPPORTED\n  120  /* Strip 16 bit depth files to 8 bit depth */\n  121  void PNGAPI\n  ...\n  130  #endif\n  131  \n  132: #ifdef PNG_READ_STRIP_ALPHA_SUPPORTED\n  133  void PNGAPI\n  134  png_set_strip_alpha(png_structp png_ptr)\n  ...\n  142  #endif\n  143  \n  144: #ifdef PNG_READ_DITHER_SUPPORTED\n  145  /* Dither file to 8 bit.  Supply a palette, the current number\n  146   * of elements in the palette, the maximum number of elements\n  ...\n  539  #endif\n  540  \n  541: #if defined(PNG_READ_GAMMA_SUPPORTED) && defined(PNG_FLOATING_POINT_SUPPORTED)\n  542  /* Transform the image from the file_gamma to the screen_gamma.  We\n  543   * only do transformations on images where the file_gamma and screen_gamma\n  ...\n  566  #endif\n  567  \n  568: #ifdef PNG_READ_EXPAND_SUPPORTED\n  569  /* Expand paletted images to RGB, expand grayscale images of\n  570   * less than 8-bit depth to 8-bit depth, and expand tRNS chunks\n  ...\n  638     png_ptr->flags &= ~PNG_FLAG_ROW_INIT;\n  639  }\n  640: #endif /* defined(PNG_READ_EXPAND_SUPPORTED) */\n  641  \n  642: #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED\n  643  void PNGAPI\n  644  png_set_gray_to_rgb(png_structp png_ptr)\n  ...\n  651  #endif\n  652  \n  653: #ifdef PNG_READ_RGB_TO_GRAY_SUPPORTED\n  654  #ifdef PNG_FLOATING_POINT_SUPPORTED\n  655  /* Convert a RGB image to a grayscale of the same width.  This allows us,\n  ...\n  689     }\n  690     if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)\n  691: #ifdef PNG_READ_EXPAND_SUPPORTED\n  692        png_ptr->transformations |= PNG_EXPAND;\n  693  #else\n  ...\n  724  #endif\n  725  \n  726: #if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \\\n  727      defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)\n  728  void PNGAPI\n  729: png_set_read_user_transform_fn(png_structp png_ptr, png_user_transform_ptr\n  730:    read_user_transform_fn)\n  731  {\n  732:    png_debug(1, \"in png_set_read_user_transform_fn\");\n  733  \n  734     if (png_ptr == NULL)\n  735        return;\n  736  \n  737: #ifdef PNG_READ_USER_TRANSFORM_SUPPORTED\n  738     png_ptr->transformations |= PNG_USER_TRANSFORM;\n  739:    png_ptr->read_user_transform_fn = read_user_transform_fn;\n  740  #endif\n  741  }\n  742  #endif\n  743  \n  744: /* Initialize everything needed for the read.  This includes modifying\n  745   * the palette.\n  746   */\n  747  void /* PRIVATE */\n  748: png_init_read_transformations(png_structp png_ptr)\n  749  {\n  750:    png_debug(1, \"in png_init_read_transformations\");\n  751  \n  752    {\n  753: #if defined(PNG_READ_BACKGROUND_SUPPORTED) || \\\n  754:     defined(PNG_READ_SHIFT_SUPPORTED) || \\\n  755:     defined(PNG_READ_GAMMA_SUPPORTED)\n  756     int color_type = png_ptr->color_type;\n  757  #endif\n  758  \n  759: #if defined(PNG_READ_EXPAND_SUPPORTED) && defined(PNG_READ_BACKGROUND_SUPPORTED)\n  760  \n  761: #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED\n  762     /* Detect gray background and attempt to enable optimization\n  763      * for gray --> RGB case\n  ...\n  846              png_ptr->palette[png_ptr->background.index].blue;\n  847  \n  848: #ifdef PNG_READ_INVERT_ALPHA_SUPPORTED\n  849          if (png_ptr->transformations & PNG_INVERT_ALPHA)\n  850          {\n  851: #ifdef PNG_READ_EXPAND_SUPPORTED\n  852             if (!(png_ptr->transformations & PNG_EXPAND_tRNS))\n  853  #endif\n  ...\n  868  #endif\n  869  \n  870: #if defined(PNG_READ_BACKGROUND_SUPPORTED) && defined(PNG_READ_GAMMA_SUPPORTED)\n  871     png_ptr->background_1 = png_ptr->background;\n  872  #endif\n  873: #if defined(PNG_READ_GAMMA_SUPPORTED) && defined(PNG_FLOATING_POINT_SUPPORTED)\n  874  \n  875     if ((color_type == PNG_COLOR_TYPE_PALETTE && png_ptr->num_trans != 0)\n  ...\n  893        png_build_gamma_table(png_ptr, png_ptr->bit_depth);\n  894  \n  895: #ifdef PNG_READ_BACKGROUND_SUPPORTED\n  896        if (png_ptr->transformations & PNG_BACKGROUND)\n  897        {\n  ...\n 1066        else\n 1067        /* Transformation does not include PNG_BACKGROUND */\n 1068: #endif /* PNG_READ_BACKGROUND_SUPPORTED */\n 1069        if (color_type == PNG_COLOR_TYPE_PALETTE)\n 1070        {\n ....\n 1084        }\n 1085     }\n 1086: #ifdef PNG_READ_BACKGROUND_SUPPORTED\n 1087     else\n 1088  #endif\n 1089: #endif /* PNG_READ_GAMMA_SUPPORTED && PNG_FLOATING_POINT_SUPPORTED */\n 1090: #ifdef PNG_READ_BACKGROUND_SUPPORTED\n 1091     /* No GAMMA transformation */\n 1092     if ((png_ptr->transformations & PNG_BACKGROUND) &&\n ....\n 1124        png_ptr->transformations |= PNG_STRIP_ALPHA;\n 1125     }\n 1126: #endif /* PNG_READ_BACKGROUND_SUPPORTED */\n 1127  \n 1128: #ifdef PNG_READ_SHIFT_SUPPORTED\n 1129     if ((png_ptr->transformations & PNG_SHIFT) &&\n 1130        (color_type == PNG_COLOR_TYPE_PALETTE))\n ....\n 1149        }\n 1150     }\n 1151: #endif  /* PNG_READ_SHIFT_SUPPORTED */\n 1152   }\n 1153: #if !defined(PNG_READ_GAMMA_SUPPORTED) && !defined(PNG_READ_SHIFT_SUPPORTED) \\\n 1154:  && !defined(PNG_READ_BACKGROUND_SUPPORTED)\n 1155     if (png_ptr)\n 1156        return;\n ....\n 1163   */\n 1164  void /* PRIVATE */\n 1165: png_read_transform_info(png_structp png_ptr, png_infop info_ptr)\n 1166  {\n 1167:    png_debug(1, \"in png_read_transform_info\");\n 1168  \n 1169: #ifdef PNG_READ_EXPAND_SUPPORTED\n 1170     if (png_ptr->transformations & PNG_EXPAND)\n 1171     {\n ....\n 1194  #endif\n 1195  \n 1196: #ifdef PNG_READ_BACKGROUND_SUPPORTED\n 1197     if (png_ptr->transformations & PNG_BACKGROUND)\n 1198     {\n ....\n 1203  #endif\n 1204  \n 1205: #ifdef PNG_READ_GAMMA_SUPPORTED\n 1206     if (png_ptr->transformations & PNG_GAMMA)\n 1207     {\n ....\n 1215  #endif\n 1216  \n 1217: #ifdef PNG_READ_16_TO_8_SUPPORTED\n 1218     if ((png_ptr->transformations & PNG_16_TO_8) && (info_ptr->bit_depth == 16))\n 1219        info_ptr->bit_depth = 8;\n 1220  #endif\n 1221  \n 1222: #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED\n 1223     if (png_ptr->transformations & PNG_GRAY_TO_RGB)\n 1224        info_ptr->color_type |= PNG_COLOR_MASK_COLOR;\n 1225  #endif\n 1226  \n 1227: #ifdef PNG_READ_RGB_TO_GRAY_SUPPORTED\n 1228     if (png_ptr->transformations & PNG_RGB_TO_GRAY)\n 1229        info_ptr->color_type &= ~PNG_COLOR_MASK_COLOR;\n 1230  #endif\n 1231  \n 1232: #ifdef PNG_READ_DITHER_SUPPORTED\n 1233     if (png_ptr->transformations & PNG_DITHER)\n 1234     {\n ....\n 1242  #endif\n 1243  \n 1244: #ifdef PNG_READ_PACK_SUPPORTED\n 1245     if ((png_ptr->transformations & PNG_PACK) && (info_ptr->bit_depth < 8))\n 1246        info_ptr->bit_depth = 8;\n ....\n 1254        info_ptr->channels = 1;\n 1255  \n 1256: #ifdef PNG_READ_STRIP_ALPHA_SUPPORTED\n 1257     if (png_ptr->flags & PNG_FLAG_STRIP_ALPHA)\n 1258        info_ptr->color_type &= ~PNG_COLOR_MASK_ALPHA;\n ....\n 1262        info_ptr->channels++;\n 1263  \n 1264: #ifdef PNG_READ_FILLER_SUPPORTED\n 1265     /* STRIP_ALPHA and FILLER allowed:  MASK_ALPHA bit stripped above */\n 1266     if ((png_ptr->transformations & PNG_FILLER) &&\n ....\n 1276  \n 1277  #if defined(PNG_USER_TRANSFORM_PTR_SUPPORTED) && \\\n 1278: defined(PNG_READ_USER_TRANSFORM_SUPPORTED)\n 1279     if (png_ptr->transformations & PNG_USER_TRANSFORM)\n 1280       {\n ....\n 1291     info_ptr->rowbytes = PNG_ROWBYTES(info_ptr->pixel_depth, info_ptr->width);\n 1292  \n 1293: #ifndef PNG_READ_EXPAND_SUPPORTED\n 1294     if (png_ptr)\n 1295        return;\n ....\n 1302   */\n 1303  void /* PRIVATE */\n 1304: png_do_read_transformations(png_structp png_ptr)\n 1305  {\n 1306:    png_debug(1, \"in png_do_read_transformations\");\n 1307  \n 1308     if (png_ptr->row_buf == NULL)\n ....\n 1321  #ifdef PNG_WARN_UNINITIALIZED_ROW\n 1322     if (!(png_ptr->flags & PNG_FLAG_ROW_INIT))\n 1323:       /* Application has failed to call either png_read_start_image()\n 1324:        * or png_read_update_info() after setting transforms that expand\n 1325         * pixels.  This check added to libpng-1.2.19\n 1326         */\n ....\n 1332  #endif\n 1333  \n 1334: #ifdef PNG_READ_EXPAND_SUPPORTED\n 1335     if (png_ptr->transformations & PNG_EXPAND)\n 1336     {\n ....\n 1353  #endif\n 1354  \n 1355: #ifdef PNG_READ_STRIP_ALPHA_SUPPORTED\n 1356     if (png_ptr->flags & PNG_FLAG_STRIP_ALPHA)\n 1357        png_do_strip_filler(&(png_ptr->row_info), png_ptr->row_buf + 1,\n ....\n 1359  #endif\n 1360  \n 1361: #ifdef PNG_READ_RGB_TO_GRAY_SUPPORTED\n 1362     if (png_ptr->transformations & PNG_RGB_TO_GRAY)\n 1363     {\n ....\n 1409   */\n 1410  \n 1411: #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED\n 1412     /* If gray -> RGB, do so now only if background is non-gray; else do later\n 1413      * for performance reasons\n ....\n 1418  #endif\n 1419  \n 1420: #ifdef PNG_READ_BACKGROUND_SUPPORTED\n 1421     if ((png_ptr->transformations & PNG_BACKGROUND) &&\n 1422        ((png_ptr->num_trans != 0 ) ||\n ....\n 1424        png_do_background(&(png_ptr->row_info), png_ptr->row_buf + 1,\n 1425           &(png_ptr->trans_color), &(png_ptr->background)\n 1426: #ifdef PNG_READ_GAMMA_SUPPORTED\n 1427           , &(png_ptr->background_1),\n 1428           png_ptr->gamma_table, png_ptr->gamma_from_1,\n ....\n 1434  #endif\n 1435  \n 1436: #ifdef PNG_READ_GAMMA_SUPPORTED\n 1437     if ((png_ptr->transformations & PNG_GAMMA) &&\n 1438: #ifdef PNG_READ_BACKGROUND_SUPPORTED\n 1439         !((png_ptr->transformations & PNG_BACKGROUND) &&\n 1440         ((png_ptr->num_trans != 0) ||\n ....\n 1447  #endif\n 1448  \n 1449: #ifdef PNG_READ_16_TO_8_SUPPORTED\n 1450     if (png_ptr->transformations & PNG_16_TO_8)\n 1451        png_do_chop(&(png_ptr->row_info), png_ptr->row_buf + 1);\n 1452  #endif\n 1453  \n 1454: #ifdef PNG_READ_DITHER_SUPPORTED\n 1455     if (png_ptr->transformations & PNG_DITHER)\n 1456     {\n ....\n 1462  #endif\n 1463  \n 1464: #ifdef PNG_READ_INVERT_SUPPORTED\n 1465     if (png_ptr->transformations & PNG_INVERT_MONO)\n 1466        png_do_invert(&(png_ptr->row_info), png_ptr->row_buf + 1);\n 1467  #endif\n 1468  \n 1469: #ifdef PNG_READ_SHIFT_SUPPORTED\n 1470     if (png_ptr->transformations & PNG_SHIFT)\n 1471        png_do_unshift(&(png_ptr->row_info), png_ptr->row_buf + 1,\n ....\n 1473  #endif\n 1474  \n 1475: #ifdef PNG_READ_PACK_SUPPORTED\n 1476     if (png_ptr->transformations & PNG_PACK)\n 1477        png_do_unpack(&(png_ptr->row_info), png_ptr->row_buf + 1);\n 1478  #endif\n 1479  \n 1480: #ifdef PNG_READ_BGR_SUPPORTED\n 1481     if (png_ptr->transformations & PNG_BGR)\n 1482        png_do_bgr(&(png_ptr->row_info), png_ptr->row_buf + 1);\n 1483  #endif\n 1484  \n 1485: #ifdef PNG_READ_PACKSWAP_SUPPORTED\n 1486     if (png_ptr->transformations & PNG_PACKSWAP)\n 1487        png_do_packswap(&(png_ptr->row_info), png_ptr->row_buf + 1);\n 1488  #endif\n 1489  \n 1490: #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED\n 1491     /* If gray -> RGB, do so now only if we did not do so above */\n 1492     if ((png_ptr->transformations & PNG_GRAY_TO_RGB) &&\n ....\n 1495  #endif\n 1496  \n 1497: #ifdef PNG_READ_FILLER_SUPPORTED\n 1498     if (png_ptr->transformations & PNG_FILLER)\n 1499:       png_do_read_filler(&(png_ptr->row_info), png_ptr->row_buf + 1,\n 1500           (png_uint_32)png_ptr->filler, png_ptr->flags);\n 1501  #endif\n 1502  \n 1503: #ifdef PNG_READ_INVERT_ALPHA_SUPPORTED\n 1504     if (png_ptr->transformations & PNG_INVERT_ALPHA)\n 1505:       png_do_read_invert_alpha(&(png_ptr->row_info), png_ptr->row_buf + 1);\n 1506  #endif\n 1507  \n 1508: #ifdef PNG_READ_SWAP_ALPHA_SUPPORTED\n 1509     if (png_ptr->transformations & PNG_SWAP_ALPHA)\n 1510:       png_do_read_swap_alpha(&(png_ptr->row_info), png_ptr->row_buf + 1);\n 1511  #endif\n 1512  \n 1513: #ifdef PNG_READ_SWAP_SUPPORTED\n 1514     if (png_ptr->transformations & PNG_SWAP_BYTES)\n 1515        png_do_swap(&(png_ptr->row_info), png_ptr->row_buf + 1);\n 1516  #endif\n 1517  \n 1518: #ifdef PNG_READ_USER_TRANSFORM_SUPPORTED\n 1519     if (png_ptr->transformations & PNG_USER_TRANSFORM)\n 1520      {\n 1521:       if (png_ptr->read_user_transform_fn != NULL)\n 1522:          (*(png_ptr->read_user_transform_fn)) /* User read transform function */\n 1523              (png_ptr,                    /* png_ptr */\n 1524                 &(png_ptr->row_info),     /* row_info: */\n ....\n 1545  }\n 1546  \n 1547: #ifdef PNG_READ_PACK_SUPPORTED\n 1548  /* Unpack pixels of 1, 2, or 4 bits per pixel into 1 byte per pixel,\n 1549   * without changing the actual values.  Thus, if you had a row with\n ....\n 1635  #endif\n 1636  \n 1637: #ifdef PNG_READ_SHIFT_SUPPORTED\n 1638  /* Reverse the effects of png_do_shift.  This routine merely shifts the\n 1639   * pixels back to their significant bits values.  Thus, if you have\n ....\n 1746  #endif\n 1747  \n 1748: #ifdef PNG_READ_16_TO_8_SUPPORTED\n 1749  /* Chop rows of bit depth 16 down to 8 */\n 1750  void /* PRIVATE */\n ....\n 1762        for (i = 0; i<istop; i++, sp += 2, dp++)\n 1763        {\n 1764: #ifdef PNG_READ_16_TO_8_ACCURATE_SCALE_SUPPORTED\n 1765        /* This does a more accurate scaling of the 16-bit color\n 1766         * value, rather than a simple low-byte truncation.\n ....\n 1801  #endif\n 1802  \n 1803: #ifdef PNG_READ_SWAP_ALPHA_SUPPORTED\n 1804  void /* PRIVATE */\n 1805: png_do_read_swap_alpha(png_row_infop row_info, png_bytep row)\n 1806  {\n 1807:    png_debug(1, \"in png_do_read_swap_alpha\");\n 1808  \n 1809     {\n ....\n 1891  #endif\n 1892  \n 1893: #ifdef PNG_READ_INVERT_ALPHA_SUPPORTED\n 1894  void /* PRIVATE */\n 1895: png_do_read_invert_alpha(png_row_infop row_info, png_bytep row)\n 1896  {\n 1897:    png_debug(1, \"in png_do_read_invert_alpha\");\n 1898  \n 1899     {\n ....\n 1987  #endif\n 1988  \n 1989: #ifdef PNG_READ_FILLER_SUPPORTED\n 1990  /* Add filler channel if we have RGB color */\n 1991  void /* PRIVATE */\n 1992: png_do_read_filler(png_row_infop row_info, png_bytep row,\n 1993     png_uint_32 filler, png_uint_32 flags)\n 1994  {\n ....\n 1999     png_byte lo_filler = (png_byte)(filler & 0xff);\n 2000  \n 2001:    png_debug(1, \"in png_do_read_filler\");\n 2002  \n 2003     if (\n ....\n 2161  #endif\n 2162  \n 2163: #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED\n 2164  /* Expand grayscale files to RGB, with or without alpha */\n 2165  void /* PRIVATE */\n ....\n 2242  #endif\n 2243  \n 2244: #ifdef PNG_READ_RGB_TO_GRAY_SUPPORTED\n 2245  /* Reduce RGB files to grayscale, with or without alpha\n 2246   * using the equation given in Poynton's ColorFAQ at\n ....\n 2286           if (row_info->bit_depth == 8)\n 2287           {\n 2288: #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n 2289              if (png_ptr->gamma_from_1 != NULL && png_ptr->gamma_to_1 != NULL)\n 2290              {\n ....\n 2330           else /* RGB bit_depth == 16 */\n 2331           {\n 2332: #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n 2333              if (png_ptr->gamma_16_to_1 != NULL &&\n 2334                  png_ptr->gamma_16_from_1 != NULL)\n ....\n 2392           if (row_info->bit_depth == 8)\n 2393           {\n 2394: #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n 2395              if (png_ptr->gamma_from_1 != NULL && png_ptr->gamma_to_1 != NULL)\n 2396              {\n ....\n 2428           else /* RGBA bit_depth == 16 */\n 2429           {\n 2430: #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n 2431              if (png_ptr->gamma_16_to_1 != NULL &&\n 2432                  png_ptr->gamma_16_from_1 != NULL)\n ....\n 2553  \n 2554  \n 2555: #ifdef PNG_READ_BACKGROUND_SUPPORTED\n 2556  /* Replace any alpha or transparency with the supplied background color.\n 2557:  * \"background\" is already in the screen gamma, while \"background_1\" is\n 2558:  * at a gamma of 1.0.  Paletted files have already been taken care of.\n 2559   */\n 2560  void /* PRIVATE */\n 2561  png_do_background(png_row_infop row_info, png_bytep row,\n 2562     png_color_16p trans_color, png_color_16p background\n 2563: #ifdef PNG_READ_GAMMA_SUPPORTED\n 2564     , png_color_16p background_1,\n 2565     png_bytep gamma_table, png_bytep gamma_from_1, png_bytep gamma_to_1,\n ....\n 2611                 case 2:\n 2612                 {\n 2613: #ifdef PNG_READ_GAMMA_SUPPORTED\n 2614                    if (gamma_table != NULL)\n 2615                    {\n ....\n 2668                 case 4:\n 2669                 {\n 2670: #ifdef PNG_READ_GAMMA_SUPPORTED\n 2671                    if (gamma_table != NULL)\n 2672                    {\n ....\n 2725                 case 8:\n 2726                 {\n 2727: #ifdef PNG_READ_GAMMA_SUPPORTED\n 2728                    if (gamma_table != NULL)\n 2729                    {\n ....\n 2758                 case 16:\n 2759                 {\n 2760: #ifdef PNG_READ_GAMMA_SUPPORTED\n 2761                    if (gamma_16 != NULL)\n 2762                    {\n ....\n 2769                          if (v == trans_color->gray)\n 2770                          {\n 2771:                            /* Background is already in screen gamma */\n 2772                             *sp = (png_byte)((background->gray >> 8) & 0xff);\n 2773                             *(sp + 1) = (png_byte)(background->gray & 0xff);\n ....\n 2807              if (row_info->bit_depth == 8)\n 2808              {\n 2809: #ifdef PNG_READ_GAMMA_SUPPORTED\n 2810                 if (gamma_table != NULL)\n 2811                 {\n ....\n 2848              else /* if (row_info->bit_depth == 16) */\n 2849              {\n 2850: #ifdef PNG_READ_GAMMA_SUPPORTED\n 2851                 if (gamma_16 != NULL)\n 2852                 {\n ....\n 2860                          b == trans_color->blue)\n 2861                       {\n 2862:                         /* Background is already in screen gamma */\n 2863                          *sp = (png_byte)((background->red >> 8) & 0xff);\n 2864                          *(sp + 1) = (png_byte)(background->red & 0xff);\n ....\n 2912              if (row_info->bit_depth == 8)\n 2913              {\n 2914: #ifdef PNG_READ_GAMMA_SUPPORTED\n 2915                 if (gamma_to_1 != NULL && gamma_from_1 != NULL &&\n 2916                     gamma_table != NULL)\n ....\n 2928                       else if (a == 0)\n 2929                       {\n 2930:                         /* Background is already in screen gamma */\n 2931                          *dp = (png_byte)background->gray;\n 2932                       }\n ....\n 2954                          *dp = *sp;\n 2955                       }\n 2956: #ifdef PNG_READ_GAMMA_SUPPORTED\n 2957                       else if (a == 0)\n 2958                       {\n ....\n 2971              else /* if (png_ptr->bit_depth == 16) */\n 2972              {\n 2973: #ifdef PNG_READ_GAMMA_SUPPORTED\n 2974                 if (gamma_16 != NULL && gamma_16_from_1 != NULL &&\n 2975                     gamma_16_to_1 != NULL)\n ....\n 2989                          *(dp + 1) = (png_byte)(v & 0xff);\n 2990                       }\n 2991: #ifdef PNG_READ_GAMMA_SUPPORTED\n 2992                       else if (a == 0)\n 2993  #else\n ....\n 2995  #endif\n 2996                       {\n 2997:                         /* Background is already in screen gamma */\n 2998                          *dp = (png_byte)((background->gray >> 8) & 0xff);\n 2999                          *(dp + 1) = (png_byte)(background->gray & 0xff);\n 3000                       }\n 3001: #ifdef PNG_READ_GAMMA_SUPPORTED\n 3002                       else\n 3003                       {\n ....\n 3025                          png_memcpy(dp, sp, 2);\n 3026                       }\n 3027: #ifdef PNG_READ_GAMMA_SUPPORTED\n 3028                       else if (a == 0)\n 3029  #else\n ....\n 3034                          *(dp + 1) = (png_byte)(background->gray & 0xff);\n 3035                       }\n 3036: #ifdef PNG_READ_GAMMA_SUPPORTED\n 3037                       else\n 3038                       {\n ....\n 3055              if (row_info->bit_depth == 8)\n 3056              {\n 3057: #ifdef PNG_READ_GAMMA_SUPPORTED\n 3058                 if (gamma_to_1 != NULL && gamma_from_1 != NULL &&\n 3059                     gamma_table != NULL)\n ....\n 3073                       else if (a == 0)\n 3074                       {\n 3075:                         /* Background is already in screen gamma */\n 3076                          *dp = (png_byte)background->red;\n 3077                          *(dp + 1) = (png_byte)background->green;\n ....\n 3128              else /* if (row_info->bit_depth == 16) */\n 3129              {\n 3130: #ifdef PNG_READ_GAMMA_SUPPORTED\n 3131                 if (gamma_16 != NULL && gamma_16_from_1 != NULL &&\n 3132                     gamma_16_to_1 != NULL)\n ....\n 3154                       else if (a == 0)\n 3155                       {\n 3156:                         /* Background is already in screen gamma */\n 3157                          *dp = (png_byte)((background->red >> 8) & 0xff);\n 3158                          *(dp + 1) = (png_byte)(background->red & 0xff);\n ....\n 3245  #endif\n 3246  \n 3247: #ifdef PNG_READ_GAMMA_SUPPORTED\n 3248  /* Gamma correct the image, avoiding the alpha channel.  Make sure\n 3249   * you do this after you deal with the transparency issue on grayscale\n ....\n 3434  #endif\n 3435  \n 3436: #ifdef PNG_READ_EXPAND_SUPPORTED\n 3437  /* Expands a palette row to an RGB or RGBA row depending\n 3438   * upon whether you supply trans and num_trans.\n ....\n 3579  }\n 3580  \n 3581: /* If the bit depth < 8, it is expanded to 8.  Also, if the already\n 3582   * expanded transparency value is supplied, an alpha channel is built.\n 3583   */\n ....\n 3791  #endif\n 3792  \n 3793: #ifdef PNG_READ_DITHER_SUPPORTED\n 3794  void /* PRIVATE */\n 3795  png_do_dither(png_row_infop row_info, png_bytep row,\n ....\n 3881  \n 3882  #ifdef PNG_FLOATING_POINT_SUPPORTED\n 3883: #ifdef PNG_READ_GAMMA_SUPPORTED\n 3884  static PNG_CONST int png_gamma_shift[] =\n 3885     {0x10, 0x21, 0x42, 0x84, 0x110, 0x248, 0x550, 0xff0, 0x00};\n ....\n 3944       }\n 3945  \n 3946: #if defined(PNG_READ_BACKGROUND_SUPPORTED) || \\\n 3947:    defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)\n 3948       if (png_ptr->transformations & ((PNG_BACKGROUND) | PNG_RGB_TO_GRAY))\n 3949       {\n ....\n 3977          }\n 3978       }\n 3979: #endif /* PNG_READ_BACKGROUND_SUPPORTED || PNG_RGB_TO_GRAY_SUPPORTED */\n 3980    }\n 3981    else\n ....\n 4082       }\n 4083  \n 4084: #if defined(PNG_READ_BACKGROUND_SUPPORTED) || \\\n 4085:    defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)\n 4086       if (png_ptr->transformations & (PNG_BACKGROUND | PNG_RGB_TO_GRAY))\n 4087       {\n ....\n 4132          }\n 4133       }\n 4134: #endif /* PNG_READ_BACKGROUND_SUPPORTED || PNG_RGB_TO_GRAY_SUPPORTED */\n 4135    }\n 4136  }\n ....\n 4142  /* Undoes intrapixel differencing  */\n 4143  void /* PRIVATE */\n 4144: png_do_read_intrapixel(png_row_infop row_info, png_bytep row)\n 4145  {\n 4146:    png_debug(1, \"in png_do_read_intrapixel\");\n 4147  \n 4148     if (\n ....\n 4201  }\n 4202  #endif /* PNG_MNG_FEATURES_SUPPORTED */\n 4203: #endif /* PNG_READ_SUPPORTED */\n 4204  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngrutil.c:\n    1  \n    2: /* pngrutil.c - utilities to read a PNG file\n    3   *\n    4   * Last changed in libpng 1.4.1 [February 25, 2010]\n    .\n   12   *\n   13   * This file contains routines that are only called from within\n   14:  * libpng itself during the course of reading an image.\n   15   */\n   16  \n   17  #define PNG_NO_PEDANTIC_WARNINGS\n   18  #include \"png.h\"\n   19: #ifdef PNG_READ_SUPPORTED\n   20  #include \"pngpriv.h\"\n   21  \n   ..\n   29     return (i);\n   30  }\n   31: #ifndef PNG_USE_READ_MACROS\n   32  /* Grab an unsigned 32-bit integer from a buffer in big-endian format. */\n   33  png_uint_32 PNGAPI\n   ..\n   66     return (i);\n   67  }\n   68: #endif /* PNG_USE_READ_MACROS */\n   69  \n   70: /* Read the chunk header (length + type name).\n   71   * Put the type name into png_ptr->chunk_name, and return the length.\n   72   */\n   73  png_uint_32 /* PRIVATE */\n   74: png_read_chunk_header(png_structp png_ptr)\n   75  {\n   76     png_byte buf[8];\n   ..\n   78  \n   79  #ifdef PNG_IO_STATE_SUPPORTED\n   80:    /* Inform the I/O callback that the chunk header is being read.\n   81      * PNG_IO_CHUNK_HDR requires a single I/O call.\n   82      */\n   83:    png_ptr->io_state = PNG_IO_READING | PNG_IO_CHUNK_HDR;\n   84  #endif\n   85  \n   86:    /* Read the length and the chunk name */\n   87:    png_read_data(png_ptr, buf, 8);\n   88     length = png_get_uint_31(png_ptr, buf);\n   89  \n   ..\n   91     png_memcpy(png_ptr->chunk_name, buf + 4, 4);\n   92  \n   93:    png_debug2(0, \"Reading %s chunk, length = %lu\",\n   94        png_ptr->chunk_name, length);\n   95  \n   ..\n  102  \n  103  #ifdef PNG_IO_STATE_SUPPORTED\n  104:    /* Inform the I/O callback that chunk data will (possibly) be read.\n  105      * PNG_IO_CHUNK_DATA does NOT require a specific number of I/O calls.\n  106      */\n  107:    png_ptr->io_state = PNG_IO_READING | PNG_IO_CHUNK_DATA;\n  108  #endif\n  109  \n  ...\n  111  }\n  112  \n  113: /* Read data, and (optionally) run it through the CRC. */\n  114  void /* PRIVATE */\n  115: png_crc_read(png_structp png_ptr, png_bytep buf, png_size_t length)\n  116  {\n  117     if (png_ptr == NULL)\n  118        return;\n  119:    png_read_data(png_ptr, buf, length);\n  120     png_calculate_crc(png_ptr, buf, length);\n  121  }\n  122  \n  123  /* Optionally skip data and then check the CRC.  Depending on whether we\n  124:  * are reading a ancillary or critical chunk, and how the program has set\n  125   * things up, we may calculate the CRC on the data and print a message.\n  126   * Returns '1' if there was a CRC error, '0' otherwise.\n  ...\n  134     for (i = (png_size_t)skip; i > istop; i -= istop)\n  135     {\n  136:       png_crc_read(png_ptr, png_ptr->zbuf, png_ptr->zbuf_size);\n  137     }\n  138     if (i)\n  139     {\n  140:       png_crc_read(png_ptr, png_ptr->zbuf, i);\n  141     }\n  142  \n  ...\n  162  \n  163  /* Compare the CRC stored in the PNG file with that calculated by libpng from\n  164:  * the data it has read thus far.\n  165   */\n  166  int /* PRIVATE */\n  ...\n  184  \n  185  #ifdef PNG_IO_STATE_SUPPORTED\n  186:    /* Inform the I/O callback that the chunk CRC is being read */\n  187     /* PNG_IO_CHUNK_CRC requires the I/O to be done at once */\n  188:    png_ptr->io_state = PNG_IO_READING | PNG_IO_CHUNK_CRC;\n  189  #endif\n  190  \n  191:    png_read_data(png_ptr, crc_bytes, 4);\n  192  \n  193     if (need_crc)\n  ...\n  200  }\n  201  \n  202: #if defined(PNG_READ_zTXt_SUPPORTED) || defined(PNG_READ_iTXt_SUPPORTED) || \\\n  203:     defined(PNG_READ_iCCP_SUPPORTED)\n  204  static png_size_t\n  205  png_inflate(png_structp png_ptr, const png_byte *data, png_size_t size,\n  ...\n  331  \n  332        /* If the size is zero either there was an error and a message\n  333:        * has already been output (warning) or the size really is zero\n  334         * and we have nothing to do - the code will exit through the\n  335         * error case below.\n  ...\n  404  #endif\n  405  \n  406: /* Read and check the IDHR chunk */\n  407  void /* PRIVATE */\n  408  png_handle_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n  ...\n  424     png_ptr->mode |= PNG_HAVE_IHDR;\n  425  \n  426:    png_crc_read(png_ptr, buf, 13);\n  427     png_crc_finish(png_ptr, 0);\n  428  \n  ...\n  478  }\n  479  \n  480: /* Read and check the palette */\n  481  void /* PRIVATE */\n  482  png_handle_PLTE(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n  ...\n  512        return;\n  513     }\n  514: #ifndef PNG_READ_OPT_PLTE_SUPPORTED\n  515     if (png_ptr->color_type != PNG_COLOR_TYPE_PALETTE)\n  516     {\n  ...\n  542        png_byte buf[3];\n  543  \n  544:       png_crc_read(png_ptr, buf, 3);\n  545        pal_ptr->red = buf[0];\n  546        pal_ptr->green = buf[1];\n  ...\n  552        png_byte buf[3];\n  553  \n  554:       png_crc_read(png_ptr, buf, 3);\n  555        /* Don't depend upon png_color being any order */\n  556        palette[i].red = buf[0];\n  ...\n  565      * we will act as though it is.\n  566      */\n  567: #ifndef PNG_READ_OPT_PLTE_SUPPORTED\n  568     if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)\n  569  #endif\n  ...\n  571        png_crc_finish(png_ptr, 0);\n  572     }\n  573: #ifndef PNG_READ_OPT_PLTE_SUPPORTED\n  574     else if (png_crc_error(png_ptr))  /* Only if we have a CRC error */\n  575     {\n  ...\n  600     png_set_PLTE(png_ptr, info_ptr, palette, num);\n  601  \n  602: #ifdef PNG_READ_tRNS_SUPPORTED\n  603     if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)\n  604     {\n  ...\n  642  }\n  643  \n  644: #ifdef PNG_READ_gAMA_SUPPORTED\n  645  void /* PRIVATE */\n  646  png_handle_gAMA(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n  ...\n  667  \n  668     if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_gAMA)\n  669: #ifdef PNG_READ_sRGB_SUPPORTED\n  670        && !(info_ptr->valid & PNG_INFO_sRGB)\n  671  #endif\n  ...\n  684     }\n  685  \n  686:    png_crc_read(png_ptr, buf, 4);\n  687     if (png_crc_finish(png_ptr, 0))\n  688        return;\n  ...\n  697        }\n  698  \n  699: #ifdef PNG_READ_sRGB_SUPPORTED\n  700     if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_sRGB))\n  701        if (PNG_OUT_OF_RANGE(igamma, 45500L, 500))\n  ...\n  708           return;\n  709        }\n  710: #endif /* PNG_READ_sRGB_SUPPORTED */\n  711  \n  712  #ifdef PNG_FLOATING_POINT_SUPPORTED\n  713     file_gamma = (float)igamma / (float)100000.0;\n  714: #  ifdef PNG_READ_GAMMA_SUPPORTED\n  715       png_ptr->gamma = file_gamma;\n  716  #  endif\n  ...\n  723  #endif\n  724  \n  725: #ifdef PNG_READ_sBIT_SUPPORTED\n  726  void /* PRIVATE */\n  727  png_handle_sBIT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n  ...\n  766     }\n  767  \n  768:    png_crc_read(png_ptr, buf, truelen);\n  769     if (png_crc_finish(png_ptr, 0))\n  770        return;\n  ...\n  789  #endif\n  790  \n  791: #ifdef PNG_READ_cHRM_SUPPORTED\n  792  void /* PRIVATE */\n  793  png_handle_cHRM(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n  ...\n  817  \n  818     if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_cHRM)\n  819: #ifdef PNG_READ_sRGB_SUPPORTED\n  820        && !(info_ptr->valid & PNG_INFO_sRGB)\n  821  #endif\n  ...\n  834     }\n  835  \n  836:    png_crc_read(png_ptr, buf, 32);\n  837     if (png_crc_finish(png_ptr, 0))\n  838        return;\n  ...\n  869  #endif\n  870  \n  871: #ifdef PNG_READ_sRGB_SUPPORTED\n  872     if ((info_ptr != NULL) && (info_ptr->valid & PNG_INFO_sRGB))\n  873        {\n  ...\n  899           return;\n  900        }\n  901: #endif /* PNG_READ_sRGB_SUPPORTED */\n  902  \n  903  #ifdef PNG_FLOATING_POINT_SUPPORTED\n  ...\n  913  #endif\n  914  \n  915: #ifdef PNG_READ_sRGB_SUPPORTED\n  916  void /* PRIVATE */\n  917  png_handle_sRGB(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n  ...\n  948     }\n  949  \n  950:    png_crc_read(png_ptr, buf, 1);\n  951     if (png_crc_finish(png_ptr, 0))\n  952        return;\n  ...\n  960     }\n  961  \n  962: #if defined(PNG_READ_gAMA_SUPPORTED) && defined(PNG_READ_GAMMA_SUPPORTED)\n  963     if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_gAMA))\n  964     {\n  ...\n  987        }\n  988     }\n  989: #endif /* PNG_READ_gAMA_SUPPORTED */\n  990  \n  991: #ifdef PNG_READ_cHRM_SUPPORTED\n  992  #ifdef PNG_FIXED_POINT_SUPPORTED\n  993     if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_cHRM))\n  ...\n 1005           }\n 1006  #endif /* PNG_FIXED_POINT_SUPPORTED */\n 1007: #endif /* PNG_READ_cHRM_SUPPORTED */\n 1008  \n 1009     png_set_sRGB_gAMA_and_cHRM(png_ptr, info_ptr, intent);\n 1010  }\n 1011: #endif /* PNG_READ_sRGB_SUPPORTED */\n 1012  \n 1013: #ifdef PNG_READ_iCCP_SUPPORTED\n 1014  void /* PRIVATE */\n 1015  png_handle_iCCP(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n ....\n 1056     png_ptr->chunkdata = (png_charp)png_malloc(png_ptr, length + 1);\n 1057     slength = (png_size_t)length;\n 1058:    png_crc_read(png_ptr, (png_bytep)png_ptr->chunkdata, slength);\n 1059  \n 1060     if (png_crc_finish(png_ptr, skip))\n ....\n 1141     png_ptr->chunkdata = NULL;\n 1142  }\n 1143: #endif /* PNG_READ_iCCP_SUPPORTED */\n 1144  \n 1145: #ifdef PNG_READ_sPLT_SUPPORTED\n 1146  void /* PRIVATE */\n 1147  png_handle_sPLT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n ....\n 1198     png_ptr->chunkdata = (png_charp)png_malloc(png_ptr, length + 1);\n 1199     slength = (png_size_t)length;\n 1200:    png_crc_read(png_ptr, (png_bytep)png_ptr->chunkdata, slength);\n 1201  \n 1202     if (png_crc_finish(png_ptr, skip))\n ....\n 1304     png_free(png_ptr, new_palette.entries);\n 1305  }\n 1306: #endif /* PNG_READ_sPLT_SUPPORTED */\n 1307  \n 1308: #ifdef PNG_READ_tRNS_SUPPORTED\n 1309  void /* PRIVATE */\n 1310  png_handle_tRNS(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 1311  {\n 1312:    png_byte readbuf[PNG_MAX_PALETTE_LENGTH];\n 1313  \n 1314     png_debug(1, \"in png_handle_tRNS\");\n ....\n 1340        }\n 1341  \n 1342:       png_crc_read(png_ptr, buf, 2);\n 1343        png_ptr->num_trans = 1;\n 1344        png_ptr->trans_color.gray = png_get_uint_16(buf);\n ....\n 1354           return;\n 1355        }\n 1356:       png_crc_read(png_ptr, buf, (png_size_t)length);\n 1357        png_ptr->num_trans = 1;\n 1358        png_ptr->trans_color.red = png_get_uint_16(buf);\n ....\n 1380           return;\n 1381        }\n 1382:       png_crc_read(png_ptr, readbuf, (png_size_t)length);\n 1383        png_ptr->num_trans = (png_uint_16)length;\n 1384     }\n ....\n 1396     }\n 1397  \n 1398:    png_set_tRNS(png_ptr, info_ptr, readbuf, png_ptr->num_trans,\n 1399        &(png_ptr->trans_color));\n 1400  }\n 1401  #endif\n 1402  \n 1403: #ifdef PNG_READ_bKGD_SUPPORTED\n 1404  void /* PRIVATE */\n 1405  png_handle_bKGD(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n ....\n 1446     }\n 1447  \n 1448:    png_crc_read(png_ptr, buf, truelen);\n 1449     if (png_crc_finish(png_ptr, 0))\n 1450        return;\n ....\n 1490  #endif\n 1491  \n 1492: #ifdef PNG_READ_hIST_SUPPORTED\n 1493  void /* PRIVATE */\n 1494  png_handle_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 1495  {\n 1496     unsigned int num, i;\n 1497:    png_uint_16 readbuf[PNG_MAX_PALETTE_LENGTH];\n 1498  \n 1499     png_debug(1, \"in png_handle_hIST\");\n ....\n 1533        png_byte buf[2];\n 1534  \n 1535:       png_crc_read(png_ptr, buf, 2);\n 1536:       readbuf[i] = png_get_uint_16(buf);\n 1537     }\n 1538  \n ....\n 1540        return;\n 1541  \n 1542:    png_set_hIST(png_ptr, info_ptr, readbuf);\n 1543  }\n 1544  #endif\n 1545  \n 1546: #ifdef PNG_READ_pHYs_SUPPORTED\n 1547  void /* PRIVATE */\n 1548  png_handle_pHYs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n ....\n 1576     }\n 1577  \n 1578:    png_crc_read(png_ptr, buf, 9);\n 1579     if (png_crc_finish(png_ptr, 0))\n 1580        return;\n ....\n 1587  #endif\n 1588  \n 1589: #ifdef PNG_READ_oFFs_SUPPORTED\n 1590  void /* PRIVATE */\n 1591  png_handle_oFFs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n ....\n 1619     }\n 1620  \n 1621:    png_crc_read(png_ptr, buf, 9);\n 1622     if (png_crc_finish(png_ptr, 0))\n 1623        return;\n ....\n 1630  #endif\n 1631  \n 1632: #ifdef PNG_READ_pCAL_SUPPORTED\n 1633: /* Read the pCAL chunk (described in the PNG Extensions document) */\n 1634  void /* PRIVATE */\n 1635  png_handle_pCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n ....\n 1659     }\n 1660  \n 1661:    png_debug1(2, \"Allocating and reading pCAL chunk data (%lu bytes)\",\n 1662        length + 1);\n 1663     png_free(png_ptr, png_ptr->chunkdata);\n ....\n 1669       }\n 1670     slength = (png_size_t)length;\n 1671:    png_crc_read(png_ptr, (png_bytep)png_ptr->chunkdata, slength);\n 1672  \n 1673     if (png_crc_finish(png_ptr, 0))\n ....\n 1696     }\n 1697  \n 1698:    png_debug(3, \"Reading pCAL X0, X1, type, nparams, and units\");\n 1699     X0 = png_get_int_32((png_bytep)buf+1);\n 1700     X1 = png_get_int_32((png_bytep)buf+5);\n ....\n 1740        buf++; /* Skip the null string terminator from previous parameter. */\n 1741  \n 1742:       png_debug1(3, \"Reading pCAL parameter %d\", i);\n 1743        for (params[i] = buf; buf <= endptr && *buf != 0x00; buf++)\n 1744           /* Empty loop to move past each parameter string */ ;\n ....\n 1764  #endif\n 1765  \n 1766: #ifdef PNG_READ_sCAL_SUPPORTED\n 1767: /* Read the sCAL chunk */\n 1768  void /* PRIVATE */\n 1769  png_handle_sCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n ....\n 1797     }\n 1798  \n 1799:    png_debug1(2, \"Allocating and reading sCAL chunk data (%lu bytes)\",\n 1800        length + 1);\n 1801     png_ptr->chunkdata = (png_charp)png_malloc_warn(png_ptr, length + 1);\n ....\n 1806     }\n 1807     slength = (png_size_t)length;\n 1808:    png_crc_read(png_ptr, (png_bytep)png_ptr->chunkdata, slength);\n 1809  \n 1810     if (png_crc_finish(png_ptr, 0))\n ....\n 1907  #endif\n 1908  \n 1909: #ifdef PNG_READ_tIME_SUPPORTED\n 1910  void /* PRIVATE */\n 1911  png_handle_tIME(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n ....\n 1935     }\n 1936  \n 1937:    png_crc_read(png_ptr, buf, 7);\n 1938     if (png_crc_finish(png_ptr, 0))\n 1939        return;\n ....\n 1950  #endif\n 1951  \n 1952: #ifdef PNG_READ_tEXt_SUPPORTED\n 1953  /* Note: this does not properly handle chunks that are > 64K under DOS */\n 1954  void /* PRIVATE */\n ....\n 2005     }\n 2006     slength = (png_size_t)length;\n 2007:    png_crc_read(png_ptr, (png_bytep)png_ptr->chunkdata, slength);\n 2008  \n 2009     if (png_crc_finish(png_ptr, skip))\n ....\n 2053  #endif\n 2054  \n 2055: #ifdef PNG_READ_zTXt_SUPPORTED\n 2056  /* Note: this does not correctly handle chunks that are > 64K under DOS */\n 2057  void /* PRIVATE */\n ....\n 2108     }\n 2109     slength = (png_size_t)length;\n 2110:    png_crc_read(png_ptr, (png_bytep)png_ptr->chunkdata, slength);\n 2111     if (png_crc_finish(png_ptr, 0))\n 2112     {\n ....\n 2173  #endif\n 2174  \n 2175: #ifdef PNG_READ_iTXt_SUPPORTED\n 2176  /* Note: this does not correctly handle chunks that are > 64K under DOS */\n 2177  void /* PRIVATE */\n ....\n 2229     }\n 2230     slength = (png_size_t)length;\n 2231:    png_crc_read(png_ptr, (png_bytep)png_ptr->chunkdata, slength);\n 2232     if (png_crc_finish(png_ptr, 0))\n 2233     {\n ....\n 2360        if (png_handle_as_unknown(png_ptr, png_ptr->chunk_name) !=\n 2361             PNG_HANDLE_CHUNK_ALWAYS\n 2362: #ifdef PNG_READ_USER_CHUNKS_SUPPORTED\n 2363:            && png_ptr->read_user_chunk_fn == NULL\n 2364  #endif\n 2365          )\n ....\n 2368     }\n 2369  \n 2370: #ifdef PNG_READ_UNKNOWN_CHUNKS_SUPPORTED\n 2371     if ((png_ptr->flags & PNG_FLAG_KEEP_UNKNOWN_CHUNKS)\n 2372: #ifdef PNG_READ_USER_CHUNKS_SUPPORTED\n 2373:        || (png_ptr->read_user_chunk_fn != NULL)\n 2374  #endif\n 2375          )\n ....\n 2394         {\n 2395           png_ptr->unknown_chunk.data = (png_bytep)png_malloc(png_ptr, length);\n 2396:          png_crc_read(png_ptr, (png_bytep)png_ptr->unknown_chunk.data, length);\n 2397         }\n 2398: #ifdef PNG_READ_USER_CHUNKS_SUPPORTED\n 2399:        if (png_ptr->read_user_chunk_fn != NULL)\n 2400         {\n 2401            /* Callback to user unknown chunk handler */\n 2402            int ret;\n 2403:           ret = (*(png_ptr->read_user_chunk_fn))\n 2404              (png_ptr, &png_ptr->unknown_chunk);\n 2405            if (ret < 0)\n ....\n 2429     png_crc_finish(png_ptr, skip);\n 2430  \n 2431: #ifndef PNG_READ_USER_CHUNKS_SUPPORTED\n 2432     info_ptr = info_ptr; /* Quiet compiler warnings about unused info_ptr */\n 2433  #endif\n ....\n 2453  }\n 2454  \n 2455: /* Combines the row recently read in with the existing pixels in the\n 2456     row.  This routine takes care of alpha and transparency if requested.\n 2457     This routine also handles the two methods of progressive display\n ....\n 2487              png_uint_32 row_width = png_ptr->width;\n 2488  \n 2489: #ifdef PNG_READ_PACKSWAP_SUPPORTED\n 2490              if (png_ptr->transformations & PNG_PACKSWAP)\n 2491              {\n ....\n 2542              int value;\n 2543  \n 2544: #ifdef PNG_READ_PACKSWAP_SUPPORTED\n 2545              if (png_ptr->transformations & PNG_PACKSWAP)\n 2546              {\n ....\n 2594              int value;\n 2595  \n 2596: #ifdef PNG_READ_PACKSWAP_SUPPORTED\n 2597              if (png_ptr->transformations & PNG_PACKSWAP)\n 2598              {\n ....\n 2665  }\n 2666  \n 2667: #ifdef PNG_READ_INTERLACING_SUPPORTED\n 2668  /* OLD pre-1.0.9 interface:\n 2669: void png_do_read_interlace(png_row_infop row_info, png_bytep row, int pass,\n 2670     png_uint_32 transformations)\n 2671   */\n 2672  void /* PRIVATE */\n 2673: png_do_read_interlace(png_structp png_ptr)\n 2674  {\n 2675     png_row_infop row_info = &(png_ptr->row_info);\n ....\n 2681     PNG_CONST int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};\n 2682  \n 2683:    png_debug(1, \"in png_do_read_interlace\");\n 2684     if (row != NULL && row_info != NULL)\n 2685     {\n ....\n 2701              int j;\n 2702  \n 2703: #ifdef PNG_READ_PACKSWAP_SUPPORTED\n 2704              if (transformations & PNG_PACKSWAP)\n 2705              {\n ....\n 2754              png_uint_32 i;\n 2755  \n 2756: #ifdef PNG_READ_PACKSWAP_SUPPORTED\n 2757              if (transformations & PNG_PACKSWAP)\n 2758              {\n ....\n 2810              int jstop = png_pass_inc[pass];\n 2811  \n 2812: #ifdef PNG_READ_PACKSWAP_SUPPORTED\n 2813              if (transformations & PNG_PACKSWAP)\n 2814              {\n ....\n 2885        row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth, final_width);\n 2886     }\n 2887: #ifndef PNG_READ_PACKSWAP_SUPPORTED\n 2888     transformations = transformations; /* Silence compiler warning */\n 2889  #endif\n 2890  }\n 2891: #endif /* PNG_READ_INTERLACING_SUPPORTED */\n 2892  \n 2893  void /* PRIVATE */\n 2894: png_read_filter_row(png_structp png_ptr, png_row_infop row_info, png_bytep row,\n 2895     png_bytep prev_row, int filter)\n 2896  {\n 2897:    png_debug(1, \"in png_read_filter_row\");\n 2898     png_debug2(2, \"row = %lu, filter = %d\", png_ptr->row_number, filter);\n 2899     switch (filter)\n ....\n 3014  }\n 3015  \n 3016: #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n 3017  void /* PRIVATE */\n 3018: png_read_finish_row(png_structp png_ptr)\n 3019  {\n 3020: #ifdef PNG_READ_INTERLACING_SUPPORTED\n 3021     /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */\n 3022  \n ....\n 3032     /* Offset to next interlace block in the y direction */\n 3033     PNG_CONST int png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};\n 3034: #endif /* PNG_READ_INTERLACING_SUPPORTED */\n 3035  \n 3036:    png_debug(1, \"in png_read_finish_row\");\n 3037     png_ptr->row_number++;\n 3038     if (png_ptr->row_number < png_ptr->num_rows)\n 3039        return;\n 3040  \n 3041: #ifdef PNG_READ_INTERLACING_SUPPORTED\n 3042     if (png_ptr->interlaced)\n 3043     {\n ....\n 3071           return;\n 3072     }\n 3073: #endif /* PNG_READ_INTERLACING_SUPPORTED */\n 3074  \n 3075     if (!(png_ptr->flags & PNG_FLAG_ZLIB_FINISHED))\n ....\n 3091                 png_crc_finish(png_ptr, 0);\n 3092  \n 3093:                png_read_data(png_ptr, chunk_length, 4);\n 3094                 png_ptr->idat_size = png_get_uint_31(png_ptr, chunk_length);\n 3095                 png_reset_crc(png_ptr);\n 3096:                png_crc_read(png_ptr, png_ptr->chunk_name, 4);\n 3097                 if (png_memcmp(png_ptr->chunk_name, png_IDAT, 4))\n 3098                    png_error(png_ptr, \"Not enough image data\");\n ....\n 3103              if (png_ptr->zbuf_size > png_ptr->idat_size)\n 3104                 png_ptr->zstream.avail_in = (uInt)png_ptr->idat_size;\n 3105:             png_crc_read(png_ptr, png_ptr->zbuf, png_ptr->zstream.avail_in);\n 3106              png_ptr->idat_size -= png_ptr->zstream.avail_in;\n 3107           }\n ....\n 3139     png_ptr->mode |= PNG_AFTER_IDAT;\n 3140  }\n 3141: #endif /* PNG_SEQUENTIAL_READ_SUPPORTED */\n 3142  \n 3143  void /* PRIVATE */\n 3144: png_read_start_row(png_structp png_ptr)\n 3145  {\n 3146: #ifdef PNG_READ_INTERLACING_SUPPORTED\n 3147     /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */\n 3148  \n ....\n 3163     png_size_t row_bytes;\n 3164  \n 3165:    png_debug(1, \"in png_read_start_row\");\n 3166     png_ptr->zstream.avail_in = 0;\n 3167:    png_init_read_transformations(png_ptr);\n 3168: #ifdef PNG_READ_INTERLACING_SUPPORTED\n 3169     if (png_ptr->interlaced)\n 3170     {\n ....\n 3181     }\n 3182     else\n 3183: #endif /* PNG_READ_INTERLACING_SUPPORTED */\n 3184     {\n 3185        png_ptr->num_rows = png_ptr->height;\n ....\n 3188     max_pixel_depth = png_ptr->pixel_depth;\n 3189  \n 3190: #ifdef PNG_READ_PACK_SUPPORTED\n 3191     if ((png_ptr->transformations & PNG_PACK) && png_ptr->bit_depth < 8)\n 3192        max_pixel_depth = 8;\n 3193  #endif\n 3194  \n 3195: #ifdef PNG_READ_EXPAND_SUPPORTED\n 3196     if (png_ptr->transformations & PNG_EXPAND)\n 3197     {\n ....\n 3221  #endif\n 3222  \n 3223: #ifdef PNG_READ_FILLER_SUPPORTED\n 3224     if (png_ptr->transformations & (PNG_FILLER))\n 3225     {\n ....\n 3243  #endif\n 3244  \n 3245: #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED\n 3246     if (png_ptr->transformations & PNG_GRAY_TO_RGB)\n 3247     {\n 3248        if (\n 3249: #ifdef PNG_READ_EXPAND_SUPPORTED\n 3250          (png_ptr->num_trans && (png_ptr->transformations & PNG_EXPAND)) ||\n 3251  #endif\n 3252: #ifdef PNG_READ_FILLER_SUPPORTED\n 3253          (png_ptr->transformations & (PNG_FILLER)) ||\n 3254  #endif\n ....\n 3277  #endif\n 3278  \n 3279: #if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) && \\\n 3280  defined(PNG_USER_TRANSFORM_PTR_SUPPORTED)\n 3281     if (png_ptr->transformations & PNG_USER_TRANSFORM)\n ....\n 3354     png_ptr->flags |= PNG_FLAG_ROW_INIT;\n 3355  }\n 3356: #endif /* PNG_READ_SUPPORTED */\n 3357  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngset.c:\n   11   * and license in png.h\n   12   *\n   13:  * The functions here are used during reads to store data from the file\n   14   * into the info struct, and during writes to store application data\n   15   * into the info struct for writing into the file.  This abstracts the\n   ..\n   19  #define PNG_NO_PEDANTIC_WARNINGS\n   20  #include \"png.h\"\n   21: #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)\n   22  #include \"pngpriv.h\"\n   23  \n   ..\n  351  #endif\n  352  \n  353: #if defined(PNG_READ_sCAL_SUPPORTED) || defined(PNG_WRITE_sCAL_SUPPORTED)\n  354  #ifdef PNG_FLOATING_POINT_SUPPORTED\n  355  void PNGAPI\n  ...\n  968        to->name[png_sizeof(to->name)-1] = '\\0';\n  969        to->size = from->size;\n  970:       /* Note our location in the read or write sequence */\n  971        to->location = (png_byte)(png_ptr->mode & 0xff);\n  972  \n  ...\n 1062  #endif\n 1063  \n 1064: #ifdef PNG_READ_USER_CHUNKS_SUPPORTED\n 1065  void PNGAPI\n 1066: png_set_read_user_chunk_fn(png_structp png_ptr, png_voidp user_chunk_ptr,\n 1067:    png_user_chunk_ptr read_user_chunk_fn)\n 1068  {\n 1069:    png_debug(1, \"in png_set_read_user_chunk_fn\");\n 1070  \n 1071     if (png_ptr == NULL)\n 1072        return;\n 1073  \n 1074:    png_ptr->read_user_chunk_fn = read_user_chunk_fn;\n 1075     png_ptr->user_chunk_ptr = user_chunk_ptr;\n 1076  }\n ....\n 1165  }\n 1166  #endif /* PNG_BENIGN_ERRORS_SUPPORTED */\n 1167: #endif /* PNG_READ_SUPPORTED || PNG_WRITE_SUPPORTED */\n 1168  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngtrans.c:\n    1  \n    2: /* pngtrans.c - transforms the data in a row (used by both readers and writers)\n    3   *\n    4   * Last changed in libpng 1.4.0 [January 3, 2010]\n    .\n   14  #define PNG_NO_PEDANTIC_WARNINGS\n   15  #include \"png.h\"\n   16: #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)\n   17  #include \"pngpriv.h\"\n   18  \n   19: #if defined(PNG_READ_BGR_SUPPORTED) || defined(PNG_WRITE_BGR_SUPPORTED)\n   20  /* Turn on BGR-to-RGB mapping */\n   21  void PNGAPI\n   ..\n   30  #endif\n   31  \n   32: #if defined(PNG_READ_SWAP_SUPPORTED) || defined(PNG_WRITE_SWAP_SUPPORTED)\n   33  /* Turn on 16 bit byte swapping */\n   34  void PNGAPI\n   ..\n   44  #endif\n   45  \n   46: #if defined(PNG_READ_PACK_SUPPORTED) || defined(PNG_WRITE_PACK_SUPPORTED)\n   47  /* Turn on pixel packing */\n   48  void PNGAPI\n   ..\n   61  #endif\n   62  \n   63: #if defined(PNG_READ_PACKSWAP_SUPPORTED)||defined(PNG_WRITE_PACKSWAP_SUPPORTED)\n   64  /* Turn on packed pixel swapping */\n   65  void PNGAPI\n   ..\n   75  #endif\n   76  \n   77: #if defined(PNG_READ_SHIFT_SUPPORTED) || defined(PNG_WRITE_SHIFT_SUPPORTED)\n   78  void PNGAPI\n   79  png_set_shift(png_structp png_ptr, png_color_8p true_bits)\n   ..\n   88  #endif\n   89  \n   90: #if defined(PNG_READ_INTERLACING_SUPPORTED) || \\\n   91      defined(PNG_WRITE_INTERLACING_SUPPORTED)\n   92  int PNGAPI\n   ..\n  105  #endif\n  106  \n  107: #if defined(PNG_READ_FILLER_SUPPORTED) || defined(PNG_WRITE_FILLER_SUPPORTED)\n  108: /* Add a filler byte on read, or remove a filler or alpha byte on write.\n  109   * The filler type has changed in v0.95 to allow future 2-byte fillers\n  110   * for 48-bit input data, as well as to avoid problems with some compilers\n  ...\n  125        png_ptr->flags &= ~PNG_FLAG_FILLER_AFTER;\n  126  \n  127:    /* This should probably go in the \"do_read_filler\" routine.\n  128      * I attempted to do that in libpng-1.0.1a but that caused problems\n  129      * so I restored it in libpng-1.0.2a\n  ...\n  158  #endif\n  159  \n  160: #if defined(PNG_READ_SWAP_ALPHA_SUPPORTED) || \\\n  161      defined(PNG_WRITE_SWAP_ALPHA_SUPPORTED)\n  162  void PNGAPI\n  ...\n  171  #endif\n  172  \n  173: #if defined(PNG_READ_INVERT_ALPHA_SUPPORTED) || \\\n  174      defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)\n  175  void PNGAPI\n  ...\n  184  #endif\n  185  \n  186: #if defined(PNG_READ_INVERT_SUPPORTED) || defined(PNG_WRITE_INVERT_SUPPORTED)\n  187  void PNGAPI\n  188  png_set_invert_mono(png_structp png_ptr)\n  ...\n  246  #endif\n  247  \n  248: #if defined(PNG_READ_SWAP_SUPPORTED) || defined(PNG_WRITE_SWAP_SUPPORTED)\n  249  /* Swaps byte order on 16 bit depth images */\n  250  void /* PRIVATE */\n  ...\n  270  #endif\n  271  \n  272: #if defined(PNG_READ_PACKSWAP_SUPPORTED)||defined(PNG_WRITE_PACKSWAP_SUPPORTED)\n  273  static PNG_CONST png_byte onebppswaptable[256] = {\n  274     0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0,\n  ...\n  402     }\n  403  }\n  404: #endif /* PNG_READ_PACKSWAP_SUPPORTED or PNG_WRITE_PACKSWAP_SUPPORTED */\n  405  \n  406  #if defined(PNG_WRITE_FILLER_SUPPORTED) || \\\n  407:     defined(PNG_READ_STRIP_ALPHA_SUPPORTED)\n  408  /* Remove filler or alpha byte(s) */\n  409  void /* PRIVATE */\n  ...\n  561  #endif\n  562  \n  563: #if defined(PNG_READ_BGR_SUPPORTED) || defined(PNG_WRITE_BGR_SUPPORTED)\n  564  /* Swaps red and blue bytes within a pixel */\n  565  void /* PRIVATE */\n  ...\n  634     }\n  635  }\n  636: #endif /* PNG_READ_BGR_SUPPORTED or PNG_WRITE_BGR_SUPPORTED */\n  637  \n  638: #if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \\\n  639      defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)\n  640  void PNGAPI\n  ...\n  660  /* This function returns a pointer to the user_transform_ptr associated with\n  661   * the user transform functions.  The application should free any memory\n  662:  * associated with this pointer before png_write_destroy and png_read_destroy\n  663   * are called.\n  664   */\n  ...\n  674  #endif\n  675  }\n  676: #endif /* PNG_READ_SUPPORTED || PNG_WRITE_SUPPORTED */\n  677  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngwio.c:\n  197  #endif /* PNG_WRITE_FLUSH_SUPPORTED */\n  198  \n  199:    /* It is an error to read while writing a png file */\n  200:    if (png_ptr->read_data_fn != NULL)\n  201     {\n  202:       png_ptr->read_data_fn = NULL;\n  203        png_warning(png_ptr,\n  204:          \"Attempted to set both read_data_fn and write_data_fn in\");\n  205        png_warning(png_ptr,\n  206:          \"the same structure.  Resetting read_data_fn to NULL\");\n  207     }\n  208  }\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngwrite.c:\n  307  \n  308  /* Writes the end of the PNG file.  If you don't want to write comments or\n  309:  * time information, you can pass NULL for info.  If you already wrote these\n  310   * in png_write_info(), do not write them again here.  If you have long\n  311   * comments, I suggest writing them here, and compressing them.\n  ...\n  674  \n  675        /* Check for transforms that have been set but were defined out */\n  676: #if !defined(PNG_WRITE_INVERT_SUPPORTED) && defined(PNG_READ_INVERT_SUPPORTED)\n  677        if (png_ptr->transformations & PNG_INVERT_MONO)\n  678           png_warning(png_ptr, \"PNG_WRITE_INVERT_SUPPORTED is not defined\");\n  679  #endif\n  680: #if !defined(PNG_WRITE_FILLER_SUPPORTED) && defined(PNG_READ_FILLER_SUPPORTED)\n  681        if (png_ptr->transformations & PNG_FILLER)\n  682           png_warning(png_ptr, \"PNG_WRITE_FILLER_SUPPORTED is not defined\");\n  683  #endif\n  684  #if !defined(PNG_WRITE_PACKSWAP_SUPPORTED) && \\\n  685:     defined(PNG_READ_PACKSWAP_SUPPORTED)\n  686        if (png_ptr->transformations & PNG_PACKSWAP)\n  687           png_warning(png_ptr,\n  688               \"PNG_WRITE_PACKSWAP_SUPPORTED is not defined\");\n  689  #endif\n  690: #if !defined(PNG_WRITE_PACK_SUPPORTED) && defined(PNG_READ_PACK_SUPPORTED)\n  691        if (png_ptr->transformations & PNG_PACK)\n  692           png_warning(png_ptr, \"PNG_WRITE_PACK_SUPPORTED is not defined\");\n  693  #endif\n  694: #if !defined(PNG_WRITE_SHIFT_SUPPORTED) && defined(PNG_READ_SHIFT_SUPPORTED)\n  695        if (png_ptr->transformations & PNG_SHIFT)\n  696           png_warning(png_ptr, \"PNG_WRITE_SHIFT_SUPPORTED is not defined\");\n  697  #endif\n  698: #if !defined(PNG_WRITE_BGR_SUPPORTED) && defined(PNG_READ_BGR_SUPPORTED)\n  699        if (png_ptr->transformations & PNG_BGR)\n  700           png_warning(png_ptr, \"PNG_WRITE_BGR_SUPPORTED is not defined\");\n  701  #endif\n  702: #if !defined(PNG_WRITE_SWAP_SUPPORTED) && defined(PNG_READ_SWAP_SUPPORTED)\n  703        if (png_ptr->transformations & PNG_SWAP_BYTES)\n  704           png_warning(png_ptr, \"PNG_WRITE_SWAP_SUPPORTED is not defined\");\n  ...\n  855     if (png_ptr == NULL)\n  856        return;\n  857:    /* We have already written out all of the data */\n  858     if (png_ptr->row_number >= png_ptr->num_rows)\n  859        return;\n  ...\n 1079        }\n 1080  \n 1081:       /* If we have allocated the row_buf, this means we have already started\n 1082         * with the image and we should have allocated all of the filter buffers\n 1083:        * that have been selected.  If prev_row isn't already allocated, then\n 1084         * it is too late to start using the filters that need it, since we\n 1085         * will be missing the data in the previous row.  If an application\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngwutil.c:\n   56  }\n   57  \n   58: /* Simple function to write the signature.  If we have already written\n   59   * the magic bytes of the signature, or more likely, the PNG stream is\n   60   * being embedded into another stream and doesn't need its own signature,\n   61   * we should call png_set_sig_bytes() to tell libpng how many of the\n   62:  * bytes have already been written.\n   63   */\n   64  void PNGAPI\n   ..\n  186   * text string, and (b) issuing it later as a series of chunk data writes.\n  187   * The compression_state structure is shared context for these functions\n  188:  * set up by the caller in order to make the whole mess thread-safe.\n  189   */\n  190  \n  ...\n 2088  #endif\n 2089  \n 2090: /* This filters the row, chooses which filter to use, if it has not already\n 2091   * been specified by the application, and then writes the row out with the\n 2092   * chosen filter.\n ....\n 2281           sum += (v < 128) ? v : 256 - v;\n 2282  \n 2283:          if (sum > lmins)  /* We are already worse, don't continue. */\n 2284              break;\n 2285        }\n ....\n 2384           sum += (v < 128) ? v : 256 - v;\n 2385  \n 2386:          if (sum > lmins)  /* We are already worse, don't continue. */\n 2387              break;\n 2388        }\n ....\n 2496           sum += (v < 128) ? v : 256 - v;\n 2497  \n 2498:          if (sum > lmins)  /* We are already worse, don't continue. */\n 2499              break;\n 2500        }\n ....\n 2661           sum += (v < 128) ? v : 256 - v;\n 2662  \n 2663:          if (sum > lmins)  /* We are already worse, don't continue. */\n 2664              break;\n 2665        }\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\Android.mk:\n   41  	zip_fopen.c \\\n   42  	zip_fopen_index.c \\\n   43: 	zip_fread.c \\\n   44  	zip_free.c \\\n   45  	zip_get_archive_comment.c \\\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\libzip.la:\n   28  revision=0\n   29  \n   30: # Is this an already installed library?\n   31  installed=no\n   32  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip.h:\n   64  #define ZIP_FL_NOCASE		1 /* ignore case on name lookup */\n   65  #define ZIP_FL_NODIR		2 /* ignore directory component */\n   66: #define ZIP_FL_COMPRESSED	4 /* read compressed data */\n   67  #define ZIP_FL_UNCHANGED	8 /* use original data, ignoring changes */\n   68  #define ZIP_FL_RECOMPRESS      16 /* force recompression of data */\n   ..\n   79  #define ZIP_ER_CLOSE          3  /* S Closing zip archive failed */\n   80  #define ZIP_ER_SEEK           4  /* S Seek error */\n   81: #define ZIP_ER_READ           5  /* S Read error */\n   82  #define ZIP_ER_WRITE          6  /* S Write error */\n   83  #define ZIP_ER_CRC            7  /* N CRC error */\n   84  #define ZIP_ER_ZIPCLOSED      8  /* N Containing zip archive was closed */\n   85  #define ZIP_ER_NOENT          9  /* N No such file */\n   86: #define ZIP_ER_EXISTS        10  /* N File already exists */\n   87  #define ZIP_ER_OPEN          11  /* S Can't open file */\n   88  #define ZIP_ER_TMPOPEN       12  /* S Failure to create temporary file */\n   ..\n  150  \n  151  enum zip_source_cmd {\n  152:     ZIP_SOURCE_OPEN,	/* prepare for reading */\n  153:     ZIP_SOURCE_READ, 	/* read data */\n  154:     ZIP_SOURCE_CLOSE,	/* reading is done */\n  155      ZIP_SOURCE_STAT,	/* get meta information */\n  156      ZIP_SOURCE_ERROR,	/* get error information */\n  ...\n  192  ZIP_EXTERN struct zip_file *zip_fopen(struct zip *, const char *, int);\n  193  ZIP_EXTERN struct zip_file *zip_fopen_index(struct zip *, int, int);\n  194: ZIP_EXTERN ssize_t zip_fread(struct zip_file *, void *, size_t);\n  195  ZIP_EXTERN const char *zip_get_archive_comment(struct zip *, int *, int);\n  196  ZIP_EXTERN int zip_get_archive_flag(struct zip *, int, int);\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_close.c:\n  194  		break;\n  195  	    }\n  196: 	    if (_zip_dirent_read(&de, za->zp, NULL, NULL, 1,\n  197  				 &za->error) != 0) {\n  198  		error = 1;\n  ...\n  256  		break;\n  257  	    }\n  258: 	    /* we just read the local dirent, file is at correct position */\n  259  	    if (copy_data(za->zp, cd->entry[j].comp_size, out,\n  260  			  &za->error) < 0) {\n  ...\n  303  	free(temp);\n  304  	if (reopen_on_error) {\n  305: 	    /* ignore errors, since we're already in an error case */\n  306  	    za->zp = fopen(za->zn, \"rb\");\n  307  	}\n  ...\n  398  \n  399      st->comp_size = 0;\n  400:     while ((n=cb(ud, buf, sizeof(buf), ZIP_SOURCE_READ)) > 0) {\n  401  	if (fwrite(buf, 1, n, ft) != (size_t)n) {\n  402  	    _zip_error_set(error, ZIP_ER_WRITE, errno);\n  ...\n  455      while (!end) {\n  456  	if (zstr.avail_in == 0 && !flush) {\n  457: 	    if ((n=cb(ud, b1, sizeof(b1), ZIP_SOURCE_READ)) < 0) {\n  458  		ch_set_error(&za->error, cb, ud);\n  459  		deflateEnd(&zstr);\n  ...\n  528      while (len > 0) {\n  529  	nn = len > sizeof(buf) ? sizeof(buf) : len;\n  530: 	if ((n=fread(buf, 1, nn, fs)) < 0) {\n  531: 	    _zip_error_set(error, ZIP_ER_READ, errno);\n  532  	    return -1;\n  533  	}\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_dirent.c:\n    1  /*\n    2:   zip_dirent.c -- read directory entry (local or central), clean dirent\n    3    Copyright (C) 1999-2008 Dieter Baron and Thomas Klausner\n    4  \n    .\n   44  \n   45  static time_t _zip_d2u_time(int, int);\n   46: static char *_zip_readfpstr(FILE *, unsigned int, int, struct zip_error *);\n   47: static char *_zip_readstr(unsigned char **, int, int, struct zip_error *);\n   48  static void _zip_u2d_time(time_t, unsigned short *, unsigned short *);\n   49  static void _zip_write2(unsigned short, FILE *);\n   ..\n  194  \n  195  \n  196: /* _zip_dirent_read(zde, fp, bufp, left, localp, error):\n  197     Fills the zip directory entry zde.\n  198  \n  199     If bufp is non-NULL, data is taken from there and bufp is advanced\n  200:    by the amount of data used; otherwise data is read from fp as needed.\n  201     \n  202     if leftp is non-NULL, no more bytes than specified by it are used,\n  203     and *leftp is reduced by the number of bytes used.\n  204  \n  205:    If local != 0, it reads a local header instead of a central\n  206     directory entry.\n  207  \n  ...\n  213  \n  214  int\n  215: _zip_dirent_read(struct zip_dirent *zde, FILE *fp,\n  216  		 unsigned char **bufp, unsigned int *leftp, int local,\n  217  		 struct zip_error *error)\n  ...\n  237      }\n  238      else {\n  239: 	/* read entry from disk */\n  240: 	if ((fread(buf, 1, size, fp)<size)) {\n  241: 	    _zip_error_set(error, ZIP_ER_READ, errno);\n  242  	    return -1;\n  243  	}\n  ...\n  255      \n  256      if (!local)\n  257: 	zde->version_madeby = _zip_read2(&cur);\n  258      else\n  259  	zde->version_madeby = 0;\n  260:     zde->version_needed = _zip_read2(&cur);\n  261:     zde->bitflags = _zip_read2(&cur);\n  262:     zde->comp_method = _zip_read2(&cur);\n  263      \n  264      /* convert to time_t */\n  265:     dostime = _zip_read2(&cur);\n  266:     dosdate = _zip_read2(&cur);\n  267      zde->last_mod = _zip_d2u_time(dostime, dosdate);\n  268      \n  269:     zde->crc = _zip_read4(&cur);\n  270:     zde->comp_size = _zip_read4(&cur);\n  271:     zde->uncomp_size = _zip_read4(&cur);\n  272      \n  273:     zde->filename_len = _zip_read2(&cur);\n  274:     zde->extrafield_len = _zip_read2(&cur);\n  275      \n  276      if (local) {\n  ...\n  281  	zde->offset = 0;\n  282      } else {\n  283: 	zde->comment_len = _zip_read2(&cur);\n  284: 	zde->disk_number = _zip_read2(&cur);\n  285: 	zde->int_attrib = _zip_read2(&cur);\n  286: 	zde->ext_attrib = _zip_read4(&cur);\n  287: 	zde->offset = _zip_read4(&cur);\n  288      }\n  289  \n  ...\n  301      if (bufp) {\n  302  	if (zde->filename_len) {\n  303: 	    zde->filename = _zip_readstr(&cur, zde->filename_len, 1, error);\n  304  	    if (!zde->filename)\n  305  		    return -1;\n  ...\n  307  \n  308  	if (zde->extrafield_len) {\n  309: 	    zde->extrafield = _zip_readstr(&cur, zde->extrafield_len, 0,\n  310  					   error);\n  311  	    if (!zde->extrafield)\n  ...\n  314  \n  315  	if (zde->comment_len) {\n  316: 	    zde->comment = _zip_readstr(&cur, zde->comment_len, 0, error);\n  317  	    if (!zde->comment)\n  318  		return -1;\n  ...\n  321      else {\n  322  	if (zde->filename_len) {\n  323: 	    zde->filename = _zip_readfpstr(fp, zde->filename_len, 1, error);\n  324  	    if (!zde->filename)\n  325  		    return -1;\n  ...\n  327  \n  328  	if (zde->extrafield_len) {\n  329: 	    zde->extrafield = _zip_readfpstr(fp, zde->extrafield_len, 0,\n  330  					     error);\n  331  	    if (!zde->extrafield)\n  ...\n  334  \n  335  	if (zde->comment_len) {\n  336: 	    zde->comment = _zip_readfpstr(fp, zde->comment_len, 0, error);\n  337  	    if (!zde->comment)\n  338  		return -1;\n  ...\n  495  \n  496  unsigned short\n  497: _zip_read2(unsigned char **a)\n  498  {\n  499      unsigned short ret;\n  ...\n  508  \n  509  unsigned int\n  510: _zip_read4(unsigned char **a)\n  511  {\n  512      unsigned int ret;\n  ...\n  521  \n  522  static char *\n  523: _zip_readfpstr(FILE *fp, unsigned int len, int nulp, struct zip_error *error)\n  524  {\n  525      char *r, *o;\n  ...\n  531      }\n  532  \n  533:     if (fread(r, 1, len, fp)<len) {\n  534  	free(r);\n  535: 	_zip_error_set(error, ZIP_ER_READ, errno);\n  536  	return NULL;\n  537      }\n  ...\n  551  \n  552  static char *\n  553: _zip_readstr(unsigned char **buf, int len, int nulp, struct zip_error *error)\n  554  {\n  555      char *r, *o;\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_err_str.c:\n   14      \"Closing zip archive failed\",\n   15      \"Seek error\",\n   16:     \"Read error\",\n   17      \"Write error\",\n   18      \"CRC error\",\n   19      \"Containing zip archive was closed\",\n   20      \"No such file\",\n   21:     \"File already exists\",\n   22      \"Can't open file\",\n   23      \"Failure to create temporary file\",\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_file_get_offset.c:\n   64      }\n   65  \n   66:     if (_zip_dirent_read(&de, za->zp, NULL, NULL, 1, &za->error) != 0)\n   67  	return 0;\n   68  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_filerange_crc.c:\n   58      while (len > 0) {\n   59  	n = len > BUFSIZE ? BUFSIZE : len;\n   60: 	if ((n=fread(buf, 1, n, fp)) <= 0) {\n   61: 	    _zip_error_set(errp, ZIP_ER_READ, errno);\n   62  	    return -1;\n   63  	}\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_fopen.c:\n    1  /*\n    2:   zip_fopen.c -- open file in zip archive for reading\n    3    Copyright (C) 1999-2007 Dieter Baron and Thomas Klausner\n    4  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_fopen_index.c:\n    1  /*\n    2:   zip_fopen_index.c -- open file in zip archive for reading by index\n    3    Copyright (C) 1999-2007 Dieter Baron and Thomas Klausner\n    4  \n    .\n  159  	i = zf->cbytes_left;\n  160  \n  161:     j = fread(buf, 1, i, zf->za->zp);\n  162      if (j == 0) {\n  163  	_zip_error_set(&zf->error, ZIP_ER_EOF, 0);\n  ...\n  165      }\n  166      else if (j < 0)\n  167: 	_zip_error_set(&zf->error, ZIP_ER_READ, errno);\n  168      else {\n  169  	zf->fpos += j;\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_fread.c:\n    1  /*\n    2:   zip_fread.c -- read from file\n    3    Copyright (C) 1999-2009 Dieter Baron and Thomas Klausner\n    4  \n    .\n   39  \n   40  ZIP_EXTERN ssize_t\n   41: zip_fread(struct zip_file *zf, void *outbuf, size_t toread)\n   42  {\n   43      int ret;\n   ..\n   51  	return -1;\n   52  \n   53:     if ((zf->flags & ZIP_ZF_EOF) || (toread == 0))\n   54  	return 0;\n   55  \n   ..\n   66      \n   67      if ((zf->flags & ZIP_ZF_DECOMP) == 0) {\n   68: 	ret = _zip_file_fillbuf(outbuf, toread, zf);\n   69  	if (ret > 0) {\n   70  	    if (zf->flags & ZIP_ZF_CRC)\n   ..\n   76      \n   77      zf->zstr->next_out = (Bytef *)outbuf;\n   78:     zf->zstr->avail_out = toread;\n   79      out_before = zf->zstr->total_out;\n   80      \n   ..\n   98  	case Z_OK:\n   99  	    len = zf->zstr->total_out - out_before;\n  100: 	    if (len >= zf->bytes_left || len >= toread) {\n  101  		if (zf->flags & ZIP_ZF_CRC)\n  102  		    zf->crc = crc32(zf->crc, (Bytef *)outbuf, len);\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_fread.lo:\n    1: # zip_fread.lo - a libtool object file\n    2  # Generated by ltmain.sh (GNU libtool) 2.2.6b\n    3  #\n    .\n    6  \n    7  # Name of the PIC object.\n    8: pic_object='.libs/zip_fread.o'\n    9  \n   10  # Name of the non-PIC object\n   11: non_pic_object='zip_fread.o'\n   12  \n   13  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_open.c:\n   53  static unsigned char *_zip_memmem(const unsigned char *, int,\n   54  				  const unsigned char *, int);\n   55: static struct zip_cdir *_zip_readcdir(FILE *, unsigned char *, unsigned char *,\n   56  				 int, int, struct zip_error *);\n   57  \n   ..\n  142  \n  143  \n  144: /* _zip_readcdir:\n  145     tries to find a valid end-of-central-directory at the beginning of\n  146     buf, and then the corresponding central directory entries.\n  ...\n  149  \n  150  static struct zip_cdir *\n  151: _zip_readcdir(FILE *fp, unsigned char *buf, unsigned char *eocd, int buflen,\n  152  	      int flags, struct zip_error *error)\n  153  {\n  ...\n  177      cdp = eocd + 8;\n  178      /* number of cdir-entries on this disk */\n  179:     i = _zip_read2(&cdp);\n  180      /* number of cdir-entries */\n  181:     nentry = _zip_read2(&cdp);\n  182  \n  183      if ((cd=_zip_cdir_new(nentry, error)) == NULL)\n  184  	return NULL;\n  185  \n  186:     cd->size = _zip_read4(&cdp);\n  187:     cd->offset = _zip_read4(&cdp);\n  188      cd->comment = NULL;\n  189:     cd->comment_len = _zip_read2(&cdp);\n  190  \n  191      if ((comlen < cd->comment_len) || (cd->nentry != i)) {\n  ...\n  210  \n  211      if (cd->size < (unsigned int)(eocd-buf)) {\n  212: 	/* if buffer already read in, use it */\n  213  	cdp = eocd - cd->size;\n  214  	bufp = &cdp;\n  215      }\n  216      else {\n  217: 	/* go to start of cdir and read it entry by entry */\n  218  	bufp = NULL;\n  219  	clearerr(fp);\n  ...\n  241  	}\n  242  \n  243: 	if ((_zip_dirent_read(cd->entry+i, fp, bufp, &left, 0, error)) < 0) {\n  244  	    cd->nentry = i;\n  245  	    _zip_cdir_free(cd);\n  ...\n  297  	}\n  298  	\n  299: 	if (_zip_dirent_read(&temp, fp, NULL, NULL, 1, error) == -1)\n  300  	    return -1;\n  301  	\n  ...\n  491  \n  492      clearerr(fp);\n  493:     buflen = fread(buf, 1, CDBUFSIZE, fp);\n  494  \n  495      if (ferror(fp)) {\n  496: 	set_error(zep, NULL, ZIP_ER_READ);\n  497  	free(buf);\n  498  	return NULL;\n  ...\n  509  	/* to avoid finding the same match all over again */\n  510  	match++;\n  511: 	if ((cdirnew=_zip_readcdir(fp, buf, match-1, buflen, flags,\n  512  				   &zerr)) == NULL)\n  513  	    continue;\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_source_buffer.c:\n   39  #include \"zipint.h\"\n   40  \n   41: struct read_data {\n   42      const char *buf, *data, *end;\n   43      time_t mtime;\n   ..\n   45  };\n   46  \n   47: static ssize_t read_data(void *state, void *data, size_t len,\n   48  			 enum zip_source_cmd cmd);\n   49  \n   ..\n   53  zip_source_buffer(struct zip *za, const void *data, off_t len, int freep)\n   54  {\n   55:     struct read_data *f;\n   56      struct zip_source *zs;\n   57  \n   ..\n   64      }\n   65  \n   66:     if ((f=(struct read_data *)malloc(sizeof(*f))) == NULL) {\n   67  	_zip_error_set(&za->error, ZIP_ER_MEMORY, 0);\n   68  	return NULL;\n   ..\n   74      f->mtime = time(NULL);\n   75      \n   76:     if ((zs=zip_source_function(za, read_data, f)) == NULL) {\n   77  	free(f);\n   78  	return NULL;\n   ..\n   85  \n   86  static ssize_t\n   87: read_data(void *state, void *data, size_t len, enum zip_source_cmd cmd)\n   88  {\n   89:     struct read_data *z;\n   90      char *buf;\n   91      size_t n;\n   92  \n   93:     z = (struct read_data *)state;\n   94      buf = (char *)data;\n   95  \n   ..\n   99  	return 0;\n  100  	\n  101:     case ZIP_SOURCE_READ:\n  102  	n = z->end - z->buf;\n  103  	if (n > len)\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_source_filep.c:\n   42  #include \"zipint.h\"\n   43  \n   44: struct read_file {\n   45      char *fname;	/* name of file to copy from */\n   46      FILE *f;		/* file to copy from */\n   ..\n   51  };\n   52  \n   53: static ssize_t read_file(void *state, void *data, size_t len,\n   54  		     enum zip_source_cmd cmd);\n   55  \n   ..\n   76  		      off_t start, off_t len)\n   77  {\n   78:     struct read_file *f;\n   79      struct zip_source *zs;\n   80  \n   ..\n   84      }\n   85  \n   86:     if ((f=(struct read_file *)malloc(sizeof(struct read_file))) == NULL) {\n   87  	_zip_error_set(&za->error, ZIP_ER_MEMORY, 0);\n   88  	return NULL;\n   ..\n  101      f->len = (len ? len : -1);\n  102      \n  103:     if ((zs=zip_source_function(za, read_file, f)) == NULL) {\n  104  	free(f);\n  105  	return NULL;\n  ...\n  112  \n  113  static ssize_t\n  114: read_file(void *state, void *data, size_t len, enum zip_source_cmd cmd)\n  115  {\n  116:     struct read_file *z;\n  117      char *buf;\n  118      int i, n;\n  119  \n  120:     z = (struct read_file *)state;\n  121      buf = (char *)data;\n  122  \n  ...\n  139  	return 0;\n  140  	\n  141:     case ZIP_SOURCE_READ:\n  142  	if (z->remain != -1)\n  143  	    n = len > z->remain ? z->remain : len;\n  ...\n  145  	    n = len;\n  146  	\n  147: 	if ((i=fread(buf, 1, n, z->f)) < 0) {\n  148: 	    z->e[0] = ZIP_ER_READ;\n  149  	    z->e[1] = errno;\n  150  	    return -1;\n  ...\n  178  \n  179  	    if (err != 0) {\n  180: 		z->e[0] = ZIP_ER_READ; /* best match */\n  181  		z->e[1] = errno;\n  182  		return -1;\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_source_zip.c:\n   39  #include \"zipint.h\"\n   40  \n   41: struct read_zip {\n   42      struct zip_file *zf;\n   43      struct zip_stat st;\n   ..\n   45  };\n   46  \n   47: static ssize_t read_zip(void *st, void *data, size_t len,\n   48  			enum zip_source_cmd cmd);\n   49  \n   ..\n   56      struct zip_error error;\n   57      struct zip_source *zs;\n   58:     struct read_zip *p;\n   59  \n   60      /* XXX: ZIP_FL_RECOMPRESS */\n   ..\n   82  	flags &= ~ZIP_FL_COMPRESSED;\n   83  \n   84:     if ((p=(struct read_zip *)malloc(sizeof(*p))) == NULL) {\n   85  	_zip_error_set(&za->error, ZIP_ER_MEMORY, 0);\n   86  	return NULL;\n   ..\n  106      }\n  107      \n  108:     if ((zs=zip_source_function(za, read_zip, p)) == NULL) {\n  109  	free(p);\n  110  	return NULL;\n  ...\n  117  \n  118  static ssize_t\n  119: read_zip(void *state, void *data, size_t len, enum zip_source_cmd cmd)\n  120  {\n  121:     struct read_zip *z;\n  122      char b[8192], *buf;\n  123      int i, n;\n  124  \n  125:     z = (struct read_zip *)state;\n  126      buf = (char *)data;\n  127  \n  ...\n  130  	for (n=0; n<z->off; n+= i) {\n  131  	    i = (z->off-n > sizeof(b) ? sizeof(b) : z->off-n);\n  132: 	    if ((i=zip_fread(z->zf, b, i)) < 0) {\n  133  		zip_fclose(z->zf);\n  134  		z->zf = NULL;\n  ...\n  138  	return 0;\n  139  	\n  140:     case ZIP_SOURCE_READ:\n  141  	if (z->len != -1)\n  142  	    n = len > z->len ? z->len : len;\n  ...\n  145  	\n  146  \n  147: 	if ((i=zip_fread(z->zf, buf, n)) < 0)\n  148  	    return -1;\n  149  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zipint.h:\n  139  \n  140      int method;			/* compression method */\n  141:     off_t fpos;			/* position within zip file (fread/fwrite) */\n  142:     unsigned long bytes_left;	/* number of bytes left to read */\n  143      unsigned long cbytes_left;  /* number of bytes of compressed data left */\n  144      \n  ...\n  224  void _zip_dirent_finalize(struct zip_dirent *);\n  225  void _zip_dirent_init(struct zip_dirent *);\n  226: int _zip_dirent_read(struct zip_dirent *, FILE *, unsigned char **,\n  227  		     unsigned int *, int, struct zip_error *);\n  228  void _zip_dirent_torrent_normalize(struct zip_dirent *);\n  ...\n  251  void _zip_free(struct zip *);\n  252  const char *_zip_get_name(struct zip *, int, int, struct zip_error *);\n  253: int _zip_local_header_read(struct zip *, int);\n  254  void *_zip_memdup(const void *, size_t, struct zip_error *);\n  255  int _zip_name_locate(struct zip *, const char *, int, struct zip_error *);\n  256  struct zip *_zip_new(struct zip_error *);\n  257: unsigned short _zip_read2(unsigned char **);\n  258: unsigned int _zip_read4(unsigned char **);\n  259  int _zip_replace(struct zip *, int, const char *, struct zip_source *);\n  260  int _zip_set_name(struct zip *, int, const char *);\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_add.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/unistd.h /usr/include/bits/posix_opt.h \\\n   13   /usr/include/bits/confname.h /usr/include/getopt.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_add_dir.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h /usr/include/string.h \\\n   13   /usr/include/xlocale.h /usr/include/bits/string.h \\\n   ..\n   62  /usr/include/sys/sysmacros.h:\n   63  \n   64: /usr/include/bits/pthreadtypes.h:\n   65  \n   66  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_close.Plo:\n   14   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   15   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   16:  /usr/include/bits/pthreadtypes.h /usr/include/alloca.h \\\n   17   /usr/include/bits/stdlib.h /usr/include/string.h /usr/include/xlocale.h \\\n   18   /usr/include/bits/string.h /usr/include/bits/string2.h \\\n   ..\n   84  /usr/include/sys/sysmacros.h:\n   85  \n   86: /usr/include/bits/pthreadtypes.h:\n   87  \n   88  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_delete.Plo:\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_dirent.Plo:\n   14   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   15   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   16:  /usr/include/bits/pthreadtypes.h /usr/include/alloca.h \\\n   17   /usr/include/bits/stdlib.h /usr/include/string.h /usr/include/xlocale.h \\\n   18   /usr/include/bits/string.h /usr/include/bits/string2.h \\\n   ..\n   84  /usr/include/sys/sysmacros.h:\n   85  \n   86: /usr/include/bits/pthreadtypes.h:\n   87  \n   88  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_entry_free.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   13   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   61  /usr/include/sys/sysmacros.h:\n   62  \n   63: /usr/include/bits/pthreadtypes.h:\n   64  \n   65  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_entry_new.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   13   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   61  /usr/include/sys/sysmacros.h:\n   62  \n   63: /usr/include/bits/pthreadtypes.h:\n   64  \n   65  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_err_str.Plo:\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_error.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   13   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   61  /usr/include/sys/sysmacros.h:\n   62  \n   63: /usr/include/bits/pthreadtypes.h:\n   64  \n   65  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_error_clear.Plo:\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_error_get.Plo:\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_error_get_sys_type.Plo:\n   10   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   11   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   12:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   13   /usr/include/unistd.h /usr/include/bits/posix_opt.h \\\n   14   /usr/include/bits/confname.h /usr/include/getopt.h \\\n   ..\n   66  /usr/include/sys/sysmacros.h:\n   67  \n   68: /usr/include/bits/pthreadtypes.h:\n   69  \n   70  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_error_strerror.Plo:\n   17   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   18   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   19:  /usr/include/bits/pthreadtypes.h /usr/include/alloca.h \\\n   20   /usr/include/bits/stdlib.h /usr/include/string.h /usr/include/xlocale.h \\\n   21   /usr/include/bits/string.h /usr/include/bits/string2.h \\\n   ..\n   95  /usr/include/sys/sysmacros.h:\n   96  \n   97: /usr/include/bits/pthreadtypes.h:\n   98  \n   99  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_error_to_str.Plo:\n   17   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   18   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   19:  /usr/include/bits/pthreadtypes.h /usr/include/alloca.h \\\n   20   /usr/include/bits/stdlib.h /usr/include/string.h /usr/include/xlocale.h \\\n   21   /usr/include/bits/string.h /usr/include/bits/string2.h \\\n   ..\n   95  /usr/include/sys/sysmacros.h:\n   96  \n   97: /usr/include/bits/pthreadtypes.h:\n   98  \n   99  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_fclose.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   13   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   61  /usr/include/sys/sysmacros.h:\n   62  \n   63: /usr/include/bits/pthreadtypes.h:\n   64  \n   65  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_file_error_clear.Plo:\n   10   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   11   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   12:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   13   /usr/include/unistd.h /usr/include/bits/posix_opt.h \\\n   14   /usr/include/bits/confname.h /usr/include/getopt.h \\\n   ..\n   66  /usr/include/sys/sysmacros.h:\n   67  \n   68: /usr/include/bits/pthreadtypes.h:\n   69  \n   70  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_file_error_get.Plo:\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_file_get_offset.Plo:\n   14   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   15   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   16:  /usr/include/bits/pthreadtypes.h /usr/include/alloca.h \\\n   17   /usr/include/bits/stdlib.h /usr/include/string.h /usr/include/xlocale.h \\\n   18   /usr/include/bits/string.h /usr/include/bits/string2.h \\\n   ..\n   84  /usr/include/sys/sysmacros.h:\n   85  \n   86: /usr/include/bits/pthreadtypes.h:\n   87  \n   88  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_file_strerror.Plo:\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_filerange_crc.Plo:\n   18   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   19   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   20:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   21   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   22   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   99  /usr/include/sys/sysmacros.h:\n  100  \n  101: /usr/include/bits/pthreadtypes.h:\n  102  \n  103  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_fopen.Plo:\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_fopen_index.Plo:\n   17   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   18   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   19:  /usr/include/bits/pthreadtypes.h /usr/include/alloca.h \\\n   20   /usr/include/bits/stdlib.h zipint.h /usr/include/zlib.h \\\n   21   /usr/include/zconf.h /usr/include/zlibdefs.h /usr/include/unistd.h \\\n   ..\n   94  /usr/include/sys/sysmacros.h:\n   95  \n   96: /usr/include/bits/pthreadtypes.h:\n   97  \n   98  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_fread.Plo:\n    1: zip_fread.lo: zip_fread.c zipint.h /usr/include/zlib.h \\\n    2   /usr/include/zconf.h /usr/include/zlibdefs.h /usr/include/sys/types.h \\\n    3   /usr/include/features.h /usr/include/bits/predefs.h \\\n    .\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_free.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   13   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   61  /usr/include/sys/sysmacros.h:\n   62  \n   63: /usr/include/bits/pthreadtypes.h:\n   64  \n   65  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_get_archive_comment.Plo:\n   10   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   11   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   12:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   13   /usr/include/unistd.h /usr/include/bits/posix_opt.h \\\n   14   /usr/include/bits/confname.h /usr/include/getopt.h \\\n   ..\n   66  /usr/include/sys/sysmacros.h:\n   67  \n   68: /usr/include/bits/pthreadtypes.h:\n   69  \n   70  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_get_archive_flag.Plo:\n   10   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   11   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   12:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   13   /usr/include/unistd.h /usr/include/bits/posix_opt.h \\\n   14   /usr/include/bits/confname.h /usr/include/getopt.h \\\n   ..\n   66  /usr/include/sys/sysmacros.h:\n   67  \n   68: /usr/include/bits/pthreadtypes.h:\n   69  \n   70  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_get_file_comment.Plo:\n   10   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   11   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   12:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   13   /usr/include/unistd.h /usr/include/bits/posix_opt.h \\\n   14   /usr/include/bits/confname.h /usr/include/getopt.h \\\n   ..\n   66  /usr/include/sys/sysmacros.h:\n   67  \n   68: /usr/include/bits/pthreadtypes.h:\n   69  \n   70  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_get_name.Plo:\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_get_num_files.Plo:\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_memdup.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h /usr/include/string.h \\\n   13   /usr/include/xlocale.h /usr/include/bits/string.h \\\n   ..\n   62  /usr/include/sys/sysmacros.h:\n   63  \n   64: /usr/include/bits/pthreadtypes.h:\n   65  \n   66  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_name_locate.Plo:\n   13   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   14   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   15:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   16   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   17   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   79  /usr/include/sys/sysmacros.h:\n   80  \n   81: /usr/include/bits/pthreadtypes.h:\n   82  \n   83  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_new.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   13   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   61  /usr/include/sys/sysmacros.h:\n   62  \n   63: /usr/include/bits/pthreadtypes.h:\n   64  \n   65  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_open.Plo:\n   21   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   22   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   23:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   24   /usr/include/alloca.h /usr/include/bits/stdlib.h /usr/include/string.h \\\n   25   /usr/include/xlocale.h /usr/include/bits/string.h \\\n   ..\n  118  /usr/include/sys/sysmacros.h:\n  119  \n  120: /usr/include/bits/pthreadtypes.h:\n  121  \n  122  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_rename.Plo:\n   13   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   14   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   15:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   16   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   17   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   79  /usr/include/sys/sysmacros.h:\n   80  \n   81: /usr/include/bits/pthreadtypes.h:\n   82  \n   83  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_replace.Plo:\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_set_archive_comment.Plo:\n   10   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   11   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   12:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   13   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   14   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   62  /usr/include/sys/sysmacros.h:\n   63  \n   64: /usr/include/bits/pthreadtypes.h:\n   65  \n   66  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_set_archive_flag.Plo:\n   10   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   11   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   12:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   13   /usr/include/unistd.h /usr/include/bits/posix_opt.h \\\n   14   /usr/include/bits/confname.h /usr/include/getopt.h \\\n   ..\n   66  /usr/include/sys/sysmacros.h:\n   67  \n   68: /usr/include/bits/pthreadtypes.h:\n   69  \n   70  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_set_file_comment.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   13   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   61  /usr/include/sys/sysmacros.h:\n   62  \n   63: /usr/include/bits/pthreadtypes.h:\n   64  \n   65  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_set_name.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h /usr/include/string.h \\\n   13   /usr/include/xlocale.h /usr/include/bits/string.h \\\n   ..\n   62  /usr/include/sys/sysmacros.h:\n   63  \n   64: /usr/include/bits/pthreadtypes.h:\n   65  \n   66  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_source_buffer.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h /usr/include/string.h \\\n   13   /usr/include/xlocale.h /usr/include/bits/string.h \\\n   ..\n   62  /usr/include/sys/sysmacros.h:\n   63  \n   64: /usr/include/bits/pthreadtypes.h:\n   65  \n   66  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_source_file.Plo:\n   17   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   18   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   19:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   20   /usr/include/unistd.h /usr/include/bits/posix_opt.h \\\n   21   /usr/include/bits/confname.h /usr/include/getopt.h \\\n   ..\n   98  /usr/include/sys/sysmacros.h:\n   99  \n  100: /usr/include/bits/pthreadtypes.h:\n  101  \n  102  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_source_filep.Plo:\n   17   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   18   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   19:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   20   /usr/include/alloca.h /usr/include/bits/stdlib.h /usr/include/string.h \\\n   21   /usr/include/xlocale.h /usr/include/bits/string.h \\\n   ..\n  100  /usr/include/sys/sysmacros.h:\n  101  \n  102: /usr/include/bits/pthreadtypes.h:\n  103  \n  104  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_source_free.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   13   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   61  /usr/include/sys/sysmacros.h:\n   62  \n   63: /usr/include/bits/pthreadtypes.h:\n   64  \n   65  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_source_function.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   13   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   61  /usr/include/sys/sysmacros.h:\n   62  \n   63: /usr/include/bits/pthreadtypes.h:\n   64  \n   65  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_source_zip.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h /usr/include/string.h \\\n   13   /usr/include/xlocale.h /usr/include/bits/string.h \\\n   ..\n   62  /usr/include/sys/sysmacros.h:\n   63  \n   64: /usr/include/bits/pthreadtypes.h:\n   65  \n   66  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_stat.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/unistd.h /usr/include/bits/posix_opt.h \\\n   13   /usr/include/bits/confname.h /usr/include/getopt.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_stat_index.Plo:\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_stat_init.Plo:\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_strerror.Plo:\n   10   /usr/include/bits/select.h /usr/include/bits/sigset.h \\\n   11   /usr/include/bits/time.h /usr/include/sys/sysmacros.h \\\n   12:  /usr/include/bits/pthreadtypes.h /usr/include/unistd.h \\\n   13   /usr/include/bits/posix_opt.h /usr/include/bits/confname.h \\\n   14   /usr/include/getopt.h /usr/include/bits/unistd.h zip.h \\\n   ..\n   65  /usr/include/sys/sysmacros.h:\n   66  \n   67: /usr/include/bits/pthreadtypes.h:\n   68  \n   69  /usr/include/unistd.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_unchange.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   13   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   61  /usr/include/sys/sysmacros.h:\n   62  \n   63: /usr/include/bits/pthreadtypes.h:\n   64  \n   65  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_unchange_all.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   13   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   61  /usr/include/sys/sysmacros.h:\n   62  \n   63: /usr/include/bits/pthreadtypes.h:\n   64  \n   65  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_unchange_archive.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   13   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   61  /usr/include/sys/sysmacros.h:\n   62  \n   63: /usr/include/bits/pthreadtypes.h:\n   64  \n   65  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_unchange_data.Plo:\n    9   /usr/include/sys/select.h /usr/include/bits/select.h \\\n   10   /usr/include/bits/sigset.h /usr/include/bits/time.h \\\n   11:  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \\\n   12   /usr/include/alloca.h /usr/include/bits/stdlib.h zipint.h \\\n   13   /usr/include/zlib.h /usr/include/zconf.h /usr/include/zlibdefs.h \\\n   ..\n   61  /usr/include/sys/sysmacros.h:\n   62  \n   63: /usr/include/bits/pthreadtypes.h:\n   64  \n   65  /usr/include/alloca.h:\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.libs\\libzip.la:\n   28  revision=0\n   29  \n   30: # Is this an already installed library?\n   31  installed=no\n   32  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.libs\\libzip.lai:\n   28  revision=0\n   29  \n   30: # Is this an already installed library?\n   31  installed=yes\n   32  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.libs\\libzip.so.1:\n    <binary>\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.libs\\libzip.so.1.0.0:\n    <binary>\n\n1497 matches across 94 files\n\n\nSearching 201 files for \"zip_fread\nzip_fread\nzip_fread\"\n\n0 matches across 0 files\n\n\nSearching 201 files for \"zip_fread\"\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\PlatformAndroid.cpp:\n   23  \n   24    //read the header\n   25:   zip_fread(file, header, 8);\n   26  \n   27    //test if png\n   ..\n   71    //png_init_io(png_ptr, fp);\n   72    auto png_zip_read = [&file](png_structp png_ptr, png_bytep data, png_size_t length) {\n   73:   		zip_fread(file, data, length);\n   74    }\n   75    png_set_read_fn(png_ptr, NULL, png_zip_read);\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\Android.mk:\n   41  	zip_fopen.c \\\n   42  	zip_fopen_index.c \\\n   43: 	zip_fread.c \\\n   44  	zip_free.c \\\n   45  	zip_get_archive_comment.c \\\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip.h:\n  192  ZIP_EXTERN struct zip_file *zip_fopen(struct zip *, const char *, int);\n  193  ZIP_EXTERN struct zip_file *zip_fopen_index(struct zip *, int, int);\n  194: ZIP_EXTERN ssize_t zip_fread(struct zip_file *, void *, size_t);\n  195  ZIP_EXTERN const char *zip_get_archive_comment(struct zip *, int *, int);\n  196  ZIP_EXTERN int zip_get_archive_flag(struct zip *, int, int);\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_fread.c:\n    1  /*\n    2:   zip_fread.c -- read from file\n    3    Copyright (C) 1999-2009 Dieter Baron and Thomas Klausner\n    4  \n    .\n   39  \n   40  ZIP_EXTERN ssize_t\n   41: zip_fread(struct zip_file *zf, void *outbuf, size_t toread)\n   42  {\n   43      int ret;\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_fread.lo:\n    1: # zip_fread.lo - a libtool object file\n    2  # Generated by ltmain.sh (GNU libtool) 2.2.6b\n    3  #\n    .\n    6  \n    7  # Name of the PIC object.\n    8: pic_object='.libs/zip_fread.o'\n    9  \n   10  # Name of the non-PIC object\n   11: non_pic_object='zip_fread.o'\n   12  \n   13  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\zip_source_zip.c:\n  130  	for (n=0; n<z->off; n+= i) {\n  131  	    i = (z->off-n > sizeof(b) ? sizeof(b) : z->off-n);\n  132: 	    if ((i=zip_fread(z->zf, b, i)) < 0) {\n  133  		zip_fclose(z->zf);\n  134  		z->zf = NULL;\n  ...\n  145  	\n  146  \n  147: 	if ((i=zip_fread(z->zf, buf, n)) < 0)\n  148  	    return -1;\n  149  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.deps\\zip_fread.Plo:\n    1: zip_fread.lo: zip_fread.c zipint.h /usr/include/zlib.h \\\n    2   /usr/include/zconf.h /usr/include/zlibdefs.h /usr/include/sys/types.h \\\n    3   /usr/include/features.h /usr/include/bits/predefs.h \\\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.libs\\libzip.so.1:\n    <binary>\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libzip\\.libs\\libzip.so.1.0.0:\n    <binary>\n\n27 matches across 9 files\n\n\nSearching 201 files for \"png_get_IHDR\"\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\PlatformAndroid.cpp:\n   91  \n   92    // get info about png\n   93:   png_get_IHDR(png_ptr, info_ptr, &twidth, &theight, &bit_depth, &color_type,\n   94        NULL, NULL, NULL);\n   95  \n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\png.h:\n 2281  #endif\n 2282  \n 2283: extern PNG_EXPORT(png_uint_32,png_get_IHDR) PNGARG((png_structp png_ptr,\n 2284     png_infop info_ptr, png_uint_32 *width, png_uint_32 *height,\n 2285     int *bit_depth, int *color_type, int *interlace_method,\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngget.c:\n  575  \n  576  png_uint_32 PNGAPI\n  577: png_get_IHDR(png_structp png_ptr, png_infop info_ptr,\n  578     png_uint_32 *width, png_uint_32 *height, int *bit_depth,\n  579     int *color_type, int *interlace_type, int *compression_type,\n\n3 matches across 3 files\n\n\nSearching 201 files for \"PNG_DEPSTRUCT\"\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\png.h:\n  631  {\n  632     /* the following are necessary for every PNG file */\n  633:    png_uint_32 width PNG_DEPSTRUCT;  /* width of image in pixels (from IHDR) */\n  634:    png_uint_32 height PNG_DEPSTRUCT; /* height of image in pixels (from IHDR) */\n  635:    png_uint_32 valid PNG_DEPSTRUCT;  /* valid chunk data (see PNG_INFO_\n  636                                          below) */\n  637:    png_size_t rowbytes PNG_DEPSTRUCT; /* bytes needed to hold an untransformed\n  638                                           row */\n  639:    png_colorp palette PNG_DEPSTRUCT;      /* array of color values\n  640                                               (valid & PNG_INFO_PLTE) */\n  641:    png_uint_16 num_palette PNG_DEPSTRUCT; /* number of color entries in\n  642                                               \"palette\" (PLTE) */\n  643:    png_uint_16 num_trans PNG_DEPSTRUCT;   /* number of transparent palette\n  644                                               color (tRNS) */\n  645:    png_byte bit_depth PNG_DEPSTRUCT;      /* 1, 2, 4, 8, or 16 bits/channel\n  646                                               (from IHDR) */\n  647:    png_byte color_type PNG_DEPSTRUCT;     /* see PNG_COLOR_TYPE_ below\n  648                                               (from IHDR) */\n  649     /* The following three should have been named *_method not *_type */\n  650:    png_byte compression_type PNG_DEPSTRUCT; /* must be\n  651                                               PNG_COMPRESSION_TYPE_BASE (IHDR) */\n  652:    png_byte filter_type PNG_DEPSTRUCT;    /* must be PNG_FILTER_TYPE_BASE\n  653                                               (from IHDR) */\n  654:    png_byte interlace_type PNG_DEPSTRUCT; /* One of PNG_INTERLACE_NONE,\n  655                                               PNG_INTERLACE_ADAM7 */\n  656  \n  657     /* The following is informational only on read, and not used on writes. */\n  658:    png_byte channels PNG_DEPSTRUCT;       /* number of data channels per\n  659                                               pixel (1, 2, 3, 4) */\n  660:    png_byte pixel_depth PNG_DEPSTRUCT;    /* number of bits per pixel */\n  661:    png_byte spare_byte PNG_DEPSTRUCT;     /* to align the data, and for\n  662                                               future use */\n  663:    png_byte signature[8] PNG_DEPSTRUCT;   /* magic bytes read by libpng\n  664                                               from start of file */\n  665  \n  ...\n  675      * Data is valid if (valid & PNG_INFO_gAMA) is non-zero.\n  676      */\n  677:    float gamma PNG_DEPSTRUCT; /* gamma value of image,\n  678                                   if (valid & PNG_INFO_gAMA) */\n  679  #endif\n  ...\n  682      /* GR-P, 0.96a */\n  683      /* Data valid if (valid & PNG_INFO_sRGB) non-zero. */\n  684:    png_byte srgb_intent PNG_DEPSTRUCT; /* sRGB rendering intent\n  685                                            [0, 1, 2, or 3] */\n  686  #endif\n  ...\n  695      * be in an image.\n  696      */\n  697:    int num_text PNG_DEPSTRUCT; /* number of comments read/to write */\n  698:    int max_text PNG_DEPSTRUCT; /* current size of text array */\n  699:    png_textp text PNG_DEPSTRUCT; /* array of comments read/to write */\n  700  #endif /* PNG_TEXT_SUPPORTED */\n  701  \n  ...\n  704      * modified.  See the png_time struct for the contents of this struct.\n  705      */\n  706:    png_time mod_time PNG_DEPSTRUCT;\n  707  #endif\n  708  \n  ...\n  714      * (valid & PNG_INFO_sBIT) is non-zero.\n  715      */\n  716:    png_color_8 sig_bit PNG_DEPSTRUCT; /* significant bits in color channels */\n  717  #endif\n  718  \n  ...\n  728      * Data is valid if (valid & PNG_INFO_tRNS) is non-zero.\n  729      */\n  730:    png_bytep trans_alpha PNG_DEPSTRUCT;    /* alpha values for paletted\n  731                                                image */\n  732:    png_color_16 trans_color PNG_DEPSTRUCT; /* transparent color for\n  733                                                non-palette image */\n  734  #endif\n  ...\n  741      * pixel data.  Data is valid if (valid & PNG_INFO_bKGD) is non-zero.\n  742      */\n  743:    png_color_16 background PNG_DEPSTRUCT;\n  744  #endif\n  745  \n  ...\n  750      * below for the unit types.  Valid if (valid & PNG_INFO_oFFs) non-zero.\n  751      */\n  752:    png_int_32 x_offset PNG_DEPSTRUCT; /* x offset on page */\n  753:    png_int_32 y_offset PNG_DEPSTRUCT; /* y offset on page */\n  754:    png_byte offset_unit_type PNG_DEPSTRUCT; /* offset units type */\n  755  #endif\n  756  \n  ...\n  760      * defines below).  Data is valid if (valid & PNG_INFO_pHYs) is non-zero.\n  761      */\n  762:    png_uint_32 x_pixels_per_unit PNG_DEPSTRUCT; /* horizontal pixel density */\n  763:    png_uint_32 y_pixels_per_unit PNG_DEPSTRUCT; /* vertical pixel density */\n  764:    png_byte phys_unit_type PNG_DEPSTRUCT; /* resolution type (see\n  765                                               PNG_RESOLUTION_ below) */\n  766  #endif\n  ...\n  773      * is non-zero.\n  774      */\n  775:    png_uint_16p hist PNG_DEPSTRUCT;\n  776  #endif\n  777  \n  ...\n  784      */\n  785  #ifdef PNG_FLOATING_POINT_SUPPORTED\n  786:    float x_white PNG_DEPSTRUCT;\n  787:    float y_white PNG_DEPSTRUCT;\n  788:    float x_red PNG_DEPSTRUCT;\n  789:    float y_red PNG_DEPSTRUCT;\n  790:    float x_green PNG_DEPSTRUCT;\n  791:    float y_green PNG_DEPSTRUCT;\n  792:    float x_blue PNG_DEPSTRUCT;\n  793:    float y_blue PNG_DEPSTRUCT;\n  794  #endif\n  795  #endif\n  ...\n  807      * Data values are valid if (valid & PNG_INFO_pCAL) non-zero.\n  808      */\n  809:    png_charp pcal_purpose PNG_DEPSTRUCT;  /* pCAL chunk description string */\n  810:    png_int_32 pcal_X0 PNG_DEPSTRUCT;      /* minimum value */\n  811:    png_int_32 pcal_X1 PNG_DEPSTRUCT;      /* maximum value */\n  812:    png_charp pcal_units PNG_DEPSTRUCT;    /* Latin-1 string giving physical\n  813                                               units */\n  814:    png_charpp pcal_params PNG_DEPSTRUCT;  /* ASCII strings containing\n  815                                               parameter values */\n  816:    png_byte pcal_type PNG_DEPSTRUCT;      /* equation type\n  817                                               (see PNG_EQUATION_ below) */\n  818:    png_byte pcal_nparams PNG_DEPSTRUCT;   /* number of parameters given\n  819                                               in pcal_params */\n  820  #endif\n  821  \n  822  /* New members added in libpng-1.0.6 */\n  823:    png_uint_32 free_me PNG_DEPSTRUCT;     /* flags items libpng is\n  824                                               responsible for freeing */\n  825  \n  ...\n  827   defined(PNG_HANDLE_AS_UNKNOWN_SUPPORTED)\n  828     /* Storage for unknown chunks that the library doesn't recognize. */\n  829:    png_unknown_chunkp unknown_chunks PNG_DEPSTRUCT;\n  830:    png_size_t unknown_chunks_num PNG_DEPSTRUCT;\n  831  #endif\n  832  \n  833  #ifdef PNG_iCCP_SUPPORTED\n  834     /* iCCP chunk data. */\n  835:    png_charp iccp_name PNG_DEPSTRUCT;     /* profile name */\n  836:    png_charp iccp_profile PNG_DEPSTRUCT;  /* International Color Consortium\n  837                                               profile data */\n  838                              /* Note to maintainer: should be png_bytep */\n  839:    png_uint_32 iccp_proflen PNG_DEPSTRUCT;  /* ICC profile data length */\n  840:    png_byte iccp_compression PNG_DEPSTRUCT; /* Always zero */\n  841  #endif\n  842  \n  843  #ifdef PNG_sPLT_SUPPORTED\n  844     /* Data on sPLT chunks (there may be more than one). */\n  845:    png_sPLT_tp splt_palettes PNG_DEPSTRUCT;\n  846:    png_uint_32 splt_palettes_num PNG_DEPSTRUCT;\n  847  #endif\n  848  \n  ...\n  855      * here.  Data values are valid if (valid & PNG_INFO_sCAL) is non-zero.\n  856      */\n  857:    png_byte scal_unit PNG_DEPSTRUCT;         /* unit of physical scale */\n  858  #ifdef PNG_FLOATING_POINT_SUPPORTED\n  859:    double scal_pixel_width PNG_DEPSTRUCT;    /* width of one pixel */\n  860:    double scal_pixel_height PNG_DEPSTRUCT;   /* height of one pixel */\n  861  #endif\n  862  #ifdef PNG_FIXED_POINT_SUPPORTED\n  863:    png_charp scal_s_width PNG_DEPSTRUCT;     /* string containing height */\n  864:    png_charp scal_s_height PNG_DEPSTRUCT;    /* string containing width */\n  865  #endif\n  866  #endif\n  ...\n  870        non-zero */\n  871     /* Data valid if (valid & PNG_INFO_IDAT) non-zero */\n  872:    png_bytepp row_pointers PNG_DEPSTRUCT;        /* the image bits */\n  873  #endif\n  874  \n  875  #if defined(PNG_FIXED_POINT_SUPPORTED) && defined(PNG_gAMA_SUPPORTED)\n  876:    png_fixed_point int_gamma PNG_DEPSTRUCT; /* gamma of image,\n  877                                                 if (valid & PNG_INFO_gAMA) */\n  878  #endif\n  879  \n  880  #if defined(PNG_cHRM_SUPPORTED) && defined(PNG_FIXED_POINT_SUPPORTED)\n  881:    png_fixed_point int_x_white PNG_DEPSTRUCT;\n  882:    png_fixed_point int_y_white PNG_DEPSTRUCT;\n  883:    png_fixed_point int_x_red PNG_DEPSTRUCT;\n  884:    png_fixed_point int_y_red PNG_DEPSTRUCT;\n  885:    png_fixed_point int_x_green PNG_DEPSTRUCT;\n  886:    png_fixed_point int_y_green PNG_DEPSTRUCT;\n  887:    png_fixed_point int_x_blue PNG_DEPSTRUCT;\n  888:    png_fixed_point int_y_blue PNG_DEPSTRUCT;\n  889  #endif\n  890  \n  ...\n 1088  {\n 1089  #ifdef PNG_SETJMP_SUPPORTED\n 1090:    jmp_buf jmpbuf PNG_DEPSTRUCT;            /* used in png_error */\n 1091:    png_longjmp_ptr longjmp_fn PNG_DEPSTRUCT;/* setjmp non-local goto\n 1092                                                 function. */\n 1093  #endif\n 1094:    png_error_ptr error_fn PNG_DEPSTRUCT;    /* function for printing\n 1095                                                 errors and aborting */\n 1096:    png_error_ptr warning_fn PNG_DEPSTRUCT;  /* function for printing\n 1097                                                 warnings */\n 1098:    png_voidp error_ptr PNG_DEPSTRUCT;       /* user supplied struct for\n 1099                                                 error functions */\n 1100:    png_rw_ptr write_data_fn PNG_DEPSTRUCT;  /* function for writing\n 1101                                                 output data */\n 1102:    png_rw_ptr read_data_fn PNG_DEPSTRUCT;   /* function for reading\n 1103                                                 input data */\n 1104:    png_voidp io_ptr PNG_DEPSTRUCT;          /* ptr to application struct\n 1105                                                 for I/O functions */\n 1106  \n 1107  #ifdef PNG_READ_USER_TRANSFORM_SUPPORTED\n 1108:    png_user_transform_ptr read_user_transform_fn PNG_DEPSTRUCT; /* user read\n 1109                                                                   transform */\n 1110  #endif\n 1111  \n 1112  #ifdef PNG_WRITE_USER_TRANSFORM_SUPPORTED\n 1113:    png_user_transform_ptr write_user_transform_fn PNG_DEPSTRUCT; /* user write\n 1114                                                                    transform */\n 1115  #endif\n ....\n 1119  #if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \\\n 1120      defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)\n 1121:    png_voidp user_transform_ptr PNG_DEPSTRUCT; /* user supplied struct\n 1122                                                    for user transform */\n 1123:    png_byte user_transform_depth PNG_DEPSTRUCT;    /* bit depth of user\n 1124                                                        transformed pixels */\n 1125:    png_byte user_transform_channels PNG_DEPSTRUCT; /* channels in user\n 1126                                                        transformed pixels */\n 1127  #endif\n 1128  #endif\n 1129  \n 1130:    png_uint_32 mode PNG_DEPSTRUCT;          /* tells us where we are in\n 1131                                                 the PNG file */\n 1132:    png_uint_32 flags PNG_DEPSTRUCT;         /* flags indicating various\n 1133                                                 things to libpng */\n 1134:    png_uint_32 transformations PNG_DEPSTRUCT; /* which transformations\n 1135                                                   to perform */\n 1136  \n 1137:    z_stream zstream PNG_DEPSTRUCT;          /* pointer to decompression\n 1138                                                 structure (below) */\n 1139:    png_bytep zbuf PNG_DEPSTRUCT;            /* buffer for zlib */\n 1140:    png_size_t zbuf_size PNG_DEPSTRUCT;      /* size of zbuf */\n 1141:    int zlib_level PNG_DEPSTRUCT;            /* holds zlib compression level */\n 1142:    int zlib_method PNG_DEPSTRUCT;           /* holds zlib compression method */\n 1143:    int zlib_window_bits PNG_DEPSTRUCT;      /* holds zlib compression window\n 1144                                                 bits */\n 1145:    int zlib_mem_level PNG_DEPSTRUCT;        /* holds zlib compression memory\n 1146                                                 level */\n 1147:    int zlib_strategy PNG_DEPSTRUCT;         /* holds zlib compression\n 1148                                                 strategy */\n 1149  \n 1150:    png_uint_32 width PNG_DEPSTRUCT;         /* width of image in pixels */\n 1151:    png_uint_32 height PNG_DEPSTRUCT;        /* height of image in pixels */\n 1152:    png_uint_32 num_rows PNG_DEPSTRUCT;      /* number of rows in current pass */\n 1153:    png_uint_32 usr_width PNG_DEPSTRUCT;     /* width of row at start of write */\n 1154:    png_size_t rowbytes PNG_DEPSTRUCT;       /* size of row in bytes */\n 1155  #if 0 /* Replaced with the following in libpng-1.4.1 */\n 1156:    png_size_t irowbytes PNG_DEPSTRUCT;\n 1157  #endif\n 1158  /* Added in libpng-1.4.1 */\n ....\n 1163      * in libpng-1.6.0\n 1164      */\n 1165:    png_alloc_size_t user_chunk_malloc_max PNG_DEPSTRUCT;\n 1166  #endif\n 1167:    png_uint_32 iwidth PNG_DEPSTRUCT;        /* width of current interlaced\n 1168                                                 row in pixels */\n 1169:    png_uint_32 row_number PNG_DEPSTRUCT;    /* current row in interlace pass */\n 1170:    png_bytep prev_row PNG_DEPSTRUCT;        /* buffer to save previous\n 1171                                                 (unfiltered) row */\n 1172:    png_bytep row_buf PNG_DEPSTRUCT;         /* buffer to save current\n 1173                                                 (unfiltered) row */\n 1174:    png_bytep sub_row PNG_DEPSTRUCT;         /* buffer to save \"sub\" row\n 1175                                                 when filtering */\n 1176:    png_bytep up_row PNG_DEPSTRUCT;          /* buffer to save \"up\" row\n 1177                                                 when filtering */\n 1178:    png_bytep avg_row PNG_DEPSTRUCT;         /* buffer to save \"avg\" row\n 1179                                                 when filtering */\n 1180:    png_bytep paeth_row PNG_DEPSTRUCT;       /* buffer to save \"Paeth\" row\n 1181                                                 when filtering */\n 1182:    png_row_info row_info PNG_DEPSTRUCT;     /* used for transformation\n 1183                                                 routines */\n 1184  \n 1185:    png_uint_32 idat_size PNG_DEPSTRUCT;     /* current IDAT size for read */\n 1186:    png_uint_32 crc PNG_DEPSTRUCT;           /* current chunk CRC value */\n 1187:    png_colorp palette PNG_DEPSTRUCT;        /* palette from the input file */\n 1188:    png_uint_16 num_palette PNG_DEPSTRUCT;   /* number of color entries in\n 1189                                                 palette */\n 1190:    png_uint_16 num_trans PNG_DEPSTRUCT;     /* number of transparency values */\n 1191:    png_byte chunk_name[5] PNG_DEPSTRUCT;    /* null-terminated name of current\n 1192                                                 chunk */\n 1193:    png_byte compression PNG_DEPSTRUCT;      /* file compression type\n 1194                                                 (always 0) */\n 1195:    png_byte filter PNG_DEPSTRUCT;           /* file filter type (always 0) */\n 1196:    png_byte interlaced PNG_DEPSTRUCT;       /* PNG_INTERLACE_NONE,\n 1197                                                 PNG_INTERLACE_ADAM7 */\n 1198:    png_byte pass PNG_DEPSTRUCT;             /* current interlace pass (0 - 6) */\n 1199:    png_byte do_filter PNG_DEPSTRUCT;        /* row filter flags (see\n 1200                                                 PNG_FILTER_ below ) */\n 1201:    png_byte color_type PNG_DEPSTRUCT;       /* color type of file */\n 1202:    png_byte bit_depth PNG_DEPSTRUCT;        /* bit depth of file */\n 1203:    png_byte usr_bit_depth PNG_DEPSTRUCT;    /* bit depth of users row */\n 1204:    png_byte pixel_depth PNG_DEPSTRUCT;      /* number of bits per pixel */\n 1205:    png_byte channels PNG_DEPSTRUCT;         /* number of channels in file */\n 1206:    png_byte usr_channels PNG_DEPSTRUCT;     /* channels at start of write */\n 1207:    png_byte sig_bytes PNG_DEPSTRUCT;        /* magic bytes read/written from\n 1208                                                 start of file */\n 1209  \n 1210  #if defined(PNG_READ_FILLER_SUPPORTED) || defined(PNG_WRITE_FILLER_SUPPORTED)\n 1211:    png_uint_16 filler PNG_DEPSTRUCT;           /* filler bytes for pixel\n 1212                                                    expansion */\n 1213  #endif\n 1214  \n 1215  #ifdef PNG_bKGD_SUPPORTED\n 1216:    png_byte background_gamma_type PNG_DEPSTRUCT;\n 1217  #  ifdef PNG_FLOATING_POINT_SUPPORTED\n 1218:    float background_gamma PNG_DEPSTRUCT;\n 1219  #  endif\n 1220:    png_color_16 background PNG_DEPSTRUCT;   /* background color in\n 1221                                                 screen gamma space */\n 1222  #ifdef PNG_READ_GAMMA_SUPPORTED\n 1223:    png_color_16 background_1 PNG_DEPSTRUCT; /* background normalized\n 1224                                                 to gamma 1.0 */\n 1225  #endif\n ....\n 1227  \n 1228  #ifdef PNG_WRITE_FLUSH_SUPPORTED\n 1229:    png_flush_ptr output_flush_fn PNG_DEPSTRUCT; /* Function for flushing\n 1230                                                 output */\n 1231:    png_uint_32 flush_dist PNG_DEPSTRUCT;    /* how many rows apart to flush,\n 1232                                                 0 - no flush */\n 1233:    png_uint_32 flush_rows PNG_DEPSTRUCT;    /* number of rows written since\n 1234                                                 last flush */\n 1235  #endif\n 1236  \n 1237  #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n 1238:    int gamma_shift PNG_DEPSTRUCT;      /* number of \"insignificant\" bits\n 1239                                            16-bit gamma */\n 1240  #ifdef PNG_FLOATING_POINT_SUPPORTED\n 1241:    float gamma PNG_DEPSTRUCT;          /* file gamma value */\n 1242:    float screen_gamma PNG_DEPSTRUCT;   /* screen gamma value\n 1243                                            (display_exponent) */\n 1244  #endif\n ....\n 1246  \n 1247  #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n 1248:    png_bytep gamma_table PNG_DEPSTRUCT;     /* gamma table for 8-bit\n 1249                                                 depth files */\n 1250:    png_bytep gamma_from_1 PNG_DEPSTRUCT;    /* converts from 1.0 to screen */\n 1251:    png_bytep gamma_to_1 PNG_DEPSTRUCT;      /* converts from file to 1.0 */\n 1252:    png_uint_16pp gamma_16_table PNG_DEPSTRUCT; /* gamma table for 16-bit\n 1253                                                    depth files */\n 1254:    png_uint_16pp gamma_16_from_1 PNG_DEPSTRUCT; /* converts from 1.0 to\n 1255                                                     screen */\n 1256:    png_uint_16pp gamma_16_to_1 PNG_DEPSTRUCT; /* converts from file to 1.0 */\n 1257  #endif\n 1258  \n 1259  #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_sBIT_SUPPORTED)\n 1260:    png_color_8 sig_bit PNG_DEPSTRUCT;       /* significant bits in each\n 1261                                                 available channel */\n 1262  #endif\n 1263  \n 1264  #if defined(PNG_READ_SHIFT_SUPPORTED) || defined(PNG_WRITE_SHIFT_SUPPORTED)\n 1265:    png_color_8 shift PNG_DEPSTRUCT;         /* shift for significant bit\n 1266                                                 tranformation */\n 1267  #endif\n ....\n 1269  #if defined(PNG_tRNS_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED) \\\n 1270   || defined(PNG_READ_EXPAND_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n 1271:    png_bytep trans_alpha PNG_DEPSTRUCT;           /* alpha values for\n 1272                                                       paletted files */\n 1273:    png_color_16 trans_color PNG_DEPSTRUCT;  /* transparent color for\n 1274                                                 non-paletted files */\n 1275  #endif\n 1276  \n 1277:    png_read_status_ptr read_row_fn PNG_DEPSTRUCT;   /* called after each\n 1278                                                         row is decoded */\n 1279:    png_write_status_ptr write_row_fn PNG_DEPSTRUCT; /* called after each\n 1280                                                         row is encoded */\n 1281  #ifdef PNG_PROGRESSIVE_READ_SUPPORTED\n 1282:    png_progressive_info_ptr info_fn PNG_DEPSTRUCT; /* called after header\n 1283                                                        data fully read */\n 1284:    png_progressive_row_ptr row_fn PNG_DEPSTRUCT;   /* called after each\n 1285                                                        prog. row is decoded */\n 1286:    png_progressive_end_ptr end_fn PNG_DEPSTRUCT;   /* called after image\n 1287                                                        is complete */\n 1288:    png_bytep save_buffer_ptr PNG_DEPSTRUCT;        /* current location in\n 1289                                                        save_buffer */\n 1290:    png_bytep save_buffer PNG_DEPSTRUCT;            /* buffer for previously\n 1291                                                        read data */\n 1292:    png_bytep current_buffer_ptr PNG_DEPSTRUCT;     /* current location in\n 1293                                                        current_buffer */\n 1294:    png_bytep current_buffer PNG_DEPSTRUCT;         /* buffer for recently\n 1295                                                        used data */\n 1296:    png_uint_32 push_length PNG_DEPSTRUCT;          /* size of current input\n 1297                                                        chunk */\n 1298:    png_uint_32 skip_length PNG_DEPSTRUCT;          /* bytes to skip in\n 1299                                                        input data */\n 1300:    png_size_t save_buffer_size PNG_DEPSTRUCT;      /* amount of data now\n 1301                                                        in save_buffer */\n 1302:    png_size_t save_buffer_max PNG_DEPSTRUCT;       /* total size of\n 1303                                                        save_buffer */\n 1304:    png_size_t buffer_size PNG_DEPSTRUCT;           /* total amount of\n 1305                                                        available input data */\n 1306:    png_size_t current_buffer_size PNG_DEPSTRUCT;   /* amount of data now\n 1307                                                        in current_buffer */\n 1308:    int process_mode PNG_DEPSTRUCT;                 /* what push library\n 1309                                                        is currently doing */\n 1310:    int cur_palette PNG_DEPSTRUCT;                  /* current push library\n 1311                                                        palette index */\n 1312  \n 1313  #  ifdef PNG_TEXT_SUPPORTED\n 1314:      png_size_t current_text_size PNG_DEPSTRUCT;   /* current size of\n 1315                                                        text input data */\n 1316:      png_size_t current_text_left PNG_DEPSTRUCT;   /* how much text left\n 1317                                                        to read in input */\n 1318:      png_charp current_text PNG_DEPSTRUCT;         /* current text chunk\n 1319                                                        buffer */\n 1320:      png_charp current_text_ptr PNG_DEPSTRUCT;     /* current location\n 1321                                                        in current_text */\n 1322  #  endif /* PNG_PROGRESSIVE_READ_SUPPORTED && PNG_TEXT_SUPPORTED */\n ....\n 1326  #if defined(__TURBOC__) && !defined(_Windows) && !defined(__FLAT__)\n 1327  /* For the Borland special 64K segment handler */\n 1328:    png_bytepp offset_table_ptr PNG_DEPSTRUCT;\n 1329:    png_bytep offset_table PNG_DEPSTRUCT;\n 1330:    png_uint_16 offset_table_number PNG_DEPSTRUCT;\n 1331:    png_uint_16 offset_table_count PNG_DEPSTRUCT;\n 1332:    png_uint_16 offset_table_count_free PNG_DEPSTRUCT;\n 1333  #endif\n 1334  \n 1335  #ifdef PNG_READ_DITHER_SUPPORTED\n 1336:    png_bytep palette_lookup PNG_DEPSTRUCT; /* lookup table for dithering */\n 1337:    png_bytep dither_index PNG_DEPSTRUCT;   /* index translation for palette\n 1338                                                files */\n 1339  #endif\n 1340  \n 1341  #if defined(PNG_READ_DITHER_SUPPORTED) || defined(PNG_hIST_SUPPORTED)\n 1342:    png_uint_16p hist PNG_DEPSTRUCT;                /* histogram */\n 1343  #endif\n 1344  \n 1345  #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED\n 1346:    png_byte heuristic_method PNG_DEPSTRUCT;        /* heuristic for row\n 1347                                                        filter selection */\n 1348:    png_byte num_prev_filters PNG_DEPSTRUCT;        /* number of weights\n 1349                                                        for previous rows */\n 1350:    png_bytep prev_filters PNG_DEPSTRUCT;           /* filter type(s) of\n 1351                                                        previous row(s) */\n 1352:    png_uint_16p filter_weights PNG_DEPSTRUCT;      /* weight(s) for previous\n 1353                                                        line(s) */\n 1354:    png_uint_16p inv_filter_weights PNG_DEPSTRUCT;  /* 1/weight(s) for\n 1355                                                        previous line(s) */\n 1356:    png_uint_16p filter_costs PNG_DEPSTRUCT;        /* relative filter\n 1357                                                        calculation cost */\n 1358:    png_uint_16p inv_filter_costs PNG_DEPSTRUCT;    /* 1/relative filter\n 1359                                                        calculation cost */\n 1360  #endif\n 1361  \n 1362  #ifdef PNG_TIME_RFC1123_SUPPORTED\n 1363:    png_charp time_buffer PNG_DEPSTRUCT; /* String to hold RFC 1123 time text */\n 1364  #endif\n 1365  \n 1366  /* New members added in libpng-1.0.6 */\n 1367  \n 1368:    png_uint_32 free_me PNG_DEPSTRUCT;    /* flags items libpng is\n 1369                                              responsible for freeing */\n 1370  \n 1371  #ifdef PNG_USER_CHUNKS_SUPPORTED\n 1372:    png_voidp user_chunk_ptr PNG_DEPSTRUCT;\n 1373:    png_user_chunk_ptr read_user_chunk_fn PNG_DEPSTRUCT; /* user read\n 1374                                                             chunk handler */\n 1375  #endif\n 1376  \n 1377  #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED\n 1378:    int num_chunk_list PNG_DEPSTRUCT;\n 1379:    png_bytep chunk_list PNG_DEPSTRUCT;\n 1380  #endif\n 1381  \n 1382  /* New members added in libpng-1.0.3 */\n 1383  #ifdef PNG_READ_RGB_TO_GRAY_SUPPORTED\n 1384:    png_byte rgb_to_gray_status PNG_DEPSTRUCT;\n 1385     /* These were changed from png_byte in libpng-1.0.6 */\n 1386:    png_uint_16 rgb_to_gray_red_coeff PNG_DEPSTRUCT;\n 1387:    png_uint_16 rgb_to_gray_green_coeff PNG_DEPSTRUCT;\n 1388:    png_uint_16 rgb_to_gray_blue_coeff PNG_DEPSTRUCT;\n 1389  #endif\n 1390  \n ....\n 1394      defined(PNG_WRITE_EMPTY_PLTE_SUPPORTED)\n 1395  /* Changed from png_byte to png_uint_32 at version 1.2.0 */\n 1396:    png_uint_32 mng_features_permitted PNG_DEPSTRUCT;\n 1397  #endif\n 1398  \n 1399  /* New member added in libpng-1.0.7 */\n 1400  #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)\n 1401:    png_fixed_point int_gamma PNG_DEPSTRUCT;\n 1402  #endif\n 1403  \n 1404  /* New member added in libpng-1.0.9, ifdef'ed out in 1.0.12, enabled in 1.2.0 */\n 1405  #ifdef PNG_MNG_FEATURES_SUPPORTED\n 1406:    png_byte filter_type PNG_DEPSTRUCT;\n 1407  #endif\n 1408  \n ....\n 1411  /* New members added in libpng-1.0.2 but first enabled by default in 1.2.0 */\n 1412  #ifdef PNG_USER_MEM_SUPPORTED\n 1413:    png_voidp mem_ptr PNG_DEPSTRUCT;             /* user supplied struct for\n 1414                                                     mem functions */\n 1415:    png_malloc_ptr malloc_fn PNG_DEPSTRUCT;      /* function for\n 1416                                                     allocating memory */\n 1417:    png_free_ptr free_fn PNG_DEPSTRUCT;          /* function for\n 1418                                                     freeing memory */\n 1419  #endif\n 1420  \n 1421  /* New member added in libpng-1.0.13 and 1.2.0 */\n 1422:    png_bytep big_row_buf PNG_DEPSTRUCT;         /* buffer to save current\n 1423                                                     (unfiltered) row */\n 1424  \n 1425  #ifdef PNG_READ_DITHER_SUPPORTED\n 1426  /* The following three members were added at version 1.0.14 and 1.2.4 */\n 1427:    png_bytep dither_sort PNG_DEPSTRUCT;            /* working sort array */\n 1428:    png_bytep index_to_palette PNG_DEPSTRUCT;       /* where the original\n 1429                                                       index currently is\n 1430                                                       in the palette */\n 1431:    png_bytep palette_to_index PNG_DEPSTRUCT;       /* which original index\n 1432                                                        points to this\n 1433                                                        palette color */\n ....\n 1435  \n 1436  /* New members added in libpng-1.0.16 and 1.2.6 */\n 1437:    png_byte compression_type PNG_DEPSTRUCT;\n 1438  \n 1439  #ifdef PNG_USER_LIMITS_SUPPORTED\n 1440:    png_uint_32 user_width_max PNG_DEPSTRUCT;\n 1441:    png_uint_32 user_height_max PNG_DEPSTRUCT;\n 1442     /* Added in libpng-1.4.0: Total number of sPLT, text, and unknown\n 1443      * chunks that can be stored (0 means unlimited).\n 1444      */\n 1445:    png_uint_32 user_chunk_cache_max PNG_DEPSTRUCT;\n 1446  #endif\n 1447  \n ....\n 1449  #ifdef PNG_UNKNOWN_CHUNKS_SUPPORTED\n 1450     /* Storage for unknown chunk that the library doesn't recognize. */\n 1451:    png_unknown_chunk unknown_chunk PNG_DEPSTRUCT;\n 1452  #endif\n 1453  \n 1454  /* New members added in libpng-1.2.26 */\n 1455:   png_uint_32 old_big_row_buf_size PNG_DEPSTRUCT;\n 1456:   png_uint_32 old_prev_row_size PNG_DEPSTRUCT;\n 1457  \n 1458  /* New member added in libpng-1.2.30 */\n 1459:   png_charp chunkdata PNG_DEPSTRUCT;  /* buffer for reading chunk data */\n 1460  \n 1461  #ifdef PNG_IO_STATE_SUPPORTED\n 1462  /* New member added in libpng-1.4.0 */\n 1463:    png_uint_32 io_state PNG_DEPSTRUCT;\n 1464  #endif\n 1465  };\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngconf.h:\n 1358  #      define PNG_DEPRECATED __attribute__((__deprecated__))\n 1359  #    endif\n 1360: #    ifndef PNG_DEPSTRUCT\n 1361: #      define PNG_DEPSTRUCT  __attribute__((__deprecated__))\n 1362  #    endif\n 1363  #    ifndef PNG_PRIVATE\n ....\n 1385  #  define PNG_ALLOCATED   /* The result of the function is new memory */\n 1386  #endif\n 1387: #ifndef PNG_DEPSTRUCT\n 1388: #  define PNG_DEPSTRUCT   /* Access to this struct member is deprecated */\n 1389  #endif\n 1390  #ifndef PNG_PRIVATE\n\n220 matches across 2 files\n\n\nSearching 201 files for \"png_infop\"\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\PlatformAndroid.cpp:\n   49  \n   50    //create png info struct\n   51:   png_infop info_ptr = png_create_info_struct(png_ptr);\n   52    if (!info_ptr) {\n   53:     png_destroy_read_struct(&png_ptr, (png_infopp) NULL, (png_infopp) NULL);\n   54      LOGE(\"Unable to create png info : %s\", filename);\n   55      zip_fclose(file);\n   ..\n   58  \n   59    //create png info struct\n   60:   png_infop end_info = png_create_info_struct(png_ptr);\n   61    if (!end_info) {\n   62:     png_destroy_read_struct(&png_ptr, &info_ptr, (png_infopp) NULL);\n   63      LOGE(\"Unable to create png end info : %s\", filename);\n   64      zip_fclose(file);\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\png.c:\n  147   * libpng don't have to be recompiled if png_info changes size.\n  148   */\n  149: png_infop PNGAPI\n  150  png_create_info_struct(png_structp png_ptr)\n  151  {\n  152:    png_infop info_ptr;\n  153  \n  154     png_debug(1, \"in png_create_info_struct\");\n  ...\n  158  \n  159  #ifdef PNG_USER_MEM_SUPPORTED\n  160:    info_ptr = (png_infop)png_create_struct_2(PNG_STRUCT_INFO,\n  161        png_ptr->malloc_fn, png_ptr->mem_ptr);\n  162  #else\n  163:    info_ptr = (png_infop)png_create_struct(PNG_STRUCT_INFO);\n  164  #endif\n  165     if (info_ptr != NULL)\n  ...\n  175   */\n  176  void PNGAPI\n  177: png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr)\n  178  {\n  179:    png_infop info_ptr = NULL;\n  180  \n  181     png_debug(1, \"in png_destroy_info_struct\");\n  ...\n  207  \n  208  void PNGAPI\n  209: png_info_init_3(png_infopp ptr_ptr, png_size_t png_info_struct_size)\n  210  {\n  211:    png_infop info_ptr = *ptr_ptr;\n  212  \n  213     png_debug(1, \"in png_info_init_3\");\n  ...\n  219     {\n  220        png_destroy_struct(info_ptr);\n  221:       info_ptr = (png_infop)png_create_struct(PNG_STRUCT_INFO);\n  222        *ptr_ptr = info_ptr;\n  223     }\n  ...\n  228  \n  229  void PNGAPI\n  230: png_data_freer(png_structp png_ptr, png_infop info_ptr,\n  231     int freer, png_uint_32 mask)\n  232  {\n  ...\n  246  \n  247  void PNGAPI\n  248: png_free_data(png_structp png_ptr, png_infop info_ptr, png_uint_32 mask,\n  249     int num)\n  250  {\n  ...\n  451   */\n  452  void /* PRIVATE */\n  453: png_info_destroy(png_structp png_ptr, png_infop info_ptr)\n  454  {\n  455     png_debug(1, \"in png_info_destroy\");\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\png.h:\n  891  } png_info;\n  892  \n  893: typedef png_info FAR * png_infop;\n  894: typedef png_info FAR * FAR * png_infopp;\n  895  \n  896  /* Maximum positive integer used in PNG is (2^31)-1 */\n  ...\n 1023  #ifdef PNG_PROGRESSIVE_READ_SUPPORTED\n 1024  typedef void (PNGAPI *png_progressive_info_ptr) PNGARG((png_structp,\n 1025:    png_infop));\n 1026: typedef void (PNGAPI *png_progressive_end_ptr) PNGARG((png_structp, png_infop));\n 1027  typedef void (PNGAPI *png_progressive_row_ptr) PNGARG((png_structp, png_bytep,\n 1028     png_uint_32, int));\n ....\n 1567  \n 1568  /* Allocate and initialize the info structure */\n 1569: extern PNG_EXPORT(png_infop,png_create_info_struct)\n 1570     PNGARG((png_structp png_ptr)) PNG_ALLOCATED;\n 1571  \n 1572: extern PNG_EXPORT(void,png_info_init_3) PNGARG((png_infopp info_ptr,\n 1573      png_size_t png_info_struct_size));\n 1574  \n 1575  /* Writes all the PNG information before the image. */\n 1576  extern PNG_EXPORT(void,png_write_info_before_PLTE) PNGARG((png_structp png_ptr,\n 1577:    png_infop info_ptr));\n 1578  extern PNG_EXPORT(void,png_write_info) PNGARG((png_structp png_ptr,\n 1579:    png_infop info_ptr));\n 1580  \n 1581  #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n 1582  /* Read the information before the actual image data. */\n 1583  extern PNG_EXPORT(void,png_read_info) PNGARG((png_structp png_ptr,\n 1584:    png_infop info_ptr));\n 1585  #endif\n 1586  \n ....\n 1741  /* Optional call to update the users info structure */\n 1742  extern PNG_EXPORT(void,png_read_update_info) PNGARG((png_structp png_ptr,\n 1743:    png_infop info_ptr));\n 1744  \n 1745  #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n ....\n 1776  /* Write the end of the PNG file. */\n 1777  extern PNG_EXPORT(void,png_write_end) PNGARG((png_structp png_ptr,\n 1778:    png_infop info_ptr));\n 1779  \n 1780  #ifdef PNG_SEQUENTIAL_READ_SUPPORTED\n 1781  /* Read the end of the PNG file. */\n 1782  extern PNG_EXPORT(void,png_read_end) PNGARG((png_structp png_ptr,\n 1783:    png_infop info_ptr));\n 1784  #endif\n 1785  \n 1786  /* Free any memory associated with the png_info_struct */\n 1787  extern PNG_EXPORT(void,png_destroy_info_struct) PNGARG((png_structp png_ptr,\n 1788:    png_infopp info_ptr_ptr));\n 1789  \n 1790  /* Free any memory associated with the png_struct and the png_info_structs */\n 1791  extern PNG_EXPORT(void,png_destroy_read_struct) PNGARG((png_structpp\n 1792:    png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr));\n 1793  \n 1794  /* Free any memory associated with the png_struct and the png_info_structs */\n 1795  extern PNG_EXPORT(void,png_destroy_write_struct)\n 1796:    PNGARG((png_structpp png_ptr_ptr, png_infopp info_ptr_ptr));\n 1797  \n 1798  /* Set the libpng method of handling chunk CRC errors */\n ....\n 2025  /* Function to be called when data becomes available */\n 2026  extern PNG_EXPORT(void,png_process_data) PNGARG((png_structp png_ptr,\n 2027:    png_infop info_ptr, png_bytep buffer, png_size_t buffer_size));\n 2028  \n 2029  /* Function that combines rows.  Not very much different than the\n ....\n 2049  /* Free data that was allocated internally */\n 2050  extern PNG_EXPORT(void,png_free_data) PNGARG((png_structp png_ptr,\n 2051:    png_infop info_ptr, png_uint_32 free_me, int num));\n 2052  /* Reassign responsibility for freeing existing data, whether allocated\n 2053   * by libpng or by the application */\n 2054  extern PNG_EXPORT(void,png_data_freer) PNGARG((png_structp png_ptr,\n 2055:    png_infop info_ptr, int freer, png_uint_32 mask));\n 2056  /* Assignments for png_data_freer */\n 2057  #define PNG_DESTROY_WILL_FREE_DATA 1\n ....\n 2130  /* Returns \"flag\" if chunk data is valid in info_ptr. */\n 2131  extern PNG_EXPORT(png_uint_32,png_get_valid) PNGARG((png_structp png_ptr,\n 2132: png_infop info_ptr, png_uint_32 flag));\n 2133  \n 2134  /* Returns number of bytes needed to hold a transformed row. */\n 2135  extern PNG_EXPORT(png_size_t,png_get_rowbytes) PNGARG((png_structp png_ptr,\n 2136: png_infop info_ptr));\n 2137  \n 2138  #ifdef PNG_INFO_IMAGE_SUPPORTED\n ....\n 2141   */\n 2142  extern PNG_EXPORT(png_bytepp,png_get_rows) PNGARG((png_structp png_ptr,\n 2143: png_infop info_ptr));\n 2144  /* Set row_pointers, which is an array of pointers to scanlines for use\n 2145   * by png_write_png().\n 2146   */\n 2147  extern PNG_EXPORT(void,png_set_rows) PNGARG((png_structp png_ptr,\n 2148:    png_infop info_ptr, png_bytepp row_pointers));\n 2149  #endif\n 2150  \n 2151  /* Returns number of color channels in image. */\n 2152  extern PNG_EXPORT(png_byte,png_get_channels) PNGARG((png_structp png_ptr,\n 2153: png_infop info_ptr));\n 2154  \n 2155  #ifdef PNG_EASY_ACCESS_SUPPORTED\n 2156  /* Returns image width in pixels. */\n 2157  extern PNG_EXPORT(png_uint_32, png_get_image_width) PNGARG((png_structp\n 2158: png_ptr, png_infop info_ptr));\n 2159  \n 2160  /* Returns image height in pixels. */\n 2161  extern PNG_EXPORT(png_uint_32, png_get_image_height) PNGARG((png_structp\n 2162: png_ptr, png_infop info_ptr));\n 2163  \n 2164  /* Returns image bit_depth. */\n 2165  extern PNG_EXPORT(png_byte, png_get_bit_depth) PNGARG((png_structp\n 2166: png_ptr, png_infop info_ptr));\n 2167  \n 2168  /* Returns image color_type. */\n 2169  extern PNG_EXPORT(png_byte, png_get_color_type) PNGARG((png_structp\n 2170: png_ptr, png_infop info_ptr));\n 2171  \n 2172  /* Returns image filter_type. */\n 2173  extern PNG_EXPORT(png_byte, png_get_filter_type) PNGARG((png_structp\n 2174: png_ptr, png_infop info_ptr));\n 2175  \n 2176  /* Returns image interlace_type. */\n 2177  extern PNG_EXPORT(png_byte, png_get_interlace_type) PNGARG((png_structp\n 2178: png_ptr, png_infop info_ptr));\n 2179  \n 2180  /* Returns image compression_type. */\n 2181  extern PNG_EXPORT(png_byte, png_get_compression_type) PNGARG((png_structp\n 2182: png_ptr, png_infop info_ptr));\n 2183  \n 2184  /* Returns image resolution in pixels per meter, from pHYs chunk data. */\n 2185  extern PNG_EXPORT(png_uint_32, png_get_pixels_per_meter) PNGARG((png_structp\n 2186: png_ptr, png_infop info_ptr));\n 2187  extern PNG_EXPORT(png_uint_32, png_get_x_pixels_per_meter) PNGARG((png_structp\n 2188: png_ptr, png_infop info_ptr));\n 2189  extern PNG_EXPORT(png_uint_32, png_get_y_pixels_per_meter) PNGARG((png_structp\n 2190: png_ptr, png_infop info_ptr));\n 2191  \n 2192  /* Returns pixel aspect ratio, computed from pHYs chunk data.  */\n 2193  #ifdef PNG_FLOATING_POINT_SUPPORTED\n 2194  extern PNG_EXPORT(float, png_get_pixel_aspect_ratio) PNGARG((png_structp\n 2195: png_ptr, png_infop info_ptr));\n 2196  #endif\n 2197  \n 2198  /* Returns image x, y offset in pixels or microns, from oFFs chunk data. */\n 2199  extern PNG_EXPORT(png_int_32, png_get_x_offset_pixels) PNGARG((png_structp\n 2200: png_ptr, png_infop info_ptr));\n 2201  extern PNG_EXPORT(png_int_32, png_get_y_offset_pixels) PNGARG((png_structp\n 2202: png_ptr, png_infop info_ptr));\n 2203  extern PNG_EXPORT(png_int_32, png_get_x_offset_microns) PNGARG((png_structp\n 2204: png_ptr, png_infop info_ptr));\n 2205  extern PNG_EXPORT(png_int_32, png_get_y_offset_microns) PNGARG((png_structp\n 2206: png_ptr, png_infop info_ptr));\n 2207  \n 2208  #endif /* PNG_EASY_ACCESS_SUPPORTED */\n ....\n 2210  /* Returns pointer to signature string read from PNG header */\n 2211  extern PNG_EXPORT(png_bytep,png_get_signature) PNGARG((png_structp png_ptr,\n 2212: png_infop info_ptr));\n 2213  \n 2214  #ifdef PNG_bKGD_SUPPORTED\n 2215  extern PNG_EXPORT(png_uint_32,png_get_bKGD) PNGARG((png_structp png_ptr,\n 2216:    png_infop info_ptr, png_color_16p *background));\n 2217  #endif\n 2218  \n 2219  #ifdef PNG_bKGD_SUPPORTED\n 2220  extern PNG_EXPORT(void,png_set_bKGD) PNGARG((png_structp png_ptr,\n 2221:    png_infop info_ptr, png_color_16p background));\n 2222  #endif\n 2223  \n ....\n 2225  #ifdef PNG_FLOATING_POINT_SUPPORTED\n 2226  extern PNG_EXPORT(png_uint_32,png_get_cHRM) PNGARG((png_structp png_ptr,\n 2227:    png_infop info_ptr, double *white_x, double *white_y, double *red_x,\n 2228     double *red_y, double *green_x, double *green_y, double *blue_x,\n 2229     double *blue_y));\n ....\n 2231  #ifdef PNG_FIXED_POINT_SUPPORTED\n 2232  extern PNG_EXPORT(png_uint_32,png_get_cHRM_fixed) PNGARG((png_structp png_ptr,\n 2233:    png_infop info_ptr, png_fixed_point *int_white_x, png_fixed_point\n 2234     *int_white_y, png_fixed_point *int_red_x, png_fixed_point *int_red_y,\n 2235     png_fixed_point *int_green_x, png_fixed_point *int_green_y, png_fixed_point\n ....\n 2241  #ifdef PNG_FLOATING_POINT_SUPPORTED\n 2242  extern PNG_EXPORT(void,png_set_cHRM) PNGARG((png_structp png_ptr,\n 2243:    png_infop info_ptr, double white_x, double white_y, double red_x,\n 2244     double red_y, double green_x, double green_y, double blue_x, double blue_y));\n 2245  #endif\n 2246  #ifdef PNG_FIXED_POINT_SUPPORTED\n 2247  extern PNG_EXPORT(void,png_set_cHRM_fixed) PNGARG((png_structp png_ptr,\n 2248:    png_infop info_ptr, png_fixed_point int_white_x, png_fixed_point int_white_y,\n 2249     png_fixed_point int_red_x, png_fixed_point int_red_y, png_fixed_point\n 2250     int_green_x, png_fixed_point int_green_y, png_fixed_point int_blue_x,\n ....\n 2256  #ifdef PNG_FLOATING_POINT_SUPPORTED\n 2257  extern PNG_EXPORT(png_uint_32,png_get_gAMA) PNGARG((png_structp png_ptr,\n 2258:    png_infop info_ptr, double *file_gamma));\n 2259  #endif\n 2260  extern PNG_EXPORT(png_uint_32,png_get_gAMA_fixed) PNGARG((png_structp png_ptr,\n 2261:    png_infop info_ptr, png_fixed_point *int_file_gamma));\n 2262  #endif\n 2263  \n ....\n 2265  #ifdef PNG_FLOATING_POINT_SUPPORTED\n 2266  extern PNG_EXPORT(void,png_set_gAMA) PNGARG((png_structp png_ptr,\n 2267:    png_infop info_ptr, double file_gamma));\n 2268  #endif\n 2269  extern PNG_EXPORT(void,png_set_gAMA_fixed) PNGARG((png_structp png_ptr,\n 2270:    png_infop info_ptr, png_fixed_point int_file_gamma));\n 2271  #endif\n 2272  \n 2273  #ifdef PNG_hIST_SUPPORTED\n 2274  extern PNG_EXPORT(png_uint_32,png_get_hIST) PNGARG((png_structp png_ptr,\n 2275:    png_infop info_ptr, png_uint_16p *hist));\n 2276  #endif\n 2277  \n 2278  #ifdef PNG_hIST_SUPPORTED\n 2279  extern PNG_EXPORT(void,png_set_hIST) PNGARG((png_structp png_ptr,\n 2280:    png_infop info_ptr, png_uint_16p hist));\n 2281  #endif\n 2282  \n 2283  extern PNG_EXPORT(png_uint_32,png_get_IHDR) PNGARG((png_structp png_ptr,\n 2284:    png_infop info_ptr, png_uint_32 *width, png_uint_32 *height,\n 2285     int *bit_depth, int *color_type, int *interlace_method,\n 2286     int *compression_method, int *filter_method));\n 2287  \n 2288  extern PNG_EXPORT(void,png_set_IHDR) PNGARG((png_structp png_ptr,\n 2289:    png_infop info_ptr, png_uint_32 width, png_uint_32 height, int bit_depth,\n 2290     int color_type, int interlace_method, int compression_method,\n 2291     int filter_method));\n ....\n 2293  #ifdef PNG_oFFs_SUPPORTED\n 2294  extern PNG_EXPORT(png_uint_32,png_get_oFFs) PNGARG((png_structp png_ptr,\n 2295:    png_infop info_ptr, png_int_32 *offset_x, png_int_32 *offset_y,\n 2296     int *unit_type));\n 2297  #endif\n ....\n 2299  #ifdef PNG_oFFs_SUPPORTED\n 2300  extern PNG_EXPORT(void,png_set_oFFs) PNGARG((png_structp png_ptr,\n 2301:    png_infop info_ptr, png_int_32 offset_x, png_int_32 offset_y,\n 2302     int unit_type));\n 2303  #endif\n ....\n 2305  #ifdef PNG_pCAL_SUPPORTED\n 2306  extern PNG_EXPORT(png_uint_32,png_get_pCAL) PNGARG((png_structp png_ptr,\n 2307:    png_infop info_ptr, png_charp *purpose, png_int_32 *X0, png_int_32 *X1,\n 2308     int *type, int *nparams, png_charp *units, png_charpp *params));\n 2309  #endif\n ....\n 2311  #ifdef PNG_pCAL_SUPPORTED\n 2312  extern PNG_EXPORT(void,png_set_pCAL) PNGARG((png_structp png_ptr,\n 2313:    png_infop info_ptr, png_charp purpose, png_int_32 X0, png_int_32 X1,\n 2314     int type, int nparams, png_charp units, png_charpp params));\n 2315  #endif\n ....\n 2317  #ifdef PNG_pHYs_SUPPORTED\n 2318  extern PNG_EXPORT(png_uint_32,png_get_pHYs) PNGARG((png_structp png_ptr,\n 2319:    png_infop info_ptr, png_uint_32 *res_x, png_uint_32 *res_y, int *unit_type));\n 2320  #endif\n 2321  \n 2322  #ifdef PNG_pHYs_SUPPORTED\n 2323  extern PNG_EXPORT(void,png_set_pHYs) PNGARG((png_structp png_ptr,\n 2324:    png_infop info_ptr, png_uint_32 res_x, png_uint_32 res_y, int unit_type));\n 2325  #endif\n 2326  \n 2327  extern PNG_EXPORT(png_uint_32,png_get_PLTE) PNGARG((png_structp png_ptr,\n 2328:    png_infop info_ptr, png_colorp *palette, int *num_palette));\n 2329  \n 2330  extern PNG_EXPORT(void,png_set_PLTE) PNGARG((png_structp png_ptr,\n 2331:    png_infop info_ptr, png_colorp palette, int num_palette));\n 2332  \n 2333  #ifdef PNG_sBIT_SUPPORTED\n 2334  extern PNG_EXPORT(png_uint_32,png_get_sBIT) PNGARG((png_structp png_ptr,\n 2335:    png_infop info_ptr, png_color_8p *sig_bit));\n 2336  #endif\n 2337  \n 2338  #ifdef PNG_sBIT_SUPPORTED\n 2339  extern PNG_EXPORT(void,png_set_sBIT) PNGARG((png_structp png_ptr,\n 2340:    png_infop info_ptr, png_color_8p sig_bit));\n 2341  #endif\n 2342  \n 2343  #ifdef PNG_sRGB_SUPPORTED\n 2344  extern PNG_EXPORT(png_uint_32,png_get_sRGB) PNGARG((png_structp png_ptr,\n 2345:    png_infop info_ptr, int *intent));\n 2346  #endif\n 2347  \n 2348  #ifdef PNG_sRGB_SUPPORTED\n 2349  extern PNG_EXPORT(void,png_set_sRGB) PNGARG((png_structp png_ptr,\n 2350:    png_infop info_ptr, int intent));\n 2351  extern PNG_EXPORT(void,png_set_sRGB_gAMA_and_cHRM) PNGARG((png_structp png_ptr,\n 2352:    png_infop info_ptr, int intent));\n 2353  #endif\n 2354  \n 2355  #ifdef PNG_iCCP_SUPPORTED\n 2356  extern PNG_EXPORT(png_uint_32,png_get_iCCP) PNGARG((png_structp png_ptr,\n 2357:    png_infop info_ptr, png_charpp name, int *compression_type,\n 2358     png_charpp profile, png_uint_32 *proflen));\n 2359     /* Note to maintainer: profile should be png_bytepp */\n ....\n 2362  #ifdef PNG_iCCP_SUPPORTED\n 2363  extern PNG_EXPORT(void,png_set_iCCP) PNGARG((png_structp png_ptr,\n 2364:    png_infop info_ptr, png_charp name, int compression_type,\n 2365     png_charp profile, png_uint_32 proflen));\n 2366     /* Note to maintainer: profile should be png_bytep */\n ....\n 2369  #ifdef PNG_sPLT_SUPPORTED\n 2370  extern PNG_EXPORT(png_uint_32,png_get_sPLT) PNGARG((png_structp png_ptr,\n 2371:    png_infop info_ptr, png_sPLT_tpp entries));\n 2372  #endif\n 2373  \n 2374  #ifdef PNG_sPLT_SUPPORTED\n 2375  extern PNG_EXPORT(void,png_set_sPLT) PNGARG((png_structp png_ptr,\n 2376:    png_infop info_ptr, png_sPLT_tp entries, int nentries));\n 2377  #endif\n 2378  \n ....\n 2380  /* png_get_text also returns the number of text chunks in *num_text */\n 2381  extern PNG_EXPORT(png_uint_32,png_get_text) PNGARG((png_structp png_ptr,\n 2382:    png_infop info_ptr, png_textp *text_ptr, int *num_text));\n 2383  #endif\n 2384  \n ....\n 2392  #ifdef PNG_TEXT_SUPPORTED\n 2393  extern PNG_EXPORT(void,png_set_text) PNGARG((png_structp png_ptr,\n 2394:    png_infop info_ptr, png_textp text_ptr, int num_text));\n 2395  #endif\n 2396  \n 2397  #ifdef PNG_tIME_SUPPORTED\n 2398  extern PNG_EXPORT(png_uint_32,png_get_tIME) PNGARG((png_structp png_ptr,\n 2399:    png_infop info_ptr, png_timep *mod_time));\n 2400  #endif\n 2401  \n 2402  #ifdef PNG_tIME_SUPPORTED\n 2403  extern PNG_EXPORT(void,png_set_tIME) PNGARG((png_structp png_ptr,\n 2404:    png_infop info_ptr, png_timep mod_time));\n 2405  #endif\n 2406  \n 2407  #ifdef PNG_tRNS_SUPPORTED\n 2408  extern PNG_EXPORT(png_uint_32,png_get_tRNS) PNGARG((png_structp png_ptr,\n 2409:    png_infop info_ptr, png_bytep *trans_alpha, int *num_trans,\n 2410     png_color_16p *trans_color));\n 2411  #endif\n ....\n 2413  #ifdef PNG_tRNS_SUPPORTED\n 2414  extern PNG_EXPORT(void,png_set_tRNS) PNGARG((png_structp png_ptr,\n 2415:    png_infop info_ptr, png_bytep trans_alpha, int num_trans,\n 2416     png_color_16p trans_color));\n 2417  #endif\n ....\n 2423  #ifdef PNG_FLOATING_POINT_SUPPORTED\n 2424  extern PNG_EXPORT(png_uint_32,png_get_sCAL) PNGARG((png_structp png_ptr,\n 2425:    png_infop info_ptr, int *unit, double *width, double *height));\n 2426  #else\n 2427  #ifdef PNG_FIXED_POINT_SUPPORTED\n 2428  extern PNG_EXPORT(png_uint_32,png_get_sCAL_s) PNGARG((png_structp png_ptr,\n 2429:    png_infop info_ptr, int *unit, png_charpp swidth, png_charpp sheight));\n 2430  #endif\n 2431  #endif\n ....\n 2435  #ifdef PNG_FLOATING_POINT_SUPPORTED\n 2436  extern PNG_EXPORT(void,png_set_sCAL) PNGARG((png_structp png_ptr,\n 2437:    png_infop info_ptr, int unit, double width, double height));\n 2438  #else\n 2439  #ifdef PNG_FIXED_POINT_SUPPORTED\n 2440  extern PNG_EXPORT(void,png_set_sCAL_s) PNGARG((png_structp png_ptr,\n 2441:    png_infop info_ptr, int unit, png_charp swidth, png_charp sheight));\n 2442  #endif\n 2443  #endif\n ....\n 2461  #ifdef PNG_UNKNOWN_CHUNKS_SUPPORTED\n 2462  extern PNG_EXPORT(void, png_set_unknown_chunks) PNGARG((png_structp png_ptr,\n 2463:    png_infop info_ptr, png_unknown_chunkp unknowns, int num_unknowns));\n 2464  extern PNG_EXPORT(void, png_set_unknown_chunk_location)\n 2465:    PNGARG((png_structp png_ptr, png_infop info_ptr, int chunk, int location));\n 2466  extern PNG_EXPORT(png_uint_32,png_get_unknown_chunks) PNGARG((png_structp\n 2467:    png_ptr, png_infop info_ptr, png_unknown_chunkpp entries));\n 2468  #endif\n 2469  \n ....\n 2473   */\n 2474  extern PNG_EXPORT(void, png_set_invalid) PNGARG((png_structp png_ptr,\n 2475:    png_infop info_ptr, int mask));\n 2476  \n 2477  #ifdef PNG_INFO_IMAGE_SUPPORTED\n 2478  /* The \"params\" pointer is currently not used and is for future expansion. */\n 2479  extern PNG_EXPORT(void, png_read_png) PNGARG((png_structp png_ptr,\n 2480:                         png_infop info_ptr,\n 2481                          int transforms,\n 2482                          png_voidp params));\n 2483  extern PNG_EXPORT(void, png_write_png) PNGARG((png_structp png_ptr,\n 2484:                         png_infop info_ptr,\n 2485                          int transforms,\n 2486                          png_voidp params));\n ....\n 2534  #if defined(PNG_INCH_CONVERSIONS) && defined(PNG_FLOATING_POINT_SUPPORTED)\n 2535  PNG_EXPORT(png_uint_32,png_get_pixels_per_inch) PNGARG((png_structp png_ptr,\n 2536: png_infop info_ptr));\n 2537  \n 2538  PNG_EXPORT(png_uint_32,png_get_x_pixels_per_inch) PNGARG((png_structp png_ptr,\n 2539: png_infop info_ptr));\n 2540  \n 2541  PNG_EXPORT(png_uint_32,png_get_y_pixels_per_inch) PNGARG((png_structp png_ptr,\n 2542: png_infop info_ptr));\n 2543  \n 2544  PNG_EXPORT(float,png_get_x_offset_inches) PNGARG((png_structp png_ptr,\n 2545: png_infop info_ptr));\n 2546  \n 2547  PNG_EXPORT(float,png_get_y_offset_inches) PNGARG((png_structp png_ptr,\n 2548: png_infop info_ptr));\n 2549  \n 2550  #ifdef PNG_pHYs_SUPPORTED\n 2551  PNG_EXPORT(png_uint_32,png_get_pHYs_dpi) PNGARG((png_structp png_ptr,\n 2552: png_infop info_ptr, png_uint_32 *res_x, png_uint_32 *res_y, int *unit_type));\n 2553  #endif /* PNG_pHYs_SUPPORTED */\n 2554  #endif  /* PNG_INCH_CONVERSIONS && PNG_FLOATING_POINT_SUPPORTED */\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngget.c:\n   19  \n   20  png_uint_32 PNGAPI\n   21: png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag)\n   22  {\n   23     if (png_ptr != NULL && info_ptr != NULL)\n   ..\n   29  \n   30  png_size_t PNGAPI\n   31: png_get_rowbytes(png_structp png_ptr, png_infop info_ptr)\n   32  {\n   33     if (png_ptr != NULL && info_ptr != NULL)\n   ..\n   40  #ifdef PNG_INFO_IMAGE_SUPPORTED\n   41  png_bytepp PNGAPI\n   42: png_get_rows(png_structp png_ptr, png_infop info_ptr)\n   43  {\n   44     if (png_ptr != NULL && info_ptr != NULL)\n   ..\n   53  /* Easy access to info, added in libpng-0.99 */\n   54  png_uint_32 PNGAPI\n   55: png_get_image_width(png_structp png_ptr, png_infop info_ptr)\n   56  {\n   57     if (png_ptr != NULL && info_ptr != NULL)\n   ..\n   62  \n   63  png_uint_32 PNGAPI\n   64: png_get_image_height(png_structp png_ptr, png_infop info_ptr)\n   65  {\n   66     if (png_ptr != NULL && info_ptr != NULL)\n   ..\n   71  \n   72  png_byte PNGAPI\n   73: png_get_bit_depth(png_structp png_ptr, png_infop info_ptr)\n   74  {\n   75     if (png_ptr != NULL && info_ptr != NULL)\n   ..\n   80  \n   81  png_byte PNGAPI\n   82: png_get_color_type(png_structp png_ptr, png_infop info_ptr)\n   83  {\n   84     if (png_ptr != NULL && info_ptr != NULL)\n   ..\n   89  \n   90  png_byte PNGAPI\n   91: png_get_filter_type(png_structp png_ptr, png_infop info_ptr)\n   92  {\n   93     if (png_ptr != NULL && info_ptr != NULL)\n   ..\n   98  \n   99  png_byte PNGAPI\n  100: png_get_interlace_type(png_structp png_ptr, png_infop info_ptr)\n  101  {\n  102     if (png_ptr != NULL && info_ptr != NULL)\n  ...\n  107  \n  108  png_byte PNGAPI\n  109: png_get_compression_type(png_structp png_ptr, png_infop info_ptr)\n  110  {\n  111     if (png_ptr != NULL && info_ptr != NULL)\n  ...\n  116  \n  117  png_uint_32 PNGAPI\n  118: png_get_x_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)\n  119  {\n  120     if (png_ptr != NULL && info_ptr != NULL)\n  ...\n  137  \n  138  png_uint_32 PNGAPI\n  139: png_get_y_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)\n  140  {\n  141     if (png_ptr != NULL && info_ptr != NULL)\n  ...\n  158  \n  159  png_uint_32 PNGAPI\n  160: png_get_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)\n  161  {\n  162     if (png_ptr != NULL && info_ptr != NULL)\n  ...\n  181  #ifdef PNG_FLOATING_POINT_SUPPORTED\n  182  float PNGAPI\n  183: png_get_pixel_aspect_ratio(png_structp png_ptr, png_infop info_ptr)\n  184     {\n  185     if (png_ptr != NULL && info_ptr != NULL)\n  ...\n  205  \n  206  png_int_32 PNGAPI\n  207: png_get_x_offset_microns(png_structp png_ptr, png_infop info_ptr)\n  208  {\n  209     if (png_ptr != NULL && info_ptr != NULL)\n  ...\n  227  \n  228  png_int_32 PNGAPI\n  229: png_get_y_offset_microns(png_structp png_ptr, png_infop info_ptr)\n  230  {\n  231     if (png_ptr != NULL && info_ptr != NULL)\n  ...\n  249  \n  250  png_int_32 PNGAPI\n  251: png_get_x_offset_pixels(png_structp png_ptr, png_infop info_ptr)\n  252  {\n  253     if (png_ptr != NULL && info_ptr != NULL)\n  ...\n  271  \n  272  png_int_32 PNGAPI\n  273: png_get_y_offset_pixels(png_structp png_ptr, png_infop info_ptr)\n  274  {\n  275     if (png_ptr != NULL && info_ptr != NULL)\n  ...\n  294  #if defined(PNG_INCH_CONVERSIONS) && defined(PNG_FLOATING_POINT_SUPPORTED)\n  295  png_uint_32 PNGAPI\n  296: png_get_pixels_per_inch(png_structp png_ptr, png_infop info_ptr)\n  297  {\n  298     return ((png_uint_32)((float)png_get_pixels_per_meter(png_ptr, info_ptr)\n  ...\n  301  \n  302  png_uint_32 PNGAPI\n  303: png_get_x_pixels_per_inch(png_structp png_ptr, png_infop info_ptr)\n  304  {\n  305     return ((png_uint_32)((float)png_get_x_pixels_per_meter(png_ptr, info_ptr)\n  ...\n  308  \n  309  png_uint_32 PNGAPI\n  310: png_get_y_pixels_per_inch(png_structp png_ptr, png_infop info_ptr)\n  311  {\n  312     return ((png_uint_32)((float)png_get_y_pixels_per_meter(png_ptr, info_ptr)\n  ...\n  315  \n  316  float PNGAPI\n  317: png_get_x_offset_inches(png_structp png_ptr, png_infop info_ptr)\n  318  {\n  319     return ((float)png_get_x_offset_microns(png_ptr, info_ptr)\n  ...\n  322  \n  323  float PNGAPI\n  324: png_get_y_offset_inches(png_structp png_ptr, png_infop info_ptr)\n  325  {\n  326     return ((float)png_get_y_offset_microns(png_ptr, info_ptr)\n  ...\n  330  #ifdef PNG_pHYs_SUPPORTED\n  331  png_uint_32 PNGAPI\n  332: png_get_pHYs_dpi(png_structp png_ptr, png_infop info_ptr,\n  333     png_uint_32 *res_x, png_uint_32 *res_y, int *unit_type)\n  334  {\n  ...\n  370  \n  371  png_byte PNGAPI\n  372: png_get_channels(png_structp png_ptr, png_infop info_ptr)\n  373  {\n  374     if (png_ptr != NULL && info_ptr != NULL)\n  ...\n  379  \n  380  png_bytep PNGAPI\n  381: png_get_signature(png_structp png_ptr, png_infop info_ptr)\n  382  {\n  383     if (png_ptr != NULL && info_ptr != NULL)\n  ...\n  389  #ifdef PNG_bKGD_SUPPORTED\n  390  png_uint_32 PNGAPI\n  391: png_get_bKGD(png_structp png_ptr, png_infop info_ptr,\n  392     png_color_16p *background)\n  393  {\n  ...\n  407  #ifdef PNG_FLOATING_POINT_SUPPORTED\n  408  png_uint_32 PNGAPI\n  409: png_get_cHRM(png_structp png_ptr, png_infop info_ptr,\n  410     double *white_x, double *white_y, double *red_x, double *red_y,\n  411     double *green_x, double *green_y, double *blue_x, double *blue_y)\n  ...\n  438  #ifdef PNG_FIXED_POINT_SUPPORTED\n  439  png_uint_32 PNGAPI\n  440: png_get_cHRM_fixed(png_structp png_ptr, png_infop info_ptr,\n  441     png_fixed_point *white_x, png_fixed_point *white_y, png_fixed_point *red_x,\n  442     png_fixed_point *red_y, png_fixed_point *green_x, png_fixed_point *green_y,\n  ...\n  473  #ifdef PNG_FLOATING_POINT_SUPPORTED\n  474  png_uint_32 PNGAPI\n  475: png_get_gAMA(png_structp png_ptr, png_infop info_ptr, double *file_gamma)\n  476  {\n  477     png_debug1(1, \"in %s retrieval function\", \"gAMA\");\n  ...\n  488  #ifdef PNG_FIXED_POINT_SUPPORTED\n  489  png_uint_32 PNGAPI\n  490: png_get_gAMA_fixed(png_structp png_ptr, png_infop info_ptr,\n  491      png_fixed_point *int_file_gamma)\n  492  {\n  ...\n  506  #ifdef PNG_sRGB_SUPPORTED\n  507  png_uint_32 PNGAPI\n  508: png_get_sRGB(png_structp png_ptr, png_infop info_ptr, int *file_srgb_intent)\n  509  {\n  510     png_debug1(1, \"in %s retrieval function\", \"sRGB\");\n  ...\n  522  #ifdef PNG_iCCP_SUPPORTED\n  523  png_uint_32 PNGAPI\n  524: png_get_iCCP(png_structp png_ptr, png_infop info_ptr,\n  525               png_charpp name, int *compression_type,\n  526               png_charpp profile, png_uint_32 *proflen)\n  ...\n  546  #ifdef PNG_sPLT_SUPPORTED\n  547  png_uint_32 PNGAPI\n  548: png_get_sPLT(png_structp png_ptr, png_infop info_ptr,\n  549               png_sPLT_tpp spalettes)\n  550  {\n  ...\n  560  #ifdef PNG_hIST_SUPPORTED\n  561  png_uint_32 PNGAPI\n  562: png_get_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_16p *hist)\n  563  {\n  564     png_debug1(1, \"in %s retrieval function\", \"hIST\");\n  ...\n  575  \n  576  png_uint_32 PNGAPI\n  577: png_get_IHDR(png_structp png_ptr, png_infop info_ptr,\n  578     png_uint_32 *width, png_uint_32 *height, int *bit_depth,\n  579     int *color_type, int *interlace_type, int *compression_type,\n  ...\n  615  #ifdef PNG_oFFs_SUPPORTED\n  616  png_uint_32 PNGAPI\n  617: png_get_oFFs(png_structp png_ptr, png_infop info_ptr,\n  618     png_int_32 *offset_x, png_int_32 *offset_y, int *unit_type)\n  619  {\n  ...\n  634  #ifdef PNG_pCAL_SUPPORTED\n  635  png_uint_32 PNGAPI\n  636: png_get_pCAL(png_structp png_ptr, png_infop info_ptr,\n  637     png_charp *purpose, png_int_32 *X0, png_int_32 *X1, int *type, int *nparams,\n  638     png_charp *units, png_charpp *params)\n  ...\n  660  #ifdef PNG_FLOATING_POINT_SUPPORTED\n  661  png_uint_32 PNGAPI\n  662: png_get_sCAL(png_structp png_ptr, png_infop info_ptr,\n  663               int *unit, double *width, double *height)\n  664  {\n  ...\n  676  #ifdef PNG_FIXED_POINT_SUPPORTED\n  677  png_uint_32 PNGAPI\n  678: png_get_sCAL_s(png_structp png_ptr, png_infop info_ptr,\n  679               int *unit, png_charpp width, png_charpp height)\n  680  {\n  ...\n  695  #ifdef PNG_pHYs_SUPPORTED\n  696  png_uint_32 PNGAPI\n  697: png_get_pHYs(png_structp png_ptr, png_infop info_ptr,\n  698     png_uint_32 *res_x, png_uint_32 *res_y, int *unit_type)\n  699  {\n  ...\n  728  \n  729  png_uint_32 PNGAPI\n  730: png_get_PLTE(png_structp png_ptr, png_infop info_ptr, png_colorp *palette,\n  731     int *num_palette)\n  732  {\n  ...\n  746  #ifdef PNG_sBIT_SUPPORTED\n  747  png_uint_32 PNGAPI\n  748: png_get_sBIT(png_structp png_ptr, png_infop info_ptr, png_color_8p *sig_bit)\n  749  {\n  750     png_debug1(1, \"in %s retrieval function\", \"sBIT\");\n  ...\n  762  #ifdef PNG_TEXT_SUPPORTED\n  763  png_uint_32 PNGAPI\n  764: png_get_text(png_structp png_ptr, png_infop info_ptr, png_textp *text_ptr,\n  765     int *num_text)\n  766  {\n  ...\n  787  #ifdef PNG_tIME_SUPPORTED\n  788  png_uint_32 PNGAPI\n  789: png_get_tIME(png_structp png_ptr, png_infop info_ptr, png_timep *mod_time)\n  790  {\n  791     png_debug1(1, \"in %s retrieval function\", \"tIME\");\n  ...\n  803  #ifdef PNG_tRNS_SUPPORTED\n  804  png_uint_32 PNGAPI\n  805: png_get_tRNS(png_structp png_ptr, png_infop info_ptr,\n  806     png_bytep *trans_alpha, int *num_trans, png_color_16p *trans_color)\n  807  {\n  ...\n  845  #ifdef PNG_UNKNOWN_CHUNKS_SUPPORTED\n  846  png_uint_32 PNGAPI\n  847: png_get_unknown_chunks(png_structp png_ptr, png_infop info_ptr,\n  848               png_unknown_chunkpp unknowns)\n  849  {\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngpread.c:\n   29  \n   30  void PNGAPI\n   31: png_process_data(png_structp png_ptr, png_infop info_ptr,\n   32     png_bytep buffer, png_size_t buffer_size)\n   33  {\n   ..\n   47   */\n   48  void /* PRIVATE */\n   49: png_process_some_data(png_structp png_ptr, png_infop info_ptr)\n   50  {\n   51     if (png_ptr == NULL)\n   ..\n  117   */\n  118  void /* PRIVATE */\n  119: png_push_read_sig(png_structp png_ptr, png_infop info_ptr)\n  120  {\n  121     png_size_t num_checked = png_ptr->sig_bytes,\n  ...\n  149  \n  150  void /* PRIVATE */\n  151: png_push_read_chunk(png_structp png_ptr, png_infop info_ptr)\n  152  {\n  153        PNG_IHDR;\n  ...\n 1159  #ifdef PNG_READ_tEXt_SUPPORTED\n 1160  void /* PRIVATE */\n 1161: png_push_handle_tEXt(png_structp png_ptr, png_infop info_ptr, png_uint_32\n 1162     length)\n 1163  {\n ....\n 1189  \n 1190  void /* PRIVATE */\n 1191: png_push_read_tEXt(png_structp png_ptr, png_infop info_ptr)\n 1192  {\n 1193     if (png_ptr->buffer_size && png_ptr->current_text_left)\n ....\n 1257  #ifdef PNG_READ_zTXt_SUPPORTED\n 1258  void /* PRIVATE */\n 1259: png_push_handle_zTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32\n 1260     length)\n 1261  {\n ....\n 1289  \n 1290  void /* PRIVATE */\n 1291: png_push_read_zTXt(png_structp png_ptr, png_infop info_ptr)\n 1292  {\n 1293     if (png_ptr->buffer_size && png_ptr->current_text_left)\n ....\n 1458  #ifdef PNG_READ_iTXt_SUPPORTED\n 1459  void /* PRIVATE */\n 1460: png_push_handle_iTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32\n 1461     length)\n 1462  {\n ....\n 1488  \n 1489  void /* PRIVATE */\n 1490: png_push_read_iTXt(png_structp png_ptr, png_infop info_ptr)\n 1491  {\n 1492  \n ....\n 1582   */\n 1583  void /* PRIVATE */\n 1584: png_push_handle_unknown(png_structp png_ptr, png_infop info_ptr, png_uint_32\n 1585     length)\n 1586  {\n ....\n 1667  \n 1668  void /* PRIVATE */\n 1669: png_push_have_info(png_structp png_ptr, png_infop info_ptr)\n 1670  {\n 1671     if (png_ptr->info_fn != NULL)\n ....\n 1674  \n 1675  void /* PRIVATE */\n 1676: png_push_have_end(png_structp png_ptr, png_infop info_ptr)\n 1677  {\n 1678     if (png_ptr->end_fn != NULL)\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngpriv.h:\n  258  /* Free any memory that info_ptr points to and reset struct. */\n  259  PNG_EXTERN void png_info_destroy PNGARG((png_structp png_ptr,\n  260:    png_infop info_ptr));\n  261  \n  262  /* Function to allocate memory for zlib.  PNGAPI is disallowed. */\n  ...\n  432  #ifdef PNG_TEXT_SUPPORTED  /* Added at version 1.0.14 and 1.2.4 */\n  433  PNG_EXTERN int png_set_text_2 PNGARG((png_structp png_ptr,\n  434:    png_infop info_ptr, png_textp text_ptr, int num_text));\n  435  #endif\n  436  \n  ...\n  519  /* Optional call to update the users info structure */\n  520  PNG_EXTERN void png_read_transform_info PNGARG((png_structp png_ptr,\n  521:    png_infop info_ptr));\n  522  \n  523  /* These are the functions that do the transformations */\n  ...\n  645  \n  646  /* Decode the IHDR chunk */\n  647: PNG_EXTERN void png_handle_IHDR PNGARG((png_structp png_ptr, png_infop info_ptr,\n  648     png_uint_32 length));\n  649: PNG_EXTERN void png_handle_PLTE PNGARG((png_structp png_ptr, png_infop info_ptr,\n  650     png_uint_32 length));\n  651: PNG_EXTERN void png_handle_IEND PNGARG((png_structp png_ptr, png_infop info_ptr,\n  652     png_uint_32 length));\n  653  \n  654  #ifdef PNG_READ_bKGD_SUPPORTED\n  655: PNG_EXTERN void png_handle_bKGD PNGARG((png_structp png_ptr, png_infop info_ptr,\n  656     png_uint_32 length));\n  657  #endif\n  658  \n  659  #ifdef PNG_READ_cHRM_SUPPORTED\n  660: PNG_EXTERN void png_handle_cHRM PNGARG((png_structp png_ptr, png_infop info_ptr,\n  661     png_uint_32 length));\n  662  #endif\n  663  \n  664  #ifdef PNG_READ_gAMA_SUPPORTED\n  665: PNG_EXTERN void png_handle_gAMA PNGARG((png_structp png_ptr, png_infop info_ptr,\n  666     png_uint_32 length));\n  667  #endif\n  668  \n  669  #ifdef PNG_READ_hIST_SUPPORTED\n  670: PNG_EXTERN void png_handle_hIST PNGARG((png_structp png_ptr, png_infop info_ptr,\n  671     png_uint_32 length));\n  672  #endif\n  673  \n  674  #ifdef PNG_READ_iCCP_SUPPORTED\n  675: extern void png_handle_iCCP PNGARG((png_structp png_ptr, png_infop info_ptr,\n  676     png_uint_32 length));\n  677  #endif /* PNG_READ_iCCP_SUPPORTED */\n  678  \n  679  #ifdef PNG_READ_iTXt_SUPPORTED\n  680: PNG_EXTERN void png_handle_iTXt PNGARG((png_structp png_ptr, png_infop info_ptr,\n  681     png_uint_32 length));\n  682  #endif\n  683  \n  684  #ifdef PNG_READ_oFFs_SUPPORTED\n  685: PNG_EXTERN void png_handle_oFFs PNGARG((png_structp png_ptr, png_infop info_ptr,\n  686     png_uint_32 length));\n  687  #endif\n  688  \n  689  #ifdef PNG_READ_pCAL_SUPPORTED\n  690: PNG_EXTERN void png_handle_pCAL PNGARG((png_structp png_ptr, png_infop info_ptr,\n  691     png_uint_32 length));\n  692  #endif\n  693  \n  694  #ifdef PNG_READ_pHYs_SUPPORTED\n  695: PNG_EXTERN void png_handle_pHYs PNGARG((png_structp png_ptr, png_infop info_ptr,\n  696     png_uint_32 length));\n  697  #endif\n  698  \n  699  #ifdef PNG_READ_sBIT_SUPPORTED\n  700: PNG_EXTERN void png_handle_sBIT PNGARG((png_structp png_ptr, png_infop info_ptr,\n  701     png_uint_32 length));\n  702  #endif\n  703  \n  704  #ifdef PNG_READ_sCAL_SUPPORTED\n  705: PNG_EXTERN void png_handle_sCAL PNGARG((png_structp png_ptr, png_infop info_ptr,\n  706     png_uint_32 length));\n  707  #endif\n  708  \n  709  #ifdef PNG_READ_sPLT_SUPPORTED\n  710: extern void png_handle_sPLT PNGARG((png_structp png_ptr, png_infop info_ptr,\n  711     png_uint_32 length));\n  712  #endif /* PNG_READ_sPLT_SUPPORTED */\n  713  \n  714  #ifdef PNG_READ_sRGB_SUPPORTED\n  715: PNG_EXTERN void png_handle_sRGB PNGARG((png_structp png_ptr, png_infop info_ptr,\n  716     png_uint_32 length));\n  717  #endif\n  718  \n  719  #ifdef PNG_READ_tEXt_SUPPORTED\n  720: PNG_EXTERN void png_handle_tEXt PNGARG((png_structp png_ptr, png_infop info_ptr,\n  721     png_uint_32 length));\n  722  #endif\n  723  \n  724  #ifdef PNG_READ_tIME_SUPPORTED\n  725: PNG_EXTERN void png_handle_tIME PNGARG((png_structp png_ptr, png_infop info_ptr,\n  726     png_uint_32 length));\n  727  #endif\n  728  \n  729  #ifdef PNG_READ_tRNS_SUPPORTED\n  730: PNG_EXTERN void png_handle_tRNS PNGARG((png_structp png_ptr, png_infop info_ptr,\n  731     png_uint_32 length));\n  732  #endif\n  733  \n  734  #ifdef PNG_READ_zTXt_SUPPORTED\n  735: PNG_EXTERN void png_handle_zTXt PNGARG((png_structp png_ptr, png_infop info_ptr,\n  736     png_uint_32 length));\n  737  #endif\n  738  \n  739  PNG_EXTERN void png_handle_unknown PNGARG((png_structp png_ptr,\n  740:    png_infop info_ptr, png_uint_32 length));\n  741  \n  742  PNG_EXTERN void png_check_chunk_name PNGARG((png_structp png_ptr,\n  ...\n  751  #ifdef PNG_PROGRESSIVE_READ_SUPPORTED\n  752  PNG_EXTERN void png_push_read_chunk PNGARG((png_structp png_ptr,\n  753:    png_infop info_ptr));\n  754  PNG_EXTERN void png_push_read_sig PNGARG((png_structp png_ptr,\n  755:    png_infop info_ptr));\n  756  PNG_EXTERN void png_push_check_crc PNGARG((png_structp png_ptr));\n  757  PNG_EXTERN void png_push_crc_skip PNGARG((png_structp png_ptr,\n  ...\n  766  PNG_EXTERN void png_push_process_row PNGARG((png_structp png_ptr));\n  767  PNG_EXTERN void png_push_handle_unknown PNGARG((png_structp png_ptr,\n  768:    png_infop info_ptr, png_uint_32 length));\n  769  PNG_EXTERN void png_push_have_info PNGARG((png_structp png_ptr,\n  770:    png_infop info_ptr));\n  771  PNG_EXTERN void png_push_have_end PNGARG((png_structp png_ptr,\n  772:    png_infop info_ptr));\n  773  PNG_EXTERN void png_push_have_row PNGARG((png_structp png_ptr, png_bytep row));\n  774  PNG_EXTERN void png_push_read_end PNGARG((png_structp png_ptr,\n  775:    png_infop info_ptr));\n  776  PNG_EXTERN void png_process_some_data PNGARG((png_structp png_ptr,\n  777:    png_infop info_ptr));\n  778  PNG_EXTERN void png_read_push_finish_row PNGARG((png_structp png_ptr));\n  779  #ifdef PNG_READ_tEXt_SUPPORTED\n  780  PNG_EXTERN void png_push_handle_tEXt PNGARG((png_structp png_ptr,\n  781:    png_infop info_ptr, png_uint_32 length));\n  782  PNG_EXTERN void png_push_read_tEXt PNGARG((png_structp png_ptr,\n  783:    png_infop info_ptr));\n  784  #endif\n  785  #ifdef PNG_READ_zTXt_SUPPORTED\n  786  PNG_EXTERN void png_push_handle_zTXt PNGARG((png_structp png_ptr,\n  787:    png_infop info_ptr, png_uint_32 length));\n  788  PNG_EXTERN void png_push_read_zTXt PNGARG((png_structp png_ptr,\n  789:    png_infop info_ptr));\n  790  #endif\n  791  #ifdef PNG_READ_iTXt_SUPPORTED\n  792  PNG_EXTERN void png_push_handle_iTXt PNGARG((png_structp png_ptr,\n  793:    png_infop info_ptr, png_uint_32 length));\n  794  PNG_EXTERN void png_push_read_iTXt PNGARG((png_structp png_ptr,\n  795:    png_infop info_ptr));\n  796  #endif\n  797  \n  ...\n  829  \n  830  /* Free all memory used by the read (old method - NOT DLL EXPORTED) */\n  831: extern void png_read_destroy PNGARG((png_structp png_ptr, png_infop info_ptr,\n  832:    png_infop end_info_ptr));\n  833  \n  834  /* Free any memory used in png_ptr struct (old method - NOT DLL EXPORTED) */\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngread.c:\n  212   */\n  213  void PNGAPI\n  214: png_read_info(png_structp png_ptr, png_infop info_ptr)\n  215  {\n  216     png_debug(1, \"in png_read_info\");\n  ...\n  424  /* Optional call to update the users info_ptr structure */\n  425  void PNGAPI\n  426: png_read_update_info(png_structp png_ptr, png_infop info_ptr)\n  427  {\n  428     png_debug(1, \"in png_read_update_info\");\n  ...\n  811   */\n  812  void PNGAPI\n  813: png_read_end(png_structp png_ptr, png_infop info_ptr)\n  814  {\n  815     png_debug(1, \"in png_read_end\");\n  ...\n  983  /* Free all memory used by the read */\n  984  void PNGAPI\n  985: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr,\n  986:    png_infopp end_info_ptr_ptr)\n  987  {\n  988     png_structp png_ptr = NULL;\n  989:    png_infop info_ptr = NULL, end_info_ptr = NULL;\n  990  #ifdef PNG_USER_MEM_SUPPORTED\n  991     png_free_ptr free_fn = NULL;\n  ...\n 1056  /* Free all memory used by the read (old method) */\n 1057  void /* PRIVATE */\n 1058: png_read_destroy(png_structp png_ptr, png_infop info_ptr,\n 1059:     png_infop end_info_ptr)\n 1060  {\n 1061  #ifdef PNG_SETJMP_SUPPORTED\n ....\n 1196  #ifdef PNG_INFO_IMAGE_SUPPORTED\n 1197  void PNGAPI\n 1198: png_read_png(png_structp png_ptr, png_infop info_ptr,\n 1199                             int transforms,\n 1200                             voidp params)\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngrtran.c:\n 1163   */\n 1164  void /* PRIVATE */\n 1165: png_read_transform_info(png_structp png_ptr, png_infop info_ptr)\n 1166  {\n 1167     png_debug(1, \"in png_read_transform_info\");\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngrutil.c:\n  406  /* Read and check the IDHR chunk */\n  407  void /* PRIVATE */\n  408: png_handle_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n  409  {\n  410     png_byte buf[13];\n  ...\n  480  /* Read and check the palette */\n  481  void /* PRIVATE */\n  482: png_handle_PLTE(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n  483  {\n  484     png_color palette[PNG_MAX_PALETTE_LENGTH];\n  ...\n  622  \n  623  void /* PRIVATE */\n  624: png_handle_IEND(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n  625  {\n  626     png_debug(1, \"in png_handle_IEND\");\n  ...\n  644  #ifdef PNG_READ_gAMA_SUPPORTED\n  645  void /* PRIVATE */\n  646: png_handle_gAMA(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n  647  {\n  648     png_fixed_point igamma;\n  ...\n  725  #ifdef PNG_READ_sBIT_SUPPORTED\n  726  void /* PRIVATE */\n  727: png_handle_sBIT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n  728  {\n  729     png_size_t truelen;\n  ...\n  791  #ifdef PNG_READ_cHRM_SUPPORTED\n  792  void /* PRIVATE */\n  793: png_handle_cHRM(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n  794  {\n  795     png_byte buf[32];\n  ...\n  915  #ifdef PNG_READ_sRGB_SUPPORTED\n  916  void /* PRIVATE */\n  917: png_handle_sRGB(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n  918  {\n  919     int intent;\n  ...\n 1013  #ifdef PNG_READ_iCCP_SUPPORTED\n 1014  void /* PRIVATE */\n 1015: png_handle_iCCP(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 1016  /* Note: this does not properly handle chunks that are > 64K under DOS */\n 1017  {\n ....\n 1145  #ifdef PNG_READ_sPLT_SUPPORTED\n 1146  void /* PRIVATE */\n 1147: png_handle_sPLT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 1148  /* Note: this does not properly handle chunks that are > 64K under DOS */\n 1149  {\n ....\n 1308  #ifdef PNG_READ_tRNS_SUPPORTED\n 1309  void /* PRIVATE */\n 1310: png_handle_tRNS(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 1311  {\n 1312     png_byte readbuf[PNG_MAX_PALETTE_LENGTH];\n ....\n 1403  #ifdef PNG_READ_bKGD_SUPPORTED\n 1404  void /* PRIVATE */\n 1405: png_handle_bKGD(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 1406  {\n 1407     png_size_t truelen;\n ....\n 1492  #ifdef PNG_READ_hIST_SUPPORTED\n 1493  void /* PRIVATE */\n 1494: png_handle_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 1495  {\n 1496     unsigned int num, i;\n ....\n 1546  #ifdef PNG_READ_pHYs_SUPPORTED\n 1547  void /* PRIVATE */\n 1548: png_handle_pHYs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 1549  {\n 1550     png_byte buf[9];\n ....\n 1589  #ifdef PNG_READ_oFFs_SUPPORTED\n 1590  void /* PRIVATE */\n 1591: png_handle_oFFs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 1592  {\n 1593     png_byte buf[9];\n ....\n 1633  /* Read the pCAL chunk (described in the PNG Extensions document) */\n 1634  void /* PRIVATE */\n 1635: png_handle_pCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 1636  {\n 1637     png_int_32 X0, X1;\n ....\n 1767  /* Read the sCAL chunk */\n 1768  void /* PRIVATE */\n 1769: png_handle_sCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 1770  {\n 1771     png_charp ep;\n ....\n 1909  #ifdef PNG_READ_tIME_SUPPORTED\n 1910  void /* PRIVATE */\n 1911: png_handle_tIME(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 1912  {\n 1913     png_byte buf[7];\n ....\n 1953  /* Note: this does not properly handle chunks that are > 64K under DOS */\n 1954  void /* PRIVATE */\n 1955: png_handle_tEXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 1956  {\n 1957     png_textp text_ptr;\n ....\n 2056  /* Note: this does not correctly handle chunks that are > 64K under DOS */\n 2057  void /* PRIVATE */\n 2058: png_handle_zTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 2059  {\n 2060     png_textp text_ptr;\n ....\n 2176  /* Note: this does not correctly handle chunks that are > 64K under DOS */\n 2177  void /* PRIVATE */\n 2178: png_handle_iTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 2179  {\n 2180     png_textp text_ptr;\n ....\n 2325     case it will be saved away to be written out later. */\n 2326  void /* PRIVATE */\n 2327: png_handle_unknown(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)\n 2328  {\n 2329     png_uint_32 skip = 0;\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngset.c:\n   24  #ifdef PNG_bKGD_SUPPORTED\n   25  void PNGAPI\n   26: png_set_bKGD(png_structp png_ptr, png_infop info_ptr, png_color_16p background)\n   27  {\n   28     png_debug1(1, \"in %s storage function\", \"bKGD\");\n   ..\n   39  #ifdef PNG_FLOATING_POINT_SUPPORTED\n   40  void PNGAPI\n   41: png_set_cHRM(png_structp png_ptr, png_infop info_ptr,\n   42     double white_x, double white_y, double red_x, double red_y,\n   43     double green_x, double green_y, double blue_x, double blue_y)\n   ..\n   72  #ifdef PNG_FIXED_POINT_SUPPORTED\n   73  void PNGAPI\n   74: png_set_cHRM_fixed(png_structp png_ptr, png_infop info_ptr,\n   75     png_fixed_point white_x, png_fixed_point white_y, png_fixed_point red_x,\n   76     png_fixed_point red_y, png_fixed_point green_x, png_fixed_point green_y,\n   ..\n  114  #ifdef PNG_FLOATING_POINT_SUPPORTED\n  115  void PNGAPI\n  116: png_set_gAMA(png_structp png_ptr, png_infop info_ptr, double file_gamma)\n  117  {\n  118     double png_gamma;\n  ...\n  141  #endif\n  142  void PNGAPI\n  143: png_set_gAMA_fixed(png_structp png_ptr, png_infop info_ptr, png_fixed_point\n  144     int_gamma)\n  145  {\n  ...\n  180  #ifdef PNG_hIST_SUPPORTED\n  181  void PNGAPI\n  182: png_set_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_16p hist)\n  183  {\n  184     int i;\n  ...\n  219  \n  220  void PNGAPI\n  221: png_set_IHDR(png_structp png_ptr, png_infop info_ptr,\n  222     png_uint_32 width, png_uint_32 height, int bit_depth,\n  223     int color_type, int interlace_type, int compression_type,\n  ...\n  265  #ifdef PNG_oFFs_SUPPORTED\n  266  void PNGAPI\n  267: png_set_oFFs(png_structp png_ptr, png_infop info_ptr,\n  268     png_int_32 offset_x, png_int_32 offset_y, int unit_type)\n  269  {\n  ...\n  282  #ifdef PNG_pCAL_SUPPORTED\n  283  void PNGAPI\n  284: png_set_pCAL(png_structp png_ptr, png_infop info_ptr,\n  285     png_charp purpose, png_int_32 X0, png_int_32 X1, int type, int nparams,\n  286     png_charp units, png_charpp params)\n  ...\n  354  #ifdef PNG_FLOATING_POINT_SUPPORTED\n  355  void PNGAPI\n  356: png_set_sCAL(png_structp png_ptr, png_infop info_ptr,\n  357               int unit, double width, double height)\n  358  {\n  ...\n  371  #ifdef PNG_FIXED_POINT_SUPPORTED\n  372  void PNGAPI\n  373: png_set_sCAL_s(png_structp png_ptr, png_infop info_ptr,\n  374               int unit, png_charp swidth, png_charp sheight)\n  375  {\n  ...\n  417  #ifdef PNG_pHYs_SUPPORTED\n  418  void PNGAPI\n  419: png_set_pHYs(png_structp png_ptr, png_infop info_ptr,\n  420     png_uint_32 res_x, png_uint_32 res_y, int unit_type)\n  421  {\n  ...\n  433  \n  434  void PNGAPI\n  435: png_set_PLTE(png_structp png_ptr, png_infop info_ptr,\n  436     png_colorp palette, int num_palette)\n  437  {\n  ...\n  476  #ifdef PNG_sBIT_SUPPORTED\n  477  void PNGAPI\n  478: png_set_sBIT(png_structp png_ptr, png_infop info_ptr,\n  479     png_color_8p sig_bit)\n  480  {\n  ...\n  491  #ifdef PNG_sRGB_SUPPORTED\n  492  void PNGAPI\n  493: png_set_sRGB(png_structp png_ptr, png_infop info_ptr, int intent)\n  494  {\n  495     png_debug1(1, \"in %s storage function\", \"sRGB\");\n  ...\n  503  \n  504  void PNGAPI\n  505: png_set_sRGB_gAMA_and_cHRM(png_structp png_ptr, png_infop info_ptr,\n  506     int intent)\n  507  {\n  ...\n  576  #ifdef PNG_iCCP_SUPPORTED\n  577  void PNGAPI\n  578: png_set_iCCP(png_structp png_ptr, png_infop info_ptr,\n  579               png_charp name, int compression_type,\n  580               png_charp profile, png_uint_32 proflen)\n  ...\n  623  #ifdef PNG_TEXT_SUPPORTED\n  624  void PNGAPI\n  625: png_set_text(png_structp png_ptr, png_infop info_ptr, png_textp text_ptr,\n  626               int num_text)\n  627  {\n  ...\n  633  \n  634  int /* PRIVATE */\n  635: png_set_text_2(png_structp png_ptr, png_infop info_ptr, png_textp text_ptr,\n  636                 int num_text)\n  637  {\n  ...\n  798  #ifdef PNG_tIME_SUPPORTED\n  799  void PNGAPI\n  800: png_set_tIME(png_structp png_ptr, png_infop info_ptr, png_timep mod_time)\n  801  {\n  802     png_debug1(1, \"in %s storage function\", \"tIME\");\n  ...\n  813  #ifdef PNG_tRNS_SUPPORTED\n  814  void PNGAPI\n  815: png_set_tRNS(png_structp png_ptr, png_infop info_ptr,\n  816     png_bytep trans_alpha, int num_trans, png_color_16p trans_color)\n  817  {\n  ...\n  866  void PNGAPI\n  867  png_set_sPLT(png_structp png_ptr,\n  868:              png_infop info_ptr, png_sPLT_tp entries, int nentries)\n  869  /*\n  870   *  entries        - array of png_sPLT_t structures\n  ...\n  936  void PNGAPI\n  937  png_set_unknown_chunks(png_structp png_ptr,\n  938:    png_infop info_ptr, png_unknown_chunkp unknowns, int num_unknowns)\n  939  {\n  940     png_unknown_chunkp np;\n  ...\n  993  }\n  994  void PNGAPI\n  995: png_set_unknown_chunk_location(png_structp png_ptr, png_infop info_ptr,\n  996     int chunk, int location)\n  997  {\n  ...\n 1079  #ifdef PNG_INFO_IMAGE_SUPPORTED\n 1080  void PNGAPI\n 1081: png_set_rows(png_structp png_ptr, png_infop info_ptr, png_bytepp row_pointers)\n 1082  {\n 1083     png_debug1(1, \"in %s storage function\", \"rows\");\n ....\n 1108  \n 1109  void PNGAPI\n 1110: png_set_invalid(png_structp png_ptr, png_infop info_ptr, int mask)\n 1111  {\n 1112     if (png_ptr && info_ptr)\n\nC:\\PrivateDev\\star_catcher\\build\\android\\jni\\libpng\\pngwrite.c:\n   28   */\n   29  void PNGAPI\n   30: png_write_info_before_PLTE(png_structp png_ptr, png_infop info_ptr)\n   31  {\n   32     png_debug(1, \"in png_write_info_before_PLTE\");\n   ..\n  133  \n  134  void PNGAPI\n  135: png_write_info(png_structp png_ptr, png_infop info_ptr)\n  136  {\n  137  #if defined(PNG_WRITE_TEXT_SUPPORTED) || defined(PNG_WRITE_sPLT_SUPPORTED)\n  ...\n  312   */\n  313  void PNGAPI\n  314: png_write_end(png_structp png_ptr, png_infop info_ptr)\n  315  {\n  316     png_debug(1, \"in png_write_end\");\n  ...\n  903  /* Free all memory used by the write */\n  904  void PNGAPI\n  905: png_destroy_write_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr)\n  906  {\n  907     png_structp png_ptr = NULL;\n  908:    png_infop info_ptr = NULL;\n  909  #ifdef PNG_USER_MEM_SUPPORTED\n  910     png_free_ptr free_fn = NULL;\n  ...\n 1372  #ifdef PNG_INFO_IMAGE_SUPPORTED\n 1373  void PNGAPI\n 1374: png_write_png(png_structp png_ptr, png_infop info_ptr,\n 1375                int transforms, voidp params)\n 1376  {\n\n272 matches across 11 files\n",
			"settings":
			{
				"buffer_size": 301613,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "libpng/png.c",
			"settings":
			{
				"buffer_size": 26668,
				"line_ending": "Unix"
			}
		},
		{
			"file": "libpng/pngset.c",
			"settings":
			{
				"buffer_size": 34516,
				"line_ending": "Unix"
			}
		},
		{
			"file": "libpng/png.h",
			"settings":
			{
				"buffer_size": 118278,
				"line_ending": "Unix"
			}
		},
		{
			"file": "libzip/zip_fread.c",
			"settings":
			{
				"buffer_size": 3599,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Android.mk",
			"settings":
			{
				"buffer_size": 2275,
				"line_ending": "Windows"
			}
		},
		{
			"file": "BUILD_INSTRUCTIONS",
			"settings":
			{
				"buffer_size": 2927,
				"line_ending": "Windows",
				"name": "How to build and setup"
			}
		},
		{
			"file": "Application.mk",
			"settings":
			{
				"buffer_size": 143,
				"line_ending": "Windows"
			}
		},
		{
			"file": "StarCatcherApplication.cpp",
			"settings":
			{
				"buffer_size": 774,
				"line_ending": "Windows"
			}
		},
		{
			"file": "StarCatcherApplication.h",
			"settings":
			{
				"buffer_size": 372,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/log.h",
			"settings":
			{
				"buffer_size": 688,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/jniUtils.h",
			"settings":
			{
				"buffer_size": 462,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/platform.h",
			"settings":
			{
				"buffer_size": 117,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 35.0,
		"selected_items":
		[
			[
				"Package Control",
				"Preferences: Package Control Settings – User"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 153.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/PrivateDev/star_catcher/build/android/jni/libzip/.deps/zip_fopen_index.Plo",
		"/C/PrivateDev/star_catcher/build/android/jni/libzip/zip_fopen_index.c",
		"/C/PrivateDev/star_catcher/build/android/jni/libzip/zip_open.c",
		"/C/PrivateDev/star_catcher/build/android/jni/libzip/.deps/zip_unchange_data.Plo",
		"/C/PrivateDev/star_catcher/build/android/jni/sublime.sublime-project",
		"/C/PrivateDev/android-ndk-assets/project/.externalToolBuilders/NDK Builder.launch",
		"/C/PrivateDev/android-ndk-assets/project/.externalToolBuilders/org.eclipse.cdt.managedbuilder.core.genmakebuilder.launch",
		"/C/cygwin64/home/Costa/.bashrc",
		"/C/Users/Costa/AppData/Roaming/Sublime Text 3/Packages/User/Package Control.sublime-settings",
		"/C/AndroidDev/adt-bundle-windows-x86_64-20130917/android-ndk-r9c/samples/hello-jni/jni/hello-jni.c",
		"/C/PrivateDev/TypeScript/Samples/samples/jquery/parallax.html",
		"/C/PrivateDev/HamsterTeacher/trunk/HamsterTeach/FFmpeg-Android/ffmpeg/cmdutils_common_opts.h",
		"/C/PrivateDev/HamsterTeacher/trunk/HamsterTeach/FFmpeg-Android/FFmpeg-Android.sh",
		"/C/PrivateDev/HamsterTeacher/trunk/HamsterTeach/FFmpeg-Android/ffmpeg/tools/build_libstagefright",
		"/C/PrivateDev/HamsterTeacher/trunk/HamsterTeach/FFmpeg-Android/ffmpeg/configure",
		"/C/AndroidDev/adt-bundle-windows-x86_64-20130917/android-ndk-r9/build/tools/make-standalone-toolchain.sh"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"*",
			"*.*",
			"*.sh",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"cloze",
			"loadAPK",
			"png_infop",
			"chan",
			"chann",
			"PNG_DEPSTRUCT",
			"channels",
			"png_ptr",
			"depth",
			"png_get_IHDR",
			"byte",
			"pixel",
			"zip_file* file",
			"debug",
			".c_str",
			"TEXTURE_LOAD_ERRORNUnun",
			"APKAR",
			"SCONS_BUILD_ROOT",
			"zip_open",
			"zip_stat",
			"zip_stat ",
			"zip_fread",
			"file",
			"zip_fread",
			"zip_fread\nzip_fread\nzip_fread",
			"read",
			"zip_fread\nzip_fread",
			"zip_fread",
			"texture",
			"FindClass",
			"ndk",
			"build",
			"StarCatcherApplication",
			"JNI_FILES",
			"FFFILES",
			":",
			"VideoModule",
			"videmod",
			"activity",
			"new EffectsRecorder",
			"effectsrecorder",
			"effec",
			"ffmpeg.",
			"ffmpe.",
			".c",
			"int main(void){ return 0; }",
			"arm-linux-androideabi-gcc ",
			"check_ld",
			"--toolchain",
			"TOOLCHAIN=",
			"prebuilt/*-x86",
			"*x86",
			"arm-linux-androideabi-4.6",
			"check_ld",
			"--system=",
			"--system",
			"$NDK_DIR",
			"NDK",
			"ANDROID_NDK",
			"--system=",
			"--system",
			"system",
			"ndk",
			"is not supported by the source NDK",
			"is not supported by the source NDK!",
			"HAVE_GETPROCESSTIMES"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "StarCatcherNative.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1702,
						"regions":
						{
						},
						"selection":
						[
							[
								1048,
								993
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 420.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "libzip/Android.mk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1927,
						"regions":
						{
						},
						"selection":
						[
							[
								780,
								780
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "libpng/Android.mk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1067,
						"regions":
						{
						},
						"selection":
						[
							[
								632,
								632
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "PlatformAndroid.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 729,
						"regions":
						{
						},
						"selection":
						[
							[
								639,
								639
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "PlatformAndroid.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6305,
						"regions":
						{
						},
						"selection":
						[
							[
								5929,
								5929
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3774.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 301613,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										368,
										372
									],
									[
										398,
										402
									],
									[
										537,
										541
									],
									[
										747,
										751
									],
									[
										1016,
										1020
									],
									[
										1276,
										1280
									],
									[
										1400,
										1404
									],
									[
										1467,
										1471
									],
									[
										1556,
										1560
									],
									[
										1610,
										1614
									],
									[
										1641,
										1645
									],
									[
										1689,
										1693
									],
									[
										1695,
										1699
									],
									[
										1778,
										1782
									],
									[
										1830,
										1834
									],
									[
										1976,
										1980
									],
									[
										2154,
										2158
									],
									[
										2389,
										2393
									],
									[
										2573,
										2577
									],
									[
										2823,
										2827
									],
									[
										2886,
										2890
									],
									[
										3017,
										3021
									],
									[
										3311,
										3315
									],
									[
										3528,
										3532
									],
									[
										3548,
										3552
									],
									[
										3714,
										3718
									],
									[
										3912,
										3916
									],
									[
										4026,
										4030
									],
									[
										4297,
										4301
									],
									[
										4303,
										4307
									],
									[
										4566,
										4570
									],
									[
										4615,
										4619
									],
									[
										4906,
										4910
									],
									[
										5144,
										5148
									],
									[
										5418,
										5422
									],
									[
										5526,
										5530
									],
									[
										5713,
										5717
									],
									[
										5765,
										5769
									],
									[
										6027,
										6031
									],
									[
										6214,
										6218
									],
									[
										6249,
										6253
									],
									[
										6355,
										6359
									],
									[
										6563,
										6567
									],
									[
										6720,
										6724
									],
									[
										7016,
										7020
									],
									[
										7325,
										7329
									],
									[
										7608,
										7612
									],
									[
										7878,
										7882
									],
									[
										8109,
										8113
									],
									[
										8486,
										8490
									],
									[
										8763,
										8767
									],
									[
										9071,
										9075
									],
									[
										9473,
										9477
									],
									[
										9629,
										9633
									],
									[
										9907,
										9911
									],
									[
										10200,
										10204
									],
									[
										10349,
										10353
									],
									[
										10495,
										10499
									],
									[
										10542,
										10546
									],
									[
										10810,
										10814
									],
									[
										11133,
										11137
									],
									[
										11490,
										11494
									],
									[
										11770,
										11774
									],
									[
										11978,
										11982
									],
									[
										12143,
										12147
									],
									[
										12437,
										12441
									],
									[
										12512,
										12516
									],
									[
										12582,
										12586
									],
									[
										12652,
										12656
									],
									[
										12727,
										12731
									],
									[
										12802,
										12806
									],
									[
										12872,
										12876
									],
									[
										12947,
										12951
									],
									[
										13022,
										13026
									],
									[
										13097,
										13101
									],
									[
										13172,
										13176
									],
									[
										13247,
										13251
									],
									[
										13543,
										13547
									],
									[
										13748,
										13752
									],
									[
										14105,
										14109
									],
									[
										14151,
										14155
									],
									[
										14408,
										14412
									],
									[
										14471,
										14475
									],
									[
										14517,
										14521
									],
									[
										14743,
										14747
									],
									[
										15068,
										15072
									],
									[
										15482,
										15486
									],
									[
										15602,
										15606
									],
									[
										15988,
										15992
									],
									[
										16206,
										16210
									],
									[
										16243,
										16247
									],
									[
										16466,
										16470
									],
									[
										16503,
										16507
									],
									[
										16726,
										16730
									],
									[
										16978,
										16982
									],
									[
										17265,
										17269
									],
									[
										17317,
										17321
									],
									[
										17355,
										17359
									],
									[
										17579,
										17583
									],
									[
										17595,
										17599
									],
									[
										17915,
										17919
									],
									[
										18083,
										18087
									],
									[
										18481,
										18485
									],
									[
										18884,
										18888
									],
									[
										19245,
										19249
									],
									[
										19326,
										19330
									],
									[
										19473,
										19477
									],
									[
										19712,
										19716
									],
									[
										19979,
										19983
									],
									[
										20021,
										20025
									],
									[
										20202,
										20206
									],
									[
										20493,
										20497
									],
									[
										20726,
										20730
									],
									[
										20763,
										20767
									],
									[
										20965,
										20969
									],
									[
										21270,
										21274
									],
									[
										21460,
										21464
									],
									[
										21705,
										21709
									],
									[
										21787,
										21791
									],
									[
										22119,
										22123
									],
									[
										22354,
										22358
									],
									[
										22379,
										22383
									],
									[
										22467,
										22471
									],
									[
										22632,
										22636
									],
									[
										22867,
										22871
									],
									[
										23089,
										23093
									],
									[
										23300,
										23304
									],
									[
										23472,
										23476
									],
									[
										23626,
										23630
									],
									[
										23835,
										23839
									],
									[
										24050,
										24054
									],
									[
										24402,
										24406
									],
									[
										24488,
										24492
									],
									[
										24713,
										24717
									],
									[
										24959,
										24963
									],
									[
										25141,
										25145
									],
									[
										25375,
										25379
									],
									[
										25593,
										25597
									],
									[
										25814,
										25818
									],
									[
										26002,
										26006
									],
									[
										26220,
										26224
									],
									[
										26385,
										26389
									],
									[
										26641,
										26645
									],
									[
										26788,
										26792
									],
									[
										26904,
										26908
									],
									[
										26929,
										26933
									],
									[
										27003,
										27007
									],
									[
										27168,
										27172
									],
									[
										27193,
										27197
									],
									[
										27250,
										27254
									],
									[
										27400,
										27404
									],
									[
										27425,
										27429
									],
									[
										27504,
										27508
									],
									[
										27664,
										27668
									],
									[
										27689,
										27693
									],
									[
										27756,
										27760
									],
									[
										27982,
										27986
									],
									[
										28317,
										28321
									],
									[
										28620,
										28624
									],
									[
										28697,
										28701
									],
									[
										28920,
										28924
									],
									[
										28979,
										28983
									],
									[
										28995,
										28999
									],
									[
										29148,
										29152
									],
									[
										29216,
										29220
									],
									[
										29302,
										29306
									],
									[
										29401,
										29405
									],
									[
										29663,
										29667
									],
									[
										29767,
										29771
									],
									[
										29941,
										29945
									],
									[
										30007,
										30011
									],
									[
										30165,
										30169
									],
									[
										30428,
										30432
									],
									[
										30724,
										30728
									],
									[
										30986,
										30990
									],
									[
										31332,
										31336
									],
									[
										31540,
										31544
									],
									[
										31841,
										31845
									],
									[
										32150,
										32154
									],
									[
										32184,
										32188
									],
									[
										32567,
										32571
									],
									[
										32757,
										32761
									],
									[
										33127,
										33131
									],
									[
										33191,
										33195
									],
									[
										33240,
										33244
									],
									[
										33506,
										33510
									],
									[
										33821,
										33825
									],
									[
										34161,
										34165
									],
									[
										34231,
										34235
									],
									[
										34471,
										34475
									],
									[
										34507,
										34511
									],
									[
										34575,
										34579
									],
									[
										34751,
										34755
									],
									[
										34969,
										34973
									],
									[
										35137,
										35141
									],
									[
										35210,
										35214
									],
									[
										35441,
										35445
									],
									[
										35478,
										35482
									],
									[
										35550,
										35554
									],
									[
										35615,
										35619
									],
									[
										35653,
										35657
									],
									[
										35719,
										35723
									],
									[
										35769,
										35773
									],
									[
										35804,
										35808
									],
									[
										35866,
										35870
									],
									[
										35900,
										35904
									],
									[
										35961,
										35965
									],
									[
										35994,
										35998
									],
									[
										36054,
										36058
									],
									[
										36086,
										36090
									],
									[
										36145,
										36149
									],
									[
										36178,
										36182
									],
									[
										36238,
										36242
									],
									[
										36275,
										36279
									],
									[
										36339,
										36343
									],
									[
										36374,
										36378
									],
									[
										36481,
										36485
									],
									[
										36516,
										36520
									],
									[
										36600,
										36604
									],
									[
										36639,
										36643
									],
									[
										36705,
										36709
									],
									[
										36741,
										36745
									],
									[
										36804,
										36808
									],
									[
										36839,
										36843
									],
									[
										36901,
										36905
									],
									[
										36935,
										36939
									],
									[
										36996,
										37000
									],
									[
										37036,
										37040
									],
									[
										37103,
										37107
									],
									[
										37142,
										37146
									],
									[
										37208,
										37212
									],
									[
										37249,
										37253
									],
									[
										37317,
										37321
									],
									[
										37357,
										37361
									],
									[
										37424,
										37428
									],
									[
										37467,
										37471
									],
									[
										37537,
										37541
									],
									[
										37577,
										37581
									],
									[
										37641,
										37645
									],
									[
										37704,
										37708
									],
									[
										37780,
										37784
									],
									[
										37824,
										37828
									],
									[
										37912,
										37916
									],
									[
										37934,
										37938
									],
									[
										38170,
										38174
									],
									[
										38275,
										38279
									],
									[
										38346,
										38350
									],
									[
										38392,
										38396
									],
									[
										38451,
										38455
									],
									[
										38499,
										38503
									],
									[
										38558,
										38562
									],
									[
										38603,
										38607
									],
									[
										38680,
										38684
									],
									[
										38837,
										38841
									],
									[
										38886,
										38890
									],
									[
										39042,
										39046
									],
									[
										39175,
										39179
									],
									[
										39376,
										39380
									],
									[
										39412,
										39416
									],
									[
										39473,
										39477
									],
									[
										39602,
										39606
									],
									[
										39649,
										39653
									],
									[
										39738,
										39742
									],
									[
										39771,
										39775
									],
									[
										39809,
										39813
									],
									[
										39882,
										39886
									],
									[
										39959,
										39963
									],
									[
										40004,
										40008
									],
									[
										40073,
										40077
									],
									[
										40117,
										40121
									],
									[
										40217,
										40221
									],
									[
										40278,
										40282
									],
									[
										40312,
										40316
									],
									[
										40346,
										40350
									],
									[
										40380,
										40384
									],
									[
										40434,
										40438
									],
									[
										40465,
										40469
									],
									[
										40557,
										40561
									],
									[
										40588,
										40592
									],
									[
										40680,
										40684
									],
									[
										40711,
										40715
									],
									[
										40803,
										40807
									],
									[
										40834,
										40838
									],
									[
										40926,
										40930
									],
									[
										40957,
										40961
									],
									[
										41049,
										41053
									],
									[
										41080,
										41084
									],
									[
										41123,
										41127
									],
									[
										41253,
										41257
									],
									[
										41284,
										41288
									],
									[
										41376,
										41380
									],
									[
										41407,
										41411
									],
									[
										41499,
										41503
									],
									[
										41530,
										41534
									],
									[
										41622,
										41626
									],
									[
										41653,
										41657
									],
									[
										41745,
										41749
									],
									[
										41776,
										41780
									],
									[
										41868,
										41872
									],
									[
										41899,
										41903
									],
									[
										41991,
										41995
									],
									[
										42022,
										42026
									],
									[
										42114,
										42118
									],
									[
										42145,
										42149
									],
									[
										42237,
										42241
									],
									[
										42268,
										42272
									],
									[
										42360,
										42364
									],
									[
										42391,
										42395
									],
									[
										42483,
										42487
									],
									[
										42514,
										42518
									],
									[
										42606,
										42610
									],
									[
										42641,
										42645
									],
									[
										42806,
										42810
									],
									[
										42842,
										42846
									],
									[
										42891,
										42895
									],
									[
										42933,
										42937
									],
									[
										43032,
										43036
									],
									[
										43097,
										43101
									],
									[
										43138,
										43142
									],
									[
										43191,
										43195
									],
									[
										43368,
										43372
									],
									[
										43418,
										43422
									],
									[
										43497,
										43501
									],
									[
										43535,
										43539
									],
									[
										43585,
										43589
									],
									[
										43764,
										43768
									],
									[
										44028,
										44032
									],
									[
										44153,
										44157
									],
									[
										44310,
										44314
									],
									[
										44482,
										44486
									],
									[
										44608,
										44612
									],
									[
										44892,
										44896
									],
									[
										45002,
										45006
									],
									[
										45201,
										45205
									],
									[
										45331,
										45335
									],
									[
										45516,
										45520
									],
									[
										45787,
										45791
									],
									[
										45988,
										45992
									],
									[
										46293,
										46297
									],
									[
										46432,
										46436
									],
									[
										46568,
										46572
									],
									[
										46577,
										46581
									],
									[
										46775,
										46779
									],
									[
										46875,
										46879
									],
									[
										46912,
										46916
									],
									[
										46949,
										46953
									],
									[
										47023,
										47027
									],
									[
										47060,
										47064
									],
									[
										47097,
										47101
									],
									[
										47134,
										47138
									],
									[
										47278,
										47282
									],
									[
										47333,
										47337
									],
									[
										47430,
										47434
									],
									[
										47487,
										47491
									],
									[
										47586,
										47590
									],
									[
										47642,
										47646
									],
									[
										47726,
										47730
									],
									[
										47768,
										47772
									],
									[
										47824,
										47828
									],
									[
										47932,
										47936
									],
									[
										47974,
										47978
									],
									[
										48030,
										48034
									],
									[
										48138,
										48142
									],
									[
										48180,
										48184
									],
									[
										48236,
										48240
									],
									[
										48337,
										48341
									],
									[
										48514,
										48518
									],
									[
										48520,
										48524
									],
									[
										48730,
										48734
									],
									[
										48951,
										48955
									],
									[
										49051,
										49055
									],
									[
										49205,
										49209
									],
									[
										49280,
										49284
									],
									[
										49355,
										49359
									],
									[
										49430,
										49434
									],
									[
										49505,
										49509
									],
									[
										49580,
										49584
									],
									[
										49655,
										49659
									],
									[
										49730,
										49734
									],
									[
										49805,
										49809
									],
									[
										49880,
										49884
									],
									[
										49955,
										49959
									],
									[
										50030,
										50034
									],
									[
										50105,
										50109
									],
									[
										50180,
										50184
									],
									[
										50255,
										50259
									],
									[
										50330,
										50334
									],
									[
										50405,
										50409
									],
									[
										50602,
										50606
									],
									[
										50885,
										50889
									],
									[
										51110,
										51114
									],
									[
										51174,
										51178
									],
									[
										51255,
										51259
									],
									[
										51454,
										51458
									],
									[
										51608,
										51612
									],
									[
										51752,
										51756
									],
									[
										51896,
										51900
									],
									[
										52040,
										52044
									],
									[
										52184,
										52188
									],
									[
										52328,
										52332
									],
									[
										52472,
										52476
									],
									[
										52616,
										52620
									],
									[
										52760,
										52764
									],
									[
										52904,
										52908
									],
									[
										53048,
										53052
									],
									[
										53192,
										53196
									],
									[
										53336,
										53340
									],
									[
										53480,
										53484
									],
									[
										53624,
										53628
									],
									[
										53768,
										53772
									],
									[
										53912,
										53916
									],
									[
										54106,
										54110
									],
									[
										54200,
										54204
									],
									[
										54400,
										54404
									],
									[
										54622,
										54626
									],
									[
										54952,
										54956
									],
									[
										55173,
										55177
									],
									[
										55275,
										55279
									],
									[
										55480,
										55484
									],
									[
										55742,
										55746
									],
									[
										55799,
										55803
									],
									[
										56068,
										56072
									],
									[
										56222,
										56226
									],
									[
										56414,
										56418
									],
									[
										56620,
										56624
									],
									[
										56814,
										56818
									],
									[
										57001,
										57005
									],
									[
										57186,
										57190
									],
									[
										57364,
										57368
									],
									[
										57565,
										57569
									],
									[
										57734,
										57738
									],
									[
										57912,
										57916
									],
									[
										58113,
										58117
									],
									[
										58291,
										58295
									],
									[
										58492,
										58496
									],
									[
										58661,
										58665
									],
									[
										58830,
										58834
									],
									[
										59015,
										59019
									],
									[
										59184,
										59188
									],
									[
										59360,
										59364
									],
									[
										59532,
										59536
									],
									[
										59694,
										59698
									],
									[
										59791,
										59795
									],
									[
										59977,
										59981
									],
									[
										60161,
										60165
									],
									[
										60226,
										60230
									],
									[
										60515,
										60519
									],
									[
										60590,
										60594
									],
									[
										60807,
										60811
									],
									[
										61024,
										61028
									],
									[
										61313,
										61317
									],
									[
										61388,
										61392
									],
									[
										61605,
										61609
									],
									[
										61822,
										61826
									],
									[
										62111,
										62115
									],
									[
										62186,
										62190
									],
									[
										62345,
										62349
									],
									[
										62600,
										62604
									],
									[
										62760,
										62764
									],
									[
										62815,
										62819
									],
									[
										62918,
										62922
									],
									[
										63168,
										63172
									],
									[
										63272,
										63276
									],
									[
										63325,
										63329
									],
									[
										63488,
										63492
									],
									[
										63631,
										63635
									],
									[
										63873,
										63877
									],
									[
										64029,
										64033
									],
									[
										64239,
										64243
									],
									[
										64512,
										64516
									],
									[
										64636,
										64640
									],
									[
										64835,
										64839
									],
									[
										64915,
										64919
									],
									[
										64982,
										64986
									],
									[
										65079,
										65083
									],
									[
										65183,
										65187
									],
									[
										65262,
										65266
									],
									[
										65388,
										65392
									],
									[
										65407,
										65411
									],
									[
										65570,
										65574
									],
									[
										65825,
										65829
									],
									[
										66006,
										66010
									],
									[
										66136,
										66140
									],
									[
										66290,
										66294
									],
									[
										66427,
										66431
									],
									[
										66709,
										66713
									],
									[
										66786,
										66790
									],
									[
										66914,
										66918
									],
									[
										67049,
										67053
									],
									[
										67221,
										67225
									],
									[
										67273,
										67277
									],
									[
										67423,
										67427
									],
									[
										67479,
										67483
									],
									[
										67614,
										67618
									],
									[
										67672,
										67676
									],
									[
										67852,
										67856
									],
									[
										68046,
										68050
									],
									[
										68233,
										68237
									],
									[
										68440,
										68444
									],
									[
										68628,
										68632
									],
									[
										68796,
										68800
									],
									[
										68942,
										68946
									],
									[
										69128,
										69132
									],
									[
										69316,
										69320
									],
									[
										69463,
										69467
									],
									[
										69683,
										69687
									],
									[
										69882,
										69886
									],
									[
										69926,
										69930
									],
									[
										70144,
										70148
									],
									[
										70357,
										70361
									],
									[
										70599,
										70603
									],
									[
										70779,
										70783
									],
									[
										70959,
										70963
									],
									[
										71139,
										71143
									],
									[
										71319,
										71323
									],
									[
										71476,
										71480
									],
									[
										71525,
										71529
									],
									[
										71705,
										71709
									],
									[
										71885,
										71889
									],
									[
										72065,
										72069
									],
									[
										72245,
										72249
									],
									[
										72425,
										72429
									],
									[
										72605,
										72609
									],
									[
										72762,
										72766
									],
									[
										72811,
										72815
									],
									[
										72991,
										72995
									],
									[
										73171,
										73175
									],
									[
										73351,
										73355
									],
									[
										73531,
										73535
									],
									[
										73760,
										73764
									],
									[
										73813,
										73817
									],
									[
										73988,
										73992
									],
									[
										74078,
										74082
									],
									[
										74125,
										74129
									],
									[
										74229,
										74233
									],
									[
										74542,
										74546
									],
									[
										74870,
										74874
									],
									[
										75073,
										75077
									],
									[
										75143,
										75147
									],
									[
										75320,
										75324
									],
									[
										75423,
										75427
									],
									[
										75600,
										75604
									],
									[
										75703,
										75707
									],
									[
										75880,
										75884
									],
									[
										76006,
										76010
									],
									[
										76103,
										76107
									],
									[
										76338,
										76342
									],
									[
										76401,
										76405
									],
									[
										76592,
										76596
									],
									[
										76601,
										76605
									],
									[
										76788,
										76792
									],
									[
										76916,
										76920
									],
									[
										77012,
										77016
									],
									[
										77100,
										77104
									],
									[
										77303,
										77307
									],
									[
										77456,
										77460
									],
									[
										77562,
										77566
									],
									[
										77830,
										77834
									],
									[
										77987,
										77991
									],
									[
										78084,
										78088
									],
									[
										78109,
										78113
									],
									[
										78211,
										78215
									],
									[
										78233,
										78237
									],
									[
										78269,
										78273
									],
									[
										78347,
										78351
									],
									[
										78578,
										78582
									],
									[
										78678,
										78682
									],
									[
										78769,
										78773
									],
									[
										78933,
										78937
									],
									[
										79000,
										79004
									],
									[
										79186,
										79190
									],
									[
										79261,
										79265
									],
									[
										79336,
										79340
									],
									[
										79411,
										79415
									],
									[
										79486,
										79490
									],
									[
										79561,
										79565
									],
									[
										79636,
										79640
									],
									[
										79711,
										79715
									],
									[
										79786,
										79790
									],
									[
										79861,
										79865
									],
									[
										79936,
										79940
									],
									[
										80011,
										80015
									],
									[
										80086,
										80090
									],
									[
										80161,
										80165
									],
									[
										80236,
										80240
									],
									[
										80311,
										80315
									],
									[
										80386,
										80390
									],
									[
										80481,
										80485
									],
									[
										80646,
										80650
									],
									[
										80818,
										80822
									],
									[
										80990,
										80994
									],
									[
										81162,
										81166
									],
									[
										81334,
										81338
									],
									[
										81506,
										81510
									],
									[
										81678,
										81682
									],
									[
										81850,
										81854
									],
									[
										82022,
										82026
									],
									[
										82194,
										82198
									],
									[
										82366,
										82370
									],
									[
										82538,
										82542
									],
									[
										82710,
										82714
									],
									[
										82882,
										82886
									],
									[
										83054,
										83058
									],
									[
										83226,
										83230
									],
									[
										83398,
										83402
									],
									[
										83597,
										83601
									],
									[
										83719,
										83723
									],
									[
										83817,
										83821
									],
									[
										83968,
										83972
									],
									[
										84075,
										84079
									],
									[
										84152,
										84156
									],
									[
										84238,
										84242
									],
									[
										84356,
										84360
									],
									[
										84572,
										84576
									],
									[
										84650,
										84654
									],
									[
										84795,
										84799
									],
									[
										84861,
										84865
									],
									[
										84916,
										84920
									],
									[
										84961,
										84965
									],
									[
										85122,
										85126
									],
									[
										85296,
										85300
									],
									[
										85535,
										85539
									],
									[
										85655,
										85659
									],
									[
										85772,
										85776
									],
									[
										85887,
										85891
									],
									[
										86019,
										86023
									],
									[
										86138,
										86142
									],
									[
										86255,
										86259
									],
									[
										86366,
										86370
									],
									[
										86480,
										86484
									],
									[
										86593,
										86597
									],
									[
										86706,
										86710
									],
									[
										86815,
										86819
									],
									[
										86927,
										86931
									],
									[
										87044,
										87048
									],
									[
										87134,
										87138
									],
									[
										87479,
										87483
									],
									[
										87710,
										87714
									],
									[
										87941,
										87945
									],
									[
										88172,
										88176
									],
									[
										88403,
										88407
									],
									[
										88634,
										88638
									],
									[
										88815,
										88819
									],
									[
										89006,
										89010
									],
									[
										89192,
										89196
									],
									[
										89520,
										89524
									],
									[
										89736,
										89740
									],
									[
										89964,
										89968
									],
									[
										90166,
										90170
									],
									[
										90223,
										90227
									],
									[
										90454,
										90458
									],
									[
										90620,
										90624
									],
									[
										90776,
										90780
									],
									[
										90833,
										90837
									],
									[
										90879,
										90883
									],
									[
										90980,
										90984
									],
									[
										91035,
										91039
									],
									[
										91060,
										91064
									],
									[
										91322,
										91326
									],
									[
										91504,
										91508
									],
									[
										91631,
										91635
									],
									[
										91787,
										91791
									],
									[
										91934,
										91938
									],
									[
										92043,
										92047
									],
									[
										92098,
										92102
									],
									[
										92123,
										92127
									],
									[
										92439,
										92443
									],
									[
										92473,
										92477
									],
									[
										92515,
										92519
									],
									[
										92781,
										92785
									],
									[
										92935,
										92939
									],
									[
										93103,
										93107
									],
									[
										93204,
										93208
									],
									[
										93388,
										93392
									],
									[
										93566,
										93570
									],
									[
										93686,
										93690
									],
									[
										93741,
										93745
									],
									[
										93766,
										93770
									],
									[
										93806,
										93810
									],
									[
										93889,
										93893
									],
									[
										94023,
										94027
									],
									[
										94113,
										94117
									],
									[
										94235,
										94239
									],
									[
										94310,
										94314
									],
									[
										94385,
										94389
									],
									[
										94460,
										94464
									],
									[
										94535,
										94539
									],
									[
										94610,
										94614
									],
									[
										94685,
										94689
									],
									[
										94760,
										94764
									],
									[
										94835,
										94839
									],
									[
										94910,
										94914
									],
									[
										94985,
										94989
									],
									[
										95060,
										95064
									],
									[
										95135,
										95139
									],
									[
										95210,
										95214
									],
									[
										95285,
										95289
									],
									[
										95360,
										95364
									],
									[
										95435,
										95439
									],
									[
										95530,
										95534
									],
									[
										95749,
										95753
									],
									[
										95792,
										95796
									],
									[
										96043,
										96047
									],
									[
										96215,
										96219
									],
									[
										96387,
										96391
									],
									[
										96559,
										96563
									],
									[
										96731,
										96735
									],
									[
										96903,
										96907
									],
									[
										97075,
										97079
									],
									[
										97247,
										97251
									],
									[
										97419,
										97423
									],
									[
										97591,
										97595
									],
									[
										97763,
										97767
									],
									[
										97935,
										97939
									],
									[
										98107,
										98111
									],
									[
										98279,
										98283
									],
									[
										98451,
										98455
									],
									[
										98623,
										98627
									],
									[
										98795,
										98799
									],
									[
										99036,
										99040
									],
									[
										99100,
										99104
									],
									[
										99146,
										99150
									],
									[
										99324,
										99328
									],
									[
										99458,
										99462
									],
									[
										99617,
										99621
									],
									[
										99782,
										99786
									],
									[
										99840,
										99844
									],
									[
										99997,
										100001
									],
									[
										100175,
										100179
									],
									[
										100335,
										100339
									],
									[
										100439,
										100443
									],
									[
										100686,
										100690
									],
									[
										100724,
										100728
									],
									[
										100931,
										100935
									],
									[
										101124,
										101128
									],
									[
										101294,
										101298
									],
									[
										101465,
										101469
									],
									[
										101583,
										101587
									],
									[
										101755,
										101759
									],
									[
										101903,
										101907
									],
									[
										101943,
										101947
									],
									[
										101959,
										101963
									],
									[
										102052,
										102056
									],
									[
										102066,
										102070
									],
									[
										102133,
										102137
									],
									[
										102217,
										102221
									],
									[
										102417,
										102421
									],
									[
										102562,
										102566
									],
									[
										102735,
										102739
									],
									[
										102867,
										102871
									],
									[
										103029,
										103033
									],
									[
										103228,
										103232
									],
									[
										103265,
										103269
									],
									[
										103497,
										103501
									],
									[
										103705,
										103709
									],
									[
										103911,
										103915
									],
									[
										104064,
										104068
									],
									[
										104286,
										104290
									],
									[
										104423,
										104427
									],
									[
										104579,
										104583
									],
									[
										104753,
										104757
									],
									[
										104930,
										104934
									],
									[
										105133,
										105137
									],
									[
										105300,
										105304
									],
									[
										105410,
										105414
									],
									[
										105495,
										105499
									],
									[
										105689,
										105693
									],
									[
										105728,
										105732
									],
									[
										106017,
										106021
									],
									[
										106132,
										106136
									],
									[
										106193,
										106197
									],
									[
										106273,
										106277
									],
									[
										106473,
										106477
									],
									[
										106521,
										106525
									],
									[
										106609,
										106613
									],
									[
										106709,
										106713
									],
									[
										106774,
										106778
									],
									[
										106821,
										106825
									],
									[
										106921,
										106925
									],
									[
										107041,
										107045
									],
									[
										107084,
										107088
									],
									[
										107160,
										107164
									],
									[
										107215,
										107219
									],
									[
										107350,
										107354
									],
									[
										107525,
										107529
									],
									[
										107641,
										107645
									],
									[
										107699,
										107703
									],
									[
										107823,
										107827
									],
									[
										107918,
										107922
									],
									[
										108102,
										108106
									],
									[
										108240,
										108244
									],
									[
										108366,
										108370
									],
									[
										108427,
										108431
									],
									[
										108440,
										108444
									],
									[
										108493,
										108497
									],
									[
										108564,
										108568
									],
									[
										108674,
										108678
									],
									[
										108709,
										108713
									],
									[
										108869,
										108873
									],
									[
										109064,
										109068
									],
									[
										109357,
										109361
									],
									[
										109576,
										109580
									],
									[
										109644,
										109648
									],
									[
										109760,
										109764
									],
									[
										109804,
										109808
									],
									[
										109819,
										109823
									],
									[
										109870,
										109874
									],
									[
										109897,
										109901
									],
									[
										109940,
										109944
									],
									[
										109955,
										109959
									],
									[
										110033,
										110037
									],
									[
										110227,
										110231
									],
									[
										110422,
										110426
									],
									[
										110581,
										110585
									],
									[
										110807,
										110811
									],
									[
										110870,
										110874
									],
									[
										111018,
										111022
									],
									[
										111115,
										111119
									],
									[
										111300,
										111304
									],
									[
										111441,
										111445
									],
									[
										111581,
										111585
									],
									[
										111793,
										111797
									],
									[
										112059,
										112063
									],
									[
										112312,
										112316
									],
									[
										112364,
										112368
									],
									[
										112504,
										112508
									],
									[
										112752,
										112756
									],
									[
										112891,
										112895
									],
									[
										113016,
										113020
									],
									[
										113093,
										113097
									],
									[
										113161,
										113165
									],
									[
										113273,
										113277
									],
									[
										113380,
										113384
									],
									[
										113405,
										113409
									],
									[
										113521,
										113525
									],
									[
										113628,
										113632
									],
									[
										113715,
										113719
									],
									[
										113781,
										113785
									],
									[
										113836,
										113840
									],
									[
										113886,
										113890
									],
									[
										114001,
										114005
									],
									[
										114039,
										114043
									],
									[
										114092,
										114096
									],
									[
										114326,
										114330
									],
									[
										114453,
										114457
									],
									[
										114609,
										114613
									],
									[
										114651,
										114655
									],
									[
										114765,
										114769
									],
									[
										115013,
										115017
									],
									[
										115225,
										115229
									],
									[
										115375,
										115379
									],
									[
										115451,
										115455
									],
									[
										115525,
										115529
									],
									[
										115749,
										115753
									],
									[
										115804,
										115808
									],
									[
										115989,
										115993
									],
									[
										116047,
										116051
									],
									[
										116085,
										116089
									],
									[
										116133,
										116137
									],
									[
										116258,
										116262
									],
									[
										116359,
										116363
									],
									[
										116408,
										116412
									],
									[
										116541,
										116545
									],
									[
										116682,
										116686
									],
									[
										116813,
										116817
									],
									[
										117001,
										117005
									],
									[
										117185,
										117189
									],
									[
										117370,
										117374
									],
									[
										117503,
										117507
									],
									[
										117712,
										117716
									],
									[
										117919,
										117923
									],
									[
										118168,
										118172
									],
									[
										118392,
										118396
									],
									[
										118515,
										118519
									],
									[
										118600,
										118604
									],
									[
										118830,
										118834
									],
									[
										118872,
										118876
									],
									[
										119050,
										119054
									],
									[
										119183,
										119187
									],
									[
										119386,
										119390
									],
									[
										119526,
										119530
									],
									[
										119721,
										119725
									],
									[
										120015,
										120019
									],
									[
										120187,
										120191
									],
									[
										120282,
										120286
									],
									[
										120461,
										120465
									],
									[
										120648,
										120652
									],
									[
										120781,
										120785
									],
									[
										120973,
										120977
									],
									[
										121164,
										121168
									],
									[
										121347,
										121351
									],
									[
										121525,
										121529
									],
									[
										121718,
										121722
									],
									[
										121926,
										121930
									],
									[
										122021,
										122025
									],
									[
										122180,
										122184
									],
									[
										122287,
										122291
									],
									[
										122390,
										122394
									],
									[
										122493,
										122497
									],
									[
										122594,
										122598
									],
									[
										122781,
										122785
									],
									[
										122911,
										122915
									],
									[
										122971,
										122975
									],
									[
										123004,
										123008
									],
									[
										123198,
										123202
									],
									[
										123415,
										123419
									],
									[
										123636,
										123640
									],
									[
										123827,
										123831
									],
									[
										124046,
										124050
									],
									[
										124112,
										124116
									],
									[
										124210,
										124214
									],
									[
										124295,
										124299
									],
									[
										124363,
										124367
									],
									[
										124463,
										124467
									],
									[
										124550,
										124554
									],
									[
										124665,
										124669
									],
									[
										124880,
										124884
									],
									[
										124964,
										124968
									],
									[
										125129,
										125133
									],
									[
										125372,
										125376
									],
									[
										125409,
										125413
									],
									[
										125636,
										125640
									],
									[
										125673,
										125677
									],
									[
										125907,
										125911
									],
									[
										125944,
										125948
									],
									[
										126172,
										126176
									],
									[
										126209,
										126213
									],
									[
										126390,
										126394
									],
									[
										126524,
										126528
									],
									[
										126627,
										126631
									],
									[
										126834,
										126838
									],
									[
										127052,
										127056
									],
									[
										127228,
										127232
									],
									[
										127404,
										127408
									],
									[
										127581,
										127585
									],
									[
										127827,
										127831
									],
									[
										128113,
										128117
									],
									[
										128311,
										128315
									],
									[
										128541,
										128545
									],
									[
										128819,
										128823
									],
									[
										129090,
										129094
									],
									[
										129306,
										129310
									],
									[
										129507,
										129511
									],
									[
										129769,
										129773
									],
									[
										129948,
										129952
									],
									[
										130182,
										130186
									],
									[
										130374,
										130378
									],
									[
										130587,
										130591
									],
									[
										130765,
										130769
									],
									[
										131036,
										131040
									],
									[
										131303,
										131307
									],
									[
										131577,
										131581
									],
									[
										131807,
										131811
									],
									[
										132026,
										132030
									],
									[
										132259,
										132263
									],
									[
										132400,
										132404
									],
									[
										132583,
										132587
									],
									[
										132773,
										132777
									],
									[
										132827,
										132831
									],
									[
										133008,
										133012
									],
									[
										133142,
										133146
									],
									[
										133196,
										133200
									],
									[
										133375,
										133379
									],
									[
										133544,
										133548
									],
									[
										133642,
										133646
									],
									[
										133767,
										133771
									],
									[
										133902,
										133906
									],
									[
										134119,
										134123
									],
									[
										134238,
										134242
									],
									[
										134349,
										134353
									],
									[
										134530,
										134534
									],
									[
										134563,
										134567
									],
									[
										134739,
										134743
									],
									[
										134933,
										134937
									],
									[
										135048,
										135052
									],
									[
										135111,
										135115
									],
									[
										135163,
										135167
									],
									[
										135343,
										135347
									],
									[
										135550,
										135554
									],
									[
										135687,
										135691
									],
									[
										135771,
										135775
									],
									[
										135867,
										135871
									],
									[
										136002,
										136006
									],
									[
										136197,
										136201
									],
									[
										136505,
										136509
									],
									[
										136617,
										136621
									],
									[
										136795,
										136799
									],
									[
										136962,
										136966
									],
									[
										137076,
										137080
									],
									[
										137140,
										137144
									],
									[
										137252,
										137256
									],
									[
										137288,
										137292
									],
									[
										137337,
										137341
									],
									[
										137574,
										137578
									],
									[
										137776,
										137780
									],
									[
										137993,
										137997
									],
									[
										138096,
										138100
									],
									[
										138294,
										138298
									],
									[
										138456,
										138460
									],
									[
										138618,
										138622
									],
									[
										138823,
										138827
									],
									[
										139000,
										139004
									],
									[
										139203,
										139207
									],
									[
										139337,
										139341
									],
									[
										139567,
										139571
									],
									[
										139696,
										139700
									],
									[
										139829,
										139833
									],
									[
										140040,
										140044
									],
									[
										140190,
										140194
									],
									[
										140314,
										140318
									],
									[
										140488,
										140492
									],
									[
										140626,
										140630
									],
									[
										140856,
										140860
									],
									[
										140985,
										140989
									],
									[
										141118,
										141122
									],
									[
										141290,
										141294
									],
									[
										141410,
										141414
									],
									[
										141584,
										141588
									],
									[
										141719,
										141723
									],
									[
										141755,
										141759
									],
									[
										141912,
										141916
									],
									[
										141961,
										141965
									],
									[
										142181,
										142185
									],
									[
										142307,
										142311
									],
									[
										142356,
										142360
									],
									[
										142625,
										142629
									],
									[
										142806,
										142810
									],
									[
										142855,
										142859
									],
									[
										143124,
										143128
									],
									[
										143318,
										143322
									],
									[
										143367,
										143371
									],
									[
										143525,
										143529
									],
									[
										143662,
										143666
									],
									[
										143851,
										143855
									],
									[
										144056,
										144060
									],
									[
										144070,
										144074
									],
									[
										144235,
										144239
									],
									[
										144352,
										144356
									],
									[
										144526,
										144530
									],
									[
										144664,
										144668
									],
									[
										144856,
										144860
									],
									[
										145008,
										145012
									],
									[
										145044,
										145048
									],
									[
										145176,
										145180
									],
									[
										145235,
										145239
									],
									[
										145409,
										145413
									],
									[
										145541,
										145545
									],
									[
										145715,
										145719
									],
									[
										145847,
										145851
									],
									[
										145877,
										145881
									],
									[
										146119,
										146123
									],
									[
										146310,
										146314
									],
									[
										146465,
										146469
									],
									[
										146737,
										146741
									],
									[
										146958,
										146962
									],
									[
										146988,
										146992
									],
									[
										147187,
										147191
									],
									[
										147407,
										147411
									],
									[
										147558,
										147562
									],
									[
										147732,
										147736
									],
									[
										147864,
										147868
									],
									[
										148067,
										148071
									],
									[
										148221,
										148225
									],
									[
										148425,
										148429
									],
									[
										148580,
										148584
									],
									[
										148784,
										148788
									],
									[
										149031,
										149035
									],
									[
										149088,
										149092
									],
									[
										149190,
										149194
									],
									[
										149300,
										149304
									],
									[
										149354,
										149358
									],
									[
										149545,
										149549
									],
									[
										149642,
										149646
									],
									[
										149696,
										149700
									],
									[
										149863,
										149867
									],
									[
										150043,
										150047
									],
									[
										150226,
										150230
									],
									[
										150512,
										150516
									],
									[
										150683,
										150687
									],
									[
										150854,
										150858
									],
									[
										151004,
										151008
									],
									[
										151085,
										151089
									],
									[
										151239,
										151243
									],
									[
										151454,
										151458
									],
									[
										151589,
										151593
									],
									[
										151755,
										151759
									],
									[
										151938,
										151942
									],
									[
										152159,
										152163
									],
									[
										152303,
										152307
									],
									[
										152378,
										152382
									],
									[
										152536,
										152540
									],
									[
										152713,
										152717
									],
									[
										152765,
										152769
									],
									[
										152829,
										152833
									],
									[
										153105,
										153109
									],
									[
										153174,
										153178
									],
									[
										153328,
										153332
									],
									[
										153465,
										153469
									],
									[
										153651,
										153655
									],
									[
										153847,
										153851
									],
									[
										154201,
										154205
									],
									[
										154434,
										154438
									],
									[
										154497,
										154501
									],
									[
										154560,
										154564
									],
									[
										154754,
										154758
									],
									[
										154832,
										154836
									],
									[
										154881,
										154885
									],
									[
										155009,
										155013
									],
									[
										155183,
										155187
									],
									[
										155356,
										155360
									],
									[
										155489,
										155493
									],
									[
										155624,
										155628
									],
									[
										155757,
										155761
									],
									[
										155893,
										155897
									],
									[
										156040,
										156044
									],
									[
										156269,
										156273
									],
									[
										156444,
										156448
									],
									[
										156725,
										156729
									],
									[
										156860,
										156864
									],
									[
										157117,
										157121
									],
									[
										157259,
										157263
									],
									[
										157320,
										157324
									],
									[
										157415,
										157419
									],
									[
										157479,
										157483
									],
									[
										157588,
										157592
									],
									[
										157609,
										157613
									],
									[
										157774,
										157778
									],
									[
										157962,
										157966
									],
									[
										158143,
										158147
									],
									[
										158250,
										158254
									],
									[
										158416,
										158420
									],
									[
										158586,
										158590
									],
									[
										158749,
										158753
									],
									[
										158926,
										158930
									],
									[
										159122,
										159126
									],
									[
										159276,
										159280
									],
									[
										159369,
										159373
									],
									[
										159695,
										159699
									],
									[
										159893,
										159897
									],
									[
										160046,
										160050
									],
									[
										160203,
										160207
									],
									[
										160383,
										160387
									],
									[
										160571,
										160575
									],
									[
										160799,
										160803
									],
									[
										160941,
										160945
									],
									[
										161090,
										161094
									],
									[
										161273,
										161277
									],
									[
										161353,
										161357
									],
									[
										161705,
										161709
									],
									[
										161801,
										161805
									],
									[
										161998,
										162002
									],
									[
										162054,
										162058
									],
									[
										162110,
										162114
									],
									[
										162204,
										162208
									],
									[
										162323,
										162327
									],
									[
										162589,
										162593
									],
									[
										162914,
										162918
									],
									[
										163158,
										163162
									],
									[
										163412,
										163416
									],
									[
										163675,
										163679
									],
									[
										163907,
										163911
									],
									[
										164140,
										164144
									],
									[
										164368,
										164372
									],
									[
										164611,
										164615
									],
									[
										164825,
										164829
									],
									[
										164987,
										164991
									],
									[
										165317,
										165321
									],
									[
										165589,
										165593
									],
									[
										165872,
										165876
									],
									[
										166007,
										166011
									],
									[
										166228,
										166232
									],
									[
										166409,
										166413
									],
									[
										166590,
										166594
									],
									[
										166771,
										166775
									],
									[
										166972,
										166976
									],
									[
										167150,
										167154
									],
									[
										167430,
										167434
									],
									[
										167767,
										167771
									],
									[
										167790,
										167794
									],
									[
										168117,
										168121
									],
									[
										168364,
										168368
									],
									[
										168397,
										168401
									],
									[
										168407,
										168411
									],
									[
										168452,
										168456
									],
									[
										168775,
										168779
									],
									[
										169089,
										169093
									],
									[
										169233,
										169237
									],
									[
										169482,
										169486
									],
									[
										169661,
										169665
									],
									[
										169910,
										169914
									],
									[
										170098,
										170102
									],
									[
										170168,
										170172
									],
									[
										170317,
										170321
									],
									[
										170530,
										170534
									],
									[
										170613,
										170617
									],
									[
										170849,
										170853
									],
									[
										171077,
										171081
									],
									[
										171286,
										171290
									],
									[
										171407,
										171411
									],
									[
										171593,
										171597
									],
									[
										171631,
										171635
									],
									[
										171704,
										171708
									],
									[
										171827,
										171831
									],
									[
										171927,
										171931
									],
									[
										171972,
										171976
									],
									[
										172020,
										172024
									],
									[
										172106,
										172110
									],
									[
										172145,
										172149
									],
									[
										172257,
										172261
									],
									[
										172303,
										172307
									],
									[
										172351,
										172355
									],
									[
										172412,
										172416
									],
									[
										172463,
										172467
									],
									[
										172595,
										172599
									],
									[
										172640,
										172644
									],
									[
										172684,
										172688
									],
									[
										172728,
										172732
									],
									[
										172768,
										172772
									],
									[
										172897,
										172901
									],
									[
										173081,
										173085
									],
									[
										173254,
										173258
									],
									[
										173438,
										173442
									],
									[
										173622,
										173626
									],
									[
										173797,
										173801
									],
									[
										173939,
										173943
									],
									[
										174050,
										174054
									],
									[
										174160,
										174164
									],
									[
										174309,
										174313
									],
									[
										174390,
										174394
									],
									[
										174485,
										174489
									],
									[
										174737,
										174741
									],
									[
										174894,
										174898
									],
									[
										175110,
										175114
									],
									[
										175349,
										175353
									],
									[
										175418,
										175422
									],
									[
										175594,
										175598
									],
									[
										175817,
										175821
									],
									[
										175967,
										175971
									],
									[
										176160,
										176164
									],
									[
										176305,
										176309
									],
									[
										176315,
										176319
									],
									[
										176456,
										176460
									],
									[
										176505,
										176509
									],
									[
										176619,
										176623
									],
									[
										176768,
										176772
									],
									[
										176944,
										176948
									],
									[
										177134,
										177138
									],
									[
										177321,
										177325
									],
									[
										177492,
										177496
									],
									[
										177572,
										177576
									],
									[
										177808,
										177812
									],
									[
										177948,
										177952
									],
									[
										178162,
										178166
									],
									[
										178399,
										178403
									],
									[
										178477,
										178481
									],
									[
										178612,
										178616
									],
									[
										178654,
										178658
									],
									[
										178732,
										178736
									],
									[
										178910,
										178914
									],
									[
										178916,
										178920
									],
									[
										179053,
										179057
									],
									[
										179171,
										179175
									],
									[
										179333,
										179337
									],
									[
										179470,
										179474
									],
									[
										179572,
										179576
									],
									[
										179729,
										179733
									],
									[
										179947,
										179951
									],
									[
										180071,
										180075
									],
									[
										180277,
										180281
									],
									[
										180386,
										180390
									],
									[
										180599,
										180603
									],
									[
										180706,
										180710
									],
									[
										180805,
										180809
									],
									[
										180893,
										180897
									],
									[
										181011,
										181015
									],
									[
										181189,
										181193
									],
									[
										181348,
										181352
									],
									[
										181515,
										181519
									],
									[
										181624,
										181628
									],
									[
										181657,
										181661
									],
									[
										181855,
										181859
									],
									[
										181962,
										181966
									],
									[
										182061,
										182065
									],
									[
										182149,
										182153
									],
									[
										182267,
										182271
									],
									[
										182405,
										182409
									],
									[
										182464,
										182468
									],
									[
										182590,
										182594
									],
									[
										182779,
										182783
									],
									[
										182899,
										182903
									],
									[
										183079,
										183083
									],
									[
										183217,
										183221
									],
									[
										183408,
										183412
									],
									[
										183514,
										183518
									],
									[
										183612,
										183616
									],
									[
										183708,
										183712
									],
									[
										183895,
										183899
									],
									[
										184032,
										184036
									],
									[
										184152,
										184156
									],
									[
										184385,
										184389
									],
									[
										184465,
										184469
									],
									[
										184705,
										184709
									],
									[
										185027,
										185031
									],
									[
										185278,
										185282
									],
									[
										185328,
										185332
									],
									[
										185746,
										185750
									],
									[
										185962,
										185966
									],
									[
										186272,
										186276
									],
									[
										186506,
										186510
									],
									[
										186788,
										186792
									],
									[
										187050,
										187054
									],
									[
										187333,
										187337
									],
									[
										187582,
										187586
									],
									[
										187865,
										187869
									],
									[
										188127,
										188131
									],
									[
										188440,
										188444
									],
									[
										188676,
										188680
									],
									[
										188988,
										188992
									],
									[
										189224,
										189228
									],
									[
										189508,
										189512
									],
									[
										189757,
										189761
									],
									[
										190065,
										190069
									],
									[
										190301,
										190305
									],
									[
										190589,
										190593
									],
									[
										190838,
										190842
									],
									[
										191124,
										191128
									],
									[
										191373,
										191377
									],
									[
										191694,
										191698
									],
									[
										191910,
										191914
									],
									[
										192201,
										192205
									],
									[
										192463,
										192467
									],
									[
										192752,
										192756
									],
									[
										193014,
										193018
									],
									[
										193323,
										193327
									],
									[
										193559,
										193563
									],
									[
										193878,
										193882
									],
									[
										194094,
										194098
									],
									[
										194385,
										194389
									],
									[
										194634,
										194638
									],
									[
										194926,
										194930
									],
									[
										195188,
										195192
									],
									[
										195478,
										195482
									],
									[
										195727,
										195731
									],
									[
										196017,
										196021
									],
									[
										196266,
										196270
									],
									[
										196548,
										196552
									],
									[
										196797,
										196801
									],
									[
										197085,
										197089
									],
									[
										197343,
										197347
									],
									[
										197480,
										197484
									],
									[
										197494,
										197498
									],
									[
										197837,
										197841
									],
									[
										198086,
										198090
									],
									[
										198393,
										198397
									],
									[
										198629,
										198633
									],
									[
										198951,
										198955
									],
									[
										199167,
										199171
									],
									[
										199486,
										199490
									],
									[
										199702,
										199706
									],
									[
										200021,
										200025
									],
									[
										200237,
										200241
									],
									[
										200522,
										200526
									],
									[
										200771,
										200775
									],
									[
										201061,
										201065
									],
									[
										201310,
										201314
									],
									[
										201619,
										201623
									],
									[
										201853,
										201857
									],
									[
										202141,
										202145
									],
									[
										202390,
										202394
									],
									[
										202696,
										202700
									],
									[
										202932,
										202936
									],
									[
										203239,
										203243
									],
									[
										203473,
										203477
									],
									[
										203756,
										203760
									],
									[
										204005,
										204009
									],
									[
										204289,
										204293
									],
									[
										204538,
										204542
									],
									[
										204860,
										204864
									],
									[
										205096,
										205100
									],
									[
										205415,
										205419
									],
									[
										205631,
										205635
									],
									[
										205950,
										205954
									],
									[
										206186,
										206190
									],
									[
										206497,
										206501
									],
									[
										206731,
										206735
									],
									[
										207047,
										207051
									],
									[
										207281,
										207285
									],
									[
										207595,
										207599
									],
									[
										207811,
										207815
									],
									[
										208126,
										208130
									],
									[
										208360,
										208364
									],
									[
										208674,
										208678
									],
									[
										208910,
										208914
									],
									[
										209228,
										209232
									],
									[
										209464,
										209468
									],
									[
										209777,
										209781
									],
									[
										210011,
										210015
									],
									[
										210318,
										210322
									],
									[
										210534,
										210538
									],
									[
										210821,
										210825
									],
									[
										211070,
										211074
									],
									[
										211356,
										211360
									],
									[
										211605,
										211609
									],
									[
										211890,
										211894
									],
									[
										212139,
										212143
									],
									[
										212450,
										212454
									],
									[
										212686,
										212690
									],
									[
										213001,
										213005
									],
									[
										213237,
										213241
									],
									[
										213556,
										213560
									],
									[
										213792,
										213796
									],
									[
										214108,
										214112
									],
									[
										214344,
										214348
									],
									[
										214513,
										214517
									],
									[
										214685,
										214689
									],
									[
										215176,
										215185
									],
									[
										215384,
										215393
									],
									[
										215604,
										215613
									],
									[
										215916,
										215925
									],
									[
										216196,
										216205
									],
									[
										216347,
										216356
									],
									[
										216512,
										216521
									],
									[
										216683,
										216692
									],
									[
										216763,
										216772
									],
									[
										216982,
										216991
									],
									[
										217102,
										217111
									],
									[
										217245,
										217254
									],
									[
										217259,
										217268
									],
									[
										217801,
										217813
									],
									[
										218036,
										218048
									],
									[
										218320,
										218332
									],
									[
										218740,
										218753
									],
									[
										218828,
										218841
									],
									[
										218915,
										218928
									],
									[
										219053,
										219066
									],
									[
										219193,
										219206
									],
									[
										219351,
										219364
									],
									[
										219500,
										219513
									],
									[
										219647,
										219660
									],
									[
										219798,
										219811
									],
									[
										220028,
										220041
									],
									[
										220173,
										220186
									],
									[
										220324,
										220337
									],
									[
										220565,
										220578
									],
									[
										220722,
										220735
									],
									[
										220801,
										220814
									],
									[
										220948,
										220961
									],
									[
										221186,
										221199
									],
									[
										221441,
										221454
									],
									[
										221635,
										221648
									],
									[
										221712,
										221725
									],
									[
										221785,
										221798
									],
									[
										222014,
										222027
									],
									[
										222151,
										222164
									],
									[
										222348,
										222361
									],
									[
										222492,
										222505
									],
									[
										222754,
										222767
									],
									[
										222924,
										222937
									],
									[
										222992,
										223005
									],
									[
										223066,
										223079
									],
									[
										223271,
										223284
									],
									[
										223357,
										223370
									],
									[
										223435,
										223448
									],
									[
										223640,
										223653
									],
									[
										223764,
										223777
									],
									[
										223803,
										223816
									],
									[
										223840,
										223853
									],
									[
										223877,
										223890
									],
									[
										223916,
										223929
									],
									[
										223955,
										223968
									],
									[
										223993,
										224006
									],
									[
										224031,
										224044
									],
									[
										224199,
										224212
									],
									[
										224280,
										224293
									],
									[
										224349,
										224362
									],
									[
										224420,
										224433
									],
									[
										224566,
										224579
									],
									[
										224711,
										224724
									],
									[
										224861,
										224874
									],
									[
										225077,
										225090
									],
									[
										225386,
										225399
									],
									[
										225441,
										225454
									],
									[
										225574,
										225587
									],
									[
										225645,
										225658
									],
									[
										225879,
										225892
									],
									[
										225961,
										225974
									],
									[
										226151,
										226164
									],
									[
										226206,
										226219
									],
									[
										226374,
										226387
									],
									[
										226503,
										226516
									],
									[
										226581,
										226594
									],
									[
										226711,
										226724
									],
									[
										226795,
										226808
									],
									[
										226999,
										227012
									],
									[
										227177,
										227190
									],
									[
										227432,
										227445
									],
									[
										227485,
										227498
									],
									[
										227536,
										227549
									],
									[
										227587,
										227600
									],
									[
										227640,
										227653
									],
									[
										227693,
										227706
									],
									[
										227745,
										227758
									],
									[
										227797,
										227810
									],
									[
										227909,
										227922
									],
									[
										227996,
										228009
									],
									[
										228149,
										228162
									],
									[
										228304,
										228317
									],
									[
										228441,
										228454
									],
									[
										228598,
										228611
									],
									[
										228741,
										228754
									],
									[
										228877,
										228890
									],
									[
										229117,
										229130
									],
									[
										229358,
										229371
									],
									[
										229646,
										229659
									],
									[
										229804,
										229817
									],
									[
										229969,
										229982
									],
									[
										230150,
										230163
									],
									[
										230300,
										230313
									],
									[
										230463,
										230476
									],
									[
										230608,
										230621
									],
									[
										230760,
										230773
									],
									[
										230839,
										230852
									],
									[
										230903,
										230916
									],
									[
										230990,
										231003
									],
									[
										231082,
										231095
									],
									[
										231226,
										231239
									],
									[
										231372,
										231385
									],
									[
										231523,
										231536
									],
									[
										231606,
										231619
									],
									[
										231691,
										231704
									],
									[
										231780,
										231793
									],
									[
										231866,
										231879
									],
									[
										232008,
										232021
									],
									[
										232170,
										232183
									],
									[
										232228,
										232241
									],
									[
										232385,
										232398
									],
									[
										232468,
										232481
									],
									[
										232619,
										232632
									],
									[
										232770,
										232783
									],
									[
										232920,
										232933
									],
									[
										233071,
										233084
									],
									[
										233224,
										233237
									],
									[
										233379,
										233392
									],
									[
										233531,
										233544
									],
									[
										233609,
										233622
									],
									[
										233693,
										233706
									],
									[
										233783,
										233796
									],
									[
										233927,
										233940
									],
									[
										234015,
										234028
									],
									[
										234162,
										234175
									],
									[
										234301,
										234314
									],
									[
										234390,
										234403
									],
									[
										234535,
										234548
									],
									[
										234628,
										234641
									],
									[
										234782,
										234795
									],
									[
										234857,
										234870
									],
									[
										234936,
										234949
									],
									[
										235014,
										235027
									],
									[
										235093,
										235106
									],
									[
										235181,
										235194
									],
									[
										235262,
										235275
									],
									[
										235510,
										235523
									],
									[
										235727,
										235740
									],
									[
										235820,
										235833
									],
									[
										235885,
										235898
									],
									[
										236076,
										236089
									],
									[
										236294,
										236307
									],
									[
										236431,
										236444
									],
									[
										236585,
										236598
									],
									[
										236838,
										236851
									],
									[
										237022,
										237035
									],
									[
										237098,
										237111
									],
									[
										237355,
										237368
									],
									[
										237501,
										237514
									],
									[
										237584,
										237597
									],
									[
										237675,
										237688
									],
									[
										237828,
										237841
									],
									[
										237973,
										237986
									],
									[
										238148,
										238161
									],
									[
										238405,
										238418
									],
									[
										238751,
										238764
									],
									[
										238909,
										238922
									],
									[
										239090,
										239103
									],
									[
										239252,
										239265
									],
									[
										239456,
										239469
									],
									[
										239615,
										239628
									],
									[
										239779,
										239792
									],
									[
										239930,
										239943
									],
									[
										240083,
										240096
									],
									[
										240247,
										240260
									],
									[
										240403,
										240416
									],
									[
										240557,
										240570
									],
									[
										240710,
										240723
									],
									[
										240867,
										240880
									],
									[
										241025,
										241038
									],
									[
										241172,
										241185
									],
									[
										241342,
										241355
									],
									[
										241490,
										241503
									],
									[
										241651,
										241664
									],
									[
										241869,
										241882
									],
									[
										242026,
										242039
									],
									[
										242181,
										242194
									],
									[
										242336,
										242349
									],
									[
										242706,
										242719
									],
									[
										242754,
										242767
									],
									[
										242811,
										242824
									],
									[
										242867,
										242880
									],
									[
										242928,
										242941
									],
									[
										243040,
										243053
									],
									[
										243121,
										243134
									],
									[
										243360,
										243373
									],
									[
										243514,
										243527
									],
									[
										243674,
										243687
									],
									[
										243832,
										243845
									],
									[
										243996,
										244009
									],
									[
										244156,
										244169
									],
									[
										244308,
										244321
									],
									[
										244470,
										244483
									],
									[
										244685,
										244698
									],
									[
										244847,
										244860
									],
									[
										245051,
										245064
									],
									[
										245114,
										245127
									],
									[
										245322,
										245335
									],
									[
										245368,
										245381
									],
									[
										245535,
										245548
									],
									[
										245659,
										245672
									],
									[
										245720,
										245733
									],
									[
										245780,
										245793
									],
									[
										245986,
										245999
									],
									[
										246192,
										246205
									],
									[
										246389,
										246402
									],
									[
										246582,
										246595
									],
									[
										246747,
										246760
									],
									[
										246893,
										246906
									],
									[
										247120,
										247133
									],
									[
										247407,
										247420
									],
									[
										247495,
										247508
									],
									[
										247732,
										247745
									],
									[
										248039,
										248052
									],
									[
										248139,
										248152
									],
									[
										248192,
										248205
									],
									[
										248400,
										248413
									],
									[
										248606,
										248619
									],
									[
										248733,
										248746
									],
									[
										248787,
										248800
									],
									[
										248886,
										248899
									],
									[
										249060,
										249073
									],
									[
										249268,
										249281
									],
									[
										249303,
										249316
									],
									[
										249514,
										249527
									],
									[
										249545,
										249558
									],
									[
										249835,
										249844
									],
									[
										249961,
										249970
									],
									[
										249980,
										249989
									],
									[
										250146,
										250155
									],
									[
										250283,
										250292
									],
									[
										250545,
										250554
									],
									[
										250632,
										250641
									],
									[
										250786,
										250795
									],
									[
										250920,
										250929
									],
									[
										251100,
										251109
									],
									[
										251144,
										251153
									],
									[
										251289,
										251298
									],
									[
										251361,
										251370
									],
									[
										251532,
										251541
									],
									[
										251700,
										251709
									],
									[
										251843,
										251852
									],
									[
										251997,
										252006
									],
									[
										252190,
										252199
									],
									[
										252237,
										252246
									],
									[
										252456,
										252465
									],
									[
										252544,
										252553
									],
									[
										252768,
										252777
									],
									[
										252920,
										252929
									],
									[
										253154,
										253163
									],
									[
										253261,
										253270
									],
									[
										253483,
										253492
									],
									[
										253686,
										253695
									],
									[
										253894,
										253903
									],
									[
										254094,
										254103
									],
									[
										254297,
										254306
									],
									[
										254516,
										254525
									],
									[
										254541,
										254550
									],
									[
										254765,
										254774
									],
									[
										255020,
										255029
									],
									[
										255308,
										255317
									],
									[
										255569,
										255578
									],
									[
										255866,
										255875
									],
									[
										256075,
										256084
									],
									[
										256247,
										256256
									],
									[
										256472,
										256481
									],
									[
										256685,
										256694
									],
									[
										256894,
										256903
									],
									[
										257065,
										257074
									],
									[
										257223,
										257232
									],
									[
										257383,
										257392
									],
									[
										257545,
										257554
									],
									[
										257713,
										257722
									],
									[
										257885,
										257894
									],
									[
										258096,
										258105
									],
									[
										258220,
										258229
									],
									[
										258344,
										258353
									],
									[
										258586,
										258595
									],
									[
										258811,
										258820
									],
									[
										258931,
										258940
									],
									[
										259052,
										259061
									],
									[
										259173,
										259182
									],
									[
										259415,
										259424
									],
									[
										259568,
										259577
									],
									[
										259755,
										259764
									],
									[
										259964,
										259973
									],
									[
										260278,
										260287
									],
									[
										260642,
										260651
									],
									[
										260939,
										260948
									],
									[
										261316,
										261325
									],
									[
										261468,
										261477
									],
									[
										261677,
										261686
									],
									[
										261821,
										261830
									],
									[
										262020,
										262029
									],
									[
										262200,
										262209
									],
									[
										262353,
										262362
									],
									[
										262628,
										262637
									],
									[
										262934,
										262943
									],
									[
										263162,
										263171
									],
									[
										263394,
										263403
									],
									[
										263677,
										263686
									],
									[
										263960,
										263969
									],
									[
										264176,
										264185
									],
									[
										264363,
										264372
									],
									[
										264515,
										264524
									],
									[
										264705,
										264714
									],
									[
										264888,
										264897
									],
									[
										265077,
										265086
									],
									[
										265250,
										265259
									],
									[
										265381,
										265390
									],
									[
										265560,
										265569
									],
									[
										265861,
										265870
									],
									[
										266164,
										266173
									],
									[
										266346,
										266355
									],
									[
										266599,
										266608
									],
									[
										266801,
										266810
									],
									[
										267002,
										267011
									],
									[
										267183,
										267192
									],
									[
										267370,
										267379
									],
									[
										267606,
										267615
									],
									[
										267856,
										267865
									],
									[
										268065,
										268074
									],
									[
										268297,
										268306
									],
									[
										268496,
										268505
									],
									[
										268736,
										268745
									],
									[
										268907,
										268916
									],
									[
										269054,
										269063
									],
									[
										269231,
										269240
									],
									[
										269500,
										269509
									],
									[
										269724,
										269733
									],
									[
										270021,
										270030
									],
									[
										270144,
										270153
									],
									[
										270267,
										270276
									],
									[
										270382,
										270391
									],
									[
										270497,
										270506
									],
									[
										270644,
										270653
									],
									[
										270974,
										270983
									],
									[
										271156,
										271165
									],
									[
										271347,
										271356
									],
									[
										271562,
										271571
									],
									[
										271731,
										271740
									],
									[
										271894,
										271903
									],
									[
										272058,
										272067
									],
									[
										272223,
										272232
									],
									[
										272391,
										272400
									],
									[
										272561,
										272570
									],
									[
										272736,
										272745
									],
									[
										272911,
										272920
									],
									[
										273084,
										273093
									],
									[
										273288,
										273297
									],
									[
										273463,
										273472
									],
									[
										273635,
										273644
									],
									[
										273806,
										273815
									],
									[
										273977,
										273986
									],
									[
										274223,
										274232
									],
									[
										274429,
										274438
									],
									[
										274637,
										274646
									],
									[
										274837,
										274846
									],
									[
										275021,
										275030
									],
									[
										275229,
										275238
									],
									[
										275406,
										275415
									],
									[
										275570,
										275579
									],
									[
										275756,
										275765
									],
									[
										275938,
										275947
									],
									[
										276227,
										276236
									],
									[
										276535,
										276544
									],
									[
										276764,
										276773
									],
									[
										276943,
										276952
									],
									[
										277162,
										277171
									],
									[
										277410,
										277419
									],
									[
										277589,
										277598
									],
									[
										277780,
										277789
									],
									[
										278044,
										278053
									],
									[
										278249,
										278258
									],
									[
										278520,
										278529
									],
									[
										278726,
										278735
									],
									[
										278929,
										278938
									],
									[
										279105,
										279114
									],
									[
										279289,
										279298
									],
									[
										279508,
										279517
									],
									[
										279689,
										279698
									],
									[
										279906,
										279915
									],
									[
										280139,
										280148
									],
									[
										280355,
										280364
									],
									[
										280529,
										280538
									],
									[
										280678,
										280687
									],
									[
										280850,
										280859
									],
									[
										281021,
										281030
									],
									[
										281167,
										281176
									],
									[
										281381,
										281390
									],
									[
										281527,
										281536
									],
									[
										281741,
										281750
									],
									[
										281887,
										281896
									],
									[
										282019,
										282028
									],
									[
										282165,
										282174
									],
									[
										282320,
										282329
									],
									[
										282602,
										282611
									],
									[
										282862,
										282871
									],
									[
										283094,
										283103
									],
									[
										283306,
										283315
									],
									[
										283426,
										283435
									],
									[
										283546,
										283555
									],
									[
										283712,
										283721
									],
									[
										283892,
										283901
									],
									[
										284072,
										284081
									],
									[
										284252,
										284261
									],
									[
										284428,
										284437
									],
									[
										284638,
										284647
									],
									[
										284818,
										284827
									],
									[
										284998,
										285007
									],
									[
										285178,
										285187
									],
									[
										285358,
										285367
									],
									[
										285538,
										285547
									],
									[
										285714,
										285723
									],
									[
										285924,
										285933
									],
									[
										286104,
										286113
									],
									[
										286284,
										286293
									],
									[
										286464,
										286473
									],
									[
										286644,
										286653
									],
									[
										286799,
										286808
									],
									[
										287055,
										287064
									],
									[
										287157,
										287166
									],
									[
										287489,
										287498
									],
									[
										287612,
										287621
									],
									[
										287714,
										287723
									],
									[
										287903,
										287912
									],
									[
										288009,
										288018
									],
									[
										288231,
										288240
									],
									[
										288354,
										288363
									],
									[
										288511,
										288520
									],
									[
										288634,
										288643
									],
									[
										288791,
										288800
									],
									[
										288914,
										288923
									],
									[
										289115,
										289124
									],
									[
										289145,
										289154
									],
									[
										289399,
										289408
									],
									[
										289612,
										289621
									],
									[
										289769,
										289778
									],
									[
										289969,
										289978
									],
									[
										290004,
										290013
									],
									[
										290090,
										290099
									],
									[
										290350,
										290359
									],
									[
										290381,
										290390
									],
									[
										290554,
										290563
									],
									[
										290826,
										290835
									],
									[
										291087,
										291096
									],
									[
										291280,
										291289
									],
									[
										291466,
										291475
									],
									[
										291675,
										291684
									],
									[
										291872,
										291881
									],
									[
										292065,
										292074
									],
									[
										292256,
										292265
									],
									[
										292441,
										292450
									],
									[
										292685,
										292694
									],
									[
										292929,
										292938
									],
									[
										293144,
										293153
									],
									[
										293337,
										293346
									],
									[
										293531,
										293540
									],
									[
										293721,
										293730
									],
									[
										293949,
										293958
									],
									[
										294136,
										294145
									],
									[
										294323,
										294332
									],
									[
										294556,
										294565
									],
									[
										294793,
										294802
									],
									[
										295030,
										295039
									],
									[
										295253,
										295262
									],
									[
										295490,
										295499
									],
									[
										295713,
										295722
									],
									[
										295987,
										295996
									],
									[
										296282,
										296291
									],
									[
										296444,
										296453
									],
									[
										296609,
										296618
									],
									[
										296748,
										296757
									],
									[
										296999,
										297008
									],
									[
										297194,
										297203
									],
									[
										297451,
										297460
									],
									[
										297647,
										297656
									],
									[
										297842,
										297851
									],
									[
										298008,
										298017
									],
									[
										298183,
										298192
									],
									[
										298343,
										298352
									],
									[
										298531,
										298540
									],
									[
										298681,
										298690
									],
									[
										298918,
										298927
									],
									[
										299083,
										299092
									],
									[
										299267,
										299276
									],
									[
										299474,
										299483
									],
									[
										299664,
										299673
									],
									[
										299874,
										299883
									],
									[
										300076,
										300085
									],
									[
										300245,
										300254
									],
									[
										300435,
										300444
									],
									[
										300659,
										300668
									],
									[
										300821,
										300830
									],
									[
										301010,
										301019
									],
									[
										301213,
										301222
									],
									[
										301295,
										301304
									],
									[
										301504,
										301513
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								250552,
								250552
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 9,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 133984.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "libpng/png.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26668,
						"regions":
						{
						},
						"selection":
						[
							[
								69,
								73
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "libpng/pngset.c",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 34516,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "libpng/png.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 118278,
						"regions":
						{
						},
						"selection":
						[
							[
								27651,
								27664
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 12197.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "libzip/zip_fread.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3599,
						"regions":
						{
						},
						"selection":
						[
							[
								3290,
								3290
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1942.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "Android.mk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2275,
						"regions":
						{
						},
						"selection":
						[
							[
								2275,
								2275
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 314.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "BUILD_INSTRUCTIONS",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2927,
						"regions":
						{
						},
						"selection":
						[
							[
								1075,
								1075
							]
						],
						"settings":
						{
							"auto_name": "How to build and setup",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "Application.mk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 143,
						"regions":
						{
						},
						"selection":
						[
							[
								24,
								24
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "StarCatcherApplication.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 774,
						"regions":
						{
						},
						"selection":
						[
							[
								586,
								586
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "StarCatcherApplication.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 372,
						"regions":
						{
						},
						"selection":
						[
							[
								308,
								308
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "include/log.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 688,
						"regions":
						{
						},
						"selection":
						[
							[
								118,
								118
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "include/jniUtils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 462,
						"regions":
						{
						},
						"selection":
						[
							[
								61,
								61
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "include/platform.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 117,
						"regions":
						{
						},
						"selection":
						[
							[
								87,
								87
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "sublime.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"log",
				"include\\log.h"
			],
			[
				"zip.h",
				"libzip\\zip.h"
			],
			[
				"plat",
				"PlatformAndroid.h"
			],
			[
				"cameraacti",
				"Camera\\src\\com\\android\\camera\\CameraActivity.java"
			],
			[
				"conf",
				"FFmpeg-Android\\ffmpeg\\configure"
			],
			[
				"com_med",
				"jni\\jni\\com_media_ffmpeg_FFMpeg.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 385.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
